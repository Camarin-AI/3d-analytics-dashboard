This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-06-10T11:29:10.512Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  api/
    conversion-rates/
      route.ts
    customer-volume/
      route.ts
    debug/
      db/
        route.ts
    embed-assisted-revenue/
      route.ts
    interaction-duration/
      route.ts
    kpi/
      route.ts
    region-data/
      route.ts
    return-rates/
      route.ts
    sales-funnel/
      route.ts
    sales-overview/
      route.ts
    sku-data/
      route.ts
    total-sales/
      route.ts
    traffic-analysis/
      route.ts
    traffic-analysis-sales/
      route.ts
    visitor-analysis/
      route.ts
    weekly-visitors/
      route.ts
    weekly-visits/
      route.ts
  auth/
    page.tsx
  insights/
    page.tsx
  sales/
    page.tsx
  sign-in/
    page.tsx
  sku/
    page.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  dashboard/
    sales-overview.tsx
    traffic-analysis.tsx
    weekly-visitors.tsx
    weekly-visits.tsx
  insights/
    customer-volume-age.tsx
    region-analytics.tsx
    region-gauges.tsx
  magicui/
    globe.tsx
    shimmer-button.tsx
  pages/
    dashboard.tsx
    Insights.tsx
    sales.tsx
    sku-analytics.tsx
  sales/
    conversion-rates.tsx
    embed-assisted-revenue.tsx
    return-rates.tsx
    total-sales.tsx
    traffic-analysis-sales.tsx
  sku/
    interaction-duration.tsx
    sales-funnel-analysis.tsx
    sku-details.tsx
    visitor-analysis.tsx
  ui/
    accordion.tsx
    alert-dialog.tsx
    alert.tsx
    aspect-ratio.tsx
    avatar.tsx
    badge.tsx
    breadcrumb.tsx
    button.tsx
    calendar.tsx
    card.tsx
    carousel.tsx
    chart.tsx
    checkbox.tsx
    collapsible.tsx
    command.tsx
    context-menu.tsx
    dialog.tsx
    drawer.tsx
    dropdown-menu.tsx
    form.tsx
    hover-card.tsx
    input-otp.tsx
    input.tsx
    label.tsx
    menubar.tsx
    navigation-menu.tsx
    pagination.tsx
    popover.tsx
    progress.tsx
    radio-group.tsx
    resizable.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    sheet.tsx
    sidebar.tsx
    skeleton.tsx
    slider.tsx
    sonner.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    textarea.tsx
    toast.tsx
    toaster.tsx
    toggle-group.tsx
    toggle.tsx
    tooltip.tsx
    use-mobile.tsx
    use-toast.ts
  date-range-picker.tsx
  header.tsx
  kpi-cards.tsx
  search.tsx
  sidebar.tsx
  theme-provider.tsx
hooks/
  use-api-data.ts
  use-mobile.tsx
  use-toast.ts
lib/
  data-service.ts
  db.ts
  utils.ts
public/
  camarinlogo.svg
  placeholder-logo.svg
  placeholder.svg
styles/
  globals.css
.env.local
.gitignore
components.json
db.sql
middleware.ts
next-env.d.ts
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/api/conversion-rates/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getConversionRatesData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('Conversion Rates API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch conversion rates data' },
      { status: 500 }
    );
  }
}

================
File: app/api/customer-volume/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getCustomerVolumeData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('Customer Volume API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch customer volume data' },
      { status: 500 }
    );
  }
}

================
File: app/api/debug/db/route.ts
================
// app/api/debug/db/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    console.log('=== Database Debug Route ===');
    
    // Test basic connection
    const connectionTest = await DataService.testDatabaseConnection();
    console.log('Connection test result:', connectionTest);
    
    if (!connectionTest) {
      return NextResponse.json({
        success: false,
        error: 'Database connection failed',
        timestamp: new Date().toISOString(),
        environment: {
          NODE_ENV: process.env.NODE_ENV,
          hasHost: !!process.env.TIMESCALEDB_HOST,
          hasPort: !!process.env.TIMESCALEDB_PORT,
          hasDatabase: !!process.env.TIMESCALEDB_NAME,
          hasUser: !!process.env.TIMESCALEDB_USER,
          hasPassword: !!process.env.TIMESCALEDB_PASSWORD,
          host: process.env.TIMESCALEDB_HOST?.substring(0, 20) + '...',
          port: process.env.TIMESCALEDB_PORT,
          database: process.env.TIMESCALEDB_NAME,
          user: process.env.TIMESCALEDB_USER,
        }
      }, { status: 500 });
    }

    return NextResponse.json({
      success: true,
      message: 'Database connection successful',
      timestamp: new Date().toISOString(),
      environment: {
        NODE_ENV: process.env.NODE_ENV,
        hasHost: !!process.env.TIMESCALEDB_HOST,
        hasPort: !!process.env.TIMESCALEDB_PORT,
        hasDatabase: !!process.env.TIMESCALEDB_NAME,
        hasUser: !!process.env.TIMESCALEDB_USER,
        hasPassword: !!process.env.TIMESCALEDB_PASSWORD,
      }
    });

  } catch (error) {
    console.error('Debug API error:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

================
File: app/api/embed-assisted-revenue/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getEmbedAssistedRevenueData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('Embed Assisted Revenue API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch embed assisted revenue data' },
      { status: 500 }
    );
  }
}

================
File: app/api/interaction-duration/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getInteractionDurationData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('Interaction Duration API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch interaction duration data' },
      { status: 500 }
    );
  }
}

================
File: app/api/kpi/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getKPIData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('KPI API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch KPI data' },
      { status: 500 }
    );
  }
}

================
File: app/api/region-data/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getRegionData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('Region Data API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch region data' },
      { status: 500 }
    );
  }
}

================
File: app/api/return-rates/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getReturnRatesData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('Return Rates API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch return rates data' },
      { status: 500 }
    );
  }
}

================
File: app/api/sales-funnel/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getSalesFunnelData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('Sales Funnel API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch sales funnel data' },
      { status: 500 }
    );
  }
}

================
File: app/api/sales-overview/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getKPIData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('KPI API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch KPI data' },
      { status: 500 }
    );
  }
}

================
File: app/api/sku-data/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const skuId = searchParams.get('skuId') || 'ID140001';

    const data = await DataService.getSKUData(skuId);
    return NextResponse.json(data);
  } catch (error) {
    console.error('SKU Data API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch SKU data' },
      { status: 500 }
    );
  }
}

================
File: app/api/total-sales/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getTotalSalesData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('Total Sales API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch total sales data' },
      { status: 500 }
    );
  }
}

================
File: app/api/traffic-analysis/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getTrafficAnalysisData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('Traffic Analysis API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch traffic analysis data' },
      { status: 500 }
    );
  }
}

================
File: app/api/traffic-analysis-sales/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { query } from '@/lib/db';

export async function GET(request: NextRequest) {
  // Parse date range from query params (optional, fallback to last 7 days)
  const { searchParams } = new URL(request.url);
  const fromParam = searchParams.get('from');
  const toParam = searchParams.get('to');
  const from = fromParam ? new Date(fromParam) : new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
  const to = toParam ? new Date(toParam) : new Date();

  // Fallback data for sales page traffic analysis
  const fallback = {
    deviceData: [
      { name: "New Customers", value: 80, color: "#1E3A8A" },
      { name: "Returning Customers", value: 20, color: "#F59E0B" },
    ]
  };

  try {
    // New customers: users created in range
    const newCustomersResult = await query(
      `SELECT COUNT(*) as count FROM users WHERE created_at >= $1 AND created_at <= $2`,
      [from, to]
    );
    const newCustomers = Number(newCustomersResult.rows[0]?.count) || 0;

    // Returning customers: users who logged in in range but created before
    const returningCustomersResult = await query(
      `SELECT COUNT(*) as count FROM users WHERE last_login_at >= $1 AND last_login_at <= $2 AND created_at < $1`,
      [from, to]
    );
    const returningCustomers = Number(returningCustomersResult.rows[0]?.count) || 0;

    const total = newCustomers + returningCustomers;
    // Avoid division by zero
    const deviceData = total > 0 ? [
      { name: "New Customers", value: Math.round((newCustomers / total) * 100), color: "#1E3A8A" },
      { name: "Returning Customers", value: Math.round((returningCustomers / total) * 100), color: "#F59E0B" },
    ] : fallback.deviceData;

    return NextResponse.json({ deviceData });
  } catch (e) {
    return NextResponse.json(fallback);
  }
}

================
File: app/api/visitor-analysis/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getVisitorAnalysisData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('Visitor Analysis API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch visitor analysis data' },
      { status: 500 }
    );
  }
}

================
File: app/api/weekly-visitors/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getWeeklyVisitorsData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('Weekly Visitors API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch weekly visitors data' },
      { status: 500 }
    );
  }
}

================
File: app/api/weekly-visits/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { DataService } from '@/lib/data-service';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    if (!from || !to) {
      return NextResponse.json(
        { error: 'Date range parameters (from, to) are required' },
        { status: 400 }
      );
    }

    const dateRange = {
      from: new Date(from),
      to: new Date(to)
    };

    const data = await DataService.getWeeklyVisitsData(dateRange);
    return NextResponse.json(data);
  } catch (error) {
    console.error('Weekly Visits API error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch weekly visits data' },
      { status: 500 }
    );
  }
}

================
File: app/auth/page.tsx
================
'use client'

import { SignInButton, SignedIn, SignedOut, useAuth } from '@clerk/nextjs'
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'

export default function LandingPage() {
  const router = useRouter();
  const { isSignedIn } = useAuth();

  useEffect(() => {
    if (isSignedIn) {
      router.push('/');
    }
  }, [isSignedIn, router]);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-[#121212] text-white px-4">
      <SignedIn>
        {/* Empty, redirect handled in useEffect */}
      </SignedIn>
      <SignedOut>
        <div className="mb-8 text-center">
          <img src="/camarinlogo.svg" alt="Camarin Logo" className="mx-auto mb-4" style={{ width: 160 }} />
          <h1 className="text-4xl font-bold mb-2">Welcome to Camarin Analytics</h1>
          <p className="text-lg text-gray-400 mb-6">Unlock powerful 3D digitization analytics for your business.</p>
          <SignInButton mode="modal">
            <button className="px-8 py-3 rounded-lg bg-[#27272A] text-white text-lg font-medium hover:bg-[#3F3F46] transition-colors shadow-lg">Login</button>
          </SignInButton>
        </div>
      </SignedOut>
    </div>
  )
}

================
File: app/insights/page.tsx
================
import { Insights } from "@/components/pages/Insights"
import { SignedIn, SignedOut, RedirectToSignIn } from '@clerk/nextjs'

export default function InsightsPage() {
    return (
        <>
            <SignedIn>
                <Insights />
            </SignedIn>
            <SignedOut>
                <RedirectToSignIn redirectUrl="/auth" />
            </SignedOut>
        </>
    )
}

================
File: app/sales/page.tsx
================
import { SalesAnalytics } from "@/components/pages/sales"
import { SignedIn, SignedOut, RedirectToSignIn } from '@clerk/nextjs'

export default function SalesPage() {
  return (
    <>
      <SignedIn>
        <SalesAnalytics />
      </SignedIn>
      <SignedOut>
        <RedirectToSignIn redirectUrl="/auth" />
      </SignedOut>
    </>
  )
}

================
File: app/sign-in/page.tsx
================
import { SignIn } from '@clerk/nextjs'

export default function SignInPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-[#121212]">
      <SignIn path="/sign-in" routing="path" signUpUrl="/sign-up" />
    </div>
  )
}

================
File: app/sku/page.tsx
================
import { SkuAnalytics } from "@/components/pages/sku-analytics"
import { SignedIn, SignedOut, RedirectToSignIn } from '@clerk/nextjs'

export default function SKU() {
  return (
    <>
      <SignedIn>
        <SkuAnalytics />
      </SignedIn>
      <SignedOut>
        <RedirectToSignIn redirectUrl="/auth" />
      </SignedOut>
    </>
  )
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&display=swap');

html { font-family: 'Inter', sans-serif; }

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 5.9% 10%;
    --radius: 0.5rem;

    --chart-1: 262 83% 68%;
    --chart-2: 187 100% 63%;
    --chart-3: 142 71% 45%;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
  .theme { --animate-shimmer-slide: shimmer-slide var(--speed) ease-in-out infinite alternate; --animate-spin-around: spin-around calc(var(--speed) * 2) infinite linear; }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@theme inline {
  @keyframes shimmer-slide {
  to {
    transform: translate(calc(100cqw - 100%), 0); } }
  @keyframes spin-around {
  0% {
    transform: translateZ(0) rotate(0); }
  15%, 35% {
    transform: translateZ(0) rotate(90deg); }
  65%, 85% {
    transform: translateZ(0) rotate(270deg); }
  100% {
    transform: translateZ(0) rotate(360deg); } } }

================
File: app/layout.tsx
================
import type React from "react"
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import "./globals.css"
import { ThemeProvider } from "@/components/theme-provider"
import { ClerkProvider } from '@clerk/nextjs'

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: "Camarin Analytics",
  description: "Client Analytics Dashboard",
    generator: 'v0.dev'
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <ClerkProvider>
          <ThemeProvider attribute="class" defaultTheme="dark" enableSystem={false} disableTransitionOnChange>
            {children}
          </ThemeProvider>
        </ClerkProvider>
      </body>
    </html>
  )
}

================
File: app/page.tsx
================
import { SignedIn, SignedOut, RedirectToSignIn } from '@clerk/nextjs'
import { Dashboard } from "@/components/pages/dashboard"

export default function Home() {
  return (
    <>
      <SignedIn>
        <Dashboard />
      </SignedIn>
      <SignedOut>
        <RedirectToSignIn redirectUrl="/auth" />
      </SignedOut>
    </>
  )
}

================
File: components/dashboard/sales-overview.tsx
================
"use client";

import React, { useState, useMemo } from "react";
import dynamic from "next/dynamic";
import { MoreHorizontal } from "lucide-react";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import Image from "next/image";
import { useApiData } from "@/hooks/use-api-data";
import { SalesOverviewData } from "@/lib/data-service";

const ReactECharts = dynamic(() => import("echarts-for-react"), { ssr: false });

interface SalesOverviewProps {
    dateRange: {
        from: Date;
        to: Date;
    };
}

// Color Palette
const colors = {
    background: "#1A1A1A",
    cardBorder: "rgba(255, 255, 255, 0.4)",
    textPrimary: "#F4F4F5",
    textSecondary: "#A1A1AA",
    textMuted: "#71717A",
    divider: "rgba(255, 255, 255, 0.65)",
    trendUp: "#34D399",
    trendDown: "#F87171",
    social: "#6D28D9",
    redirect: "#7DD3FC",
    direct: "#3B82F6",
};

const KEYS = ["social", "redirect", "direct"] as const;
type Key = typeof KEYS[number];

const SERIES_COLORS: Record<Key, string> = {
    social: colors.social,
    redirect: colors.redirect,
    direct: colors.direct,
};

const LABELS: Record<Key, string> = {
    social: "Social Media",
    redirect: "Redirect Links",
    direct: "Direct Login",
};

// Fallback data for when API fails
const FALLBACK_DATA = {
    chartData: [
        { name: 'Mon', social: 34000, redirect: 12000, direct: 10000 },
        { name: 'Tue', social: 28000, redirect: 11000, direct: 8000 },
        { name: 'Wed', social: 25000, redirect: 15000, direct: 9000 },
        { name: 'Thu', social: 22000, redirect: 18000, direct: 12000 },
        { name: 'Fri', social: 29000, redirect: 16000, direct: 10000 },
        { name: 'Sat', social: 35000, redirect: 14000, direct: 9000 },
        { name: 'Sun', social: 32000, redirect: 12000, direct: 11000 },
    ],
    loadToOpportunity: 64,
    opportunityToWin: 18,
};

export function SalesOverview({ dateRange }: SalesOverviewProps) {
    const { data: salesOverviewData, loading, error } = useApiData<SalesOverviewData>({
        endpoint: 'sales-overview',
        dateRange
    });

    const [activeSeriesKey, setActiveSeriesKey] = useState<Key | null>(null);

    // Use API data or fallback
    const data = salesOverviewData || FALLBACK_DATA;
    const categories = data?.chartData?.map(d => d.name) || [];

    // KPI data derived from API response
    const kpiData = [
        {
            kpiValue: `${data.loadToOpportunity}%`,
            trend: Math.abs(data.loadToOpportunity - 58), // Compare to baseline
            trendDirection: data.loadToOpportunity > 58 ? "up" as const : "down" as const,
            trendLabel: "over last week",
            sectionLabel: "Load to Opportunity Conversion",
        },
        {
            kpiValue: `${data.opportunityToWin}%`,
            trend: Math.abs(data.opportunityToWin - 16), // Compare to baseline
            trendDirection: data.opportunityToWin > 16 ? "up" as const : "down" as const,
            trendLabel: "over last week",
            sectionLabel: "Opportunity to Win Conversion",
        },
    ];

    const option = useMemo(() => ({
        backgroundColor: 'transparent',
        grid: { left: 50, right: 15, top: 10, bottom: 10 },
        xAxis: { type: 'category', data: categories, show: false, boundaryGap: false },
        yAxis: { type: 'value', show: false, splitLine: { show: false }, min: 0 },
        series: KEYS.map((key, index) => {
            const isActive = !activeSeriesKey || activeSeriesKey === key;
            let zLevel;
            if (key === 'social') zLevel = 1;
            else if (key === 'redirect') zLevel = 2;
            else zLevel = 3;

            return {
                name: LABELS[key], 
                type: 'line', 
                smooth: 0.65,
                stack: 'total', 
                symbol: 'none', 
                data: data.chartData?.map(d => d[key]),
                lineStyle: { width: 0 },
                areaStyle: {
                    color: SERIES_COLORS[key], 
                    opacity: isActive ? 0.85 : 0.2,
                    shadowBlur: isActive ? 10 : 0, 
                    shadowColor: isActive ? SERIES_COLORS[key] : 'transparent',
                },
                emphasis: { focus: 'series', areaStyle: { opacity: 1, shadowBlur: 15 } },
                z: zLevel,
            };
        }),
        tooltip: {
            trigger: 'axis', 
            backgroundColor: 'rgba(30, 30, 32, 0.9)',
            borderColor: colors.cardBorder, 
            borderWidth: 1,
            textStyle: { color: colors.textPrimary, fontSize: 11, fontFamily: 'Inter, sans-serif' },
            padding: [6, 10],
            formatter: (params: any) => {
                let tooltipHtml = `<div style="font-weight:500; margin-bottom:4px; color:${colors.textSecondary}; font-size:10px;">${params[0].axisValueLabel}</div>`;
                params.slice().reverse().forEach((item: any) => {
                    const value = Math.abs(item.value);
                    tooltipHtml += `
                        <div style="display:flex; align-items:center; margin-top:3px;">
                            <span style="display:inline-block; width:7px; height:7px; border-radius:50%; background-color:${item.color}; margin-right:5px;"></span>
                            <span style="color:${colors.textSecondary}; font-size:10px;">${item.seriesName}:</span>
                            <span style="font-weight:600; margin-left:auto; color:${colors.textPrimary}; font-size:10px;">${value.toLocaleString()}</span>
                        </div>`;
                });
                return tooltipHtml;
            }
        },
    }), [activeSeriesKey, categories, data.chartData]);

    // Loading state
    if (loading) {
        return (
            <Card className="border p-6 shadow-lg h-full flex flex-col" style={{ backgroundColor: colors.background, borderColor: colors.cardBorder }}>
                <CardHeader className="flex flex-row items-center justify-between p-0 mb-4">
                    <div className="h-6 bg-gray-700 rounded w-32 animate-pulse"></div>
                    <div className="h-5 w-5 bg-gray-700 rounded animate-pulse"></div>
                </CardHeader>
                <div className="flex-grow">
                    <div className="h-8 bg-gray-700 rounded w-full mb-4 animate-pulse"></div>
                    <div className="h-[280px] bg-gray-700 rounded animate-pulse"></div>
                </div>
                <div className="flex justify-center gap-8 mt-4 pt-5">
                    {[1, 2, 3].map(i => (
                        <div key={i} className="h-4 bg-gray-700 rounded w-24 animate-pulse"></div>
                    ))}
                </div>
            </Card>
        );
    }

    // Error state with fallback data
    if (error) {
        console.warn('Sales Overview API error, using fallback data:', error);
    }

    return (
        <Card
            className="border p-6 shadow-lg h-full flex flex-col font-[Inter,ui-sans-serif,system-ui]"
            style={{ backgroundColor: colors.background, borderColor: colors.cardBorder, color: colors.textPrimary }}
        >
            <CardHeader className="flex flex-row items-center justify-between p-0 mb-4">
                <CardTitle className="text-xl font-light font-sans" style={{ color: colors.textPrimary }}>
                    Sales Overview {error && <span className="text-xs text-yellow-500 ml-2">(Offline Mode)</span>}
                </CardTitle>
                <button className="focus:outline-none p-1 rounded-full hover:bg-[#27272A]" style={{ color: colors.textMuted }}>
                    <MoreHorizontal size={18} />
                </button>
            </CardHeader>

            <div className="relative flex-grow flex flex-col">
                {/* Top Row for KPIs */}
                <div className="relative grid grid-cols-3 h-12 mb-2 z-10 pointer-events-none">
                    <div></div>
                    {kpiData.map((kpi, index) => (
                        <div key={index} className="flex flex-row items-center justify-center pointer-events-auto">
                            <span className="text-xl font-semibold font-light font-sans mr-1.5" style={{ color: colors.textPrimary }}>
                                {kpi.kpiValue}
                            </span>
                            <div className="flex flex-col items-start text-[10px] leading-tight">
                                <div className="flex items-center font-medium" style={{ color: kpi.trendDirection === "up" ? colors.trendUp : colors.trendDown }}>
                                    <Image 
                                        src={kpi.trendDirection === "up" ? "/upArrow.png" : "/downArrow.png"} 
                                        alt="Trend" 
                                        width={8} 
                                        height={8} 
                                        className="mr-0.5"
                                    />
                                    +{kpi.trend}%
                                </div>
                                <span style={{ color: colors.textMuted }}>{kpi.trendLabel}</span>
                            </div>
                        </div>
                    ))}
                </div>

                {/* Chart Area */}
                <div className="relative flex-grow h-[220px]">
                    {/* Y-Axis Badges */}
                    <div className="absolute left-0 top-0 h-full flex flex-col justify-around py-[10%] z-10 pointer-events-none">
                        {["34k", "12k", "10k"].reverse().map((label, idx) => (
                            <span key={idx} className="bg-white/10 text-white text-[9px] font-medium px-1.5 py-[1px] rounded-full self-start mb-1">
                                {label}
                            </span>
                        ))}
                    </div>

                    {/* ECharts Chart */}
                    <div className="absolute inset-0 h-full w-full">
                        <ReactECharts option={option} style={{ height: '100%', width: '100%' }} notMerge={true} />
                    </div>

                    {/* Vertical Divider Lines and Labels */}
                    <div className="absolute inset-0 grid grid-cols-3 pointer-events-none z-20">
                        <div></div>
                        {kpiData.map((kpi, index) => (
                            <div key={index} className="relative flex justify-center items-end">
                                <div className="absolute left-0 top-[10%] bottom-[15%] w-px" style={{backgroundColor: colors.divider}}></div>
                                <div className="pb-2 text-center pointer-events-auto">
                                    <span className="text-[11px] font-normal" style={{ color: colors.textSecondary }}>
                                        {kpi.sectionLabel}
                                    </span>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            {/* Legend */}
            <div className="flex items-center justify-center space-x-8 px-4 pt-5 border-t" style={{ borderColor: colors.divider }}>
                {KEYS.map((k) => (
                    <button
                        key={k}
                        onClick={() => setActiveSeriesKey((prev) => (prev === k ? null : k))}
                        className={`flex items-center space-x-2 text-xs transition-opacity duration-200 ${
                            !activeSeriesKey || activeSeriesKey === k ? "opacity-100" : "opacity-40 hover:opacity-70"
                        }`}
                        style={{ color: colors.textSecondary }}
                    >
                        <span
                            className="w-3 h-3 flex-shrink-0 rounded-full bg-current ring-2 ring-current/50"
                            style={{ color: SERIES_COLORS[k] }}
                        />
                        <span>{LABELS[k]}</span>
                    </button>
                ))}
            </div>
        </Card>
    );
}

================
File: components/dashboard/traffic-analysis.tsx
================
"use client"

import React, { useState } from "react"
import { MoreHorizontal } from "lucide-react"
import {
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { useApiData } from "@/hooks/use-api-data";
import { TrafficAnalysisData } from "@/lib/data-service";

interface TrafficAnalysisProps {
  dateRange: {
    from: Date;
    to: Date;
  };
}
const deviceData = [
  { name: "Laptop & PC",    value: 70, color: "#1E3A8A" },
  { name: "Mobile Phones",  value: 20, color: "#F59E0B" },
  { name: "Tablets & Others", value: 10, color: "#10B981" },
]

const browserData = [
  { name: "Chrome",  value: 60, color: "#1E3A8A" },
  { name: "Safari",  value: 25, color: "#F59E0B" },
  { name: "Firefox", value: 15, color: "#10B981" },
]

// helper to draw the small % labels on each slice
const RADIAN = Math.PI / 180
const renderCustomizedLabel = ({
  cx,
  cy,
  midAngle,
  innerRadius,
  outerRadius,
  percent,
}: any) => {
  const radius = innerRadius + (outerRadius - innerRadius) / 2
  const x = cx + radius * Math.cos(-midAngle * RADIAN)
  const y = cy + radius * Math.sin(-midAngle * RADIAN)
  return (
    <text
      x={x}
      y={y}
      fill="#E5E7EB"
      fontSize={12}
      textAnchor="middle"
      dominantBaseline="central"
    >
      {`${(percent * 100).toFixed(0)}%`}
    </text>
  )
}

export function TrafficAnalysis({ dateRange }: TrafficAnalysisProps) {
  const { data: trafficData, loading, error } = useApiData<TrafficAnalysisData>({
    endpoint: 'traffic-analysis',
    dateRange
  });
  const [activeTab, setActiveTab] = useState<"device" | "browser">("device")
  const [activeSeg, setActiveSeg] = useState<string | null>(null)

  // if (loading) {
  //   return <TrafficAnalysisSkeleton />;
  // }

  if (error) {
    console.error('Traffic Analysis error:', error);
    return <div className="text-red-500">Error loading traffic analysis data</div>;
  }

  if (!trafficData) {
    return <div className="text-gray-500">No traffic analysis data available</div>;
  }

  const base = activeTab === "device" ? deviceData : browserData
  const pieData = activeSeg ? base.filter((d) => d.name === activeSeg) : base

  return (
    <Card className="bg-[#1A1A1A] border-[#FFFFFF88] text-white">
    <CardHeader className="flex flex-row items-center justify-between pb-2">
      <CardTitle className="text-xl font-light font-sans">Traffic Analysis</CardTitle>
      <button className="text-gray-400 hover:text-white">
        <MoreHorizontal size={20} />
      </button>
    </CardHeader>

      <CardContent className="pt-2 px-4">
        {/* Top radio toggles */}
        <div className="flex items-center justify-center gap-6 mb-4 font-sans font-light">
          {[
            { key: "device", label: "By Device" },
            { key: "browser", label: "By Browser" },
          ].map((tab) => (
            <button
              key={tab.key}
              onClick={() => {
                setActiveTab(tab.key as any)
                setActiveSeg(null)
              }}
              className="flex items-center gap-2"
            >
              <span
                className={`w-3 h-3 rounded-full border-2 ${
                  activeTab === tab.key
                    ? "border-blue-500"
                    : "border-gray-600"
                }`}
              />
              <span
                className={
                  activeTab === tab.key ? "text-white" : "text-gray-400"
                }
              >
                {tab.label}
              </span>
            </button>
          ))}
        </div>

        {/* Donut chart */}
        <div className="relative h-[240px]">
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={pieData}
                dataKey="value"
                innerRadius={70}
                outerRadius={100}
                paddingAngle={2}
                label={renderCustomizedLabel}
                labelLine={false}
                isAnimationActive={true}
              >
                {pieData.map((entry, idx) => (
                  <Cell key={idx} fill={entry.color} />
                ))}
              </Pie>
              {/* center label */}
              <text
                x="50%"
                y="50%"
                textAnchor="middle"
                dominantBaseline="middle"
              >
                <tspan
                  x="50%"
                  dy="-0.6em"
                  fontSize={14}
                  fill="#9CA3AF"
                >
                  By
                </tspan>
                <tspan
                  x="50%"
                  dy="1em"
                  fontSize={16}
                  fontWeight="bold"
                  fill="white"
                >
                  {activeTab === "device" ? "Device" : "Browser"}
                </tspan>
              </text>
            </PieChart>
          </ResponsiveContainer>
        </div>

        {/* Legend / filters */}
        <div className="flex justify-center gap-6 mt-4">
          {base.map((entry) => {
            const isFaded = activeSeg !== null && activeSeg !== entry.name
            return (
              <button
                key={entry.name}
                onClick={() =>
                  setActiveSeg((prev) =>
                    prev === entry.name ? null : entry.name
                  )
                }
                className="flex items-center gap-2 font-light font-sans"
              >
                <span
                  className="w-3 h-3 rounded-full"
                  style={{
                    backgroundColor: entry.color,
                    opacity: isFaded ? 0.3 : 1,
                  }}
                />
                <span
                  className={`text-sm ${
                    isFaded ? "text-gray-400" : "text-white"
                  }`}
                >
                  {entry.name}
                </span>
              </button>
            )
          })}
        </div>
      </CardContent>
    </Card>
  )
}

================
File: components/dashboard/weekly-visitors.tsx
================
"use client"

import React, { useState, useMemo } from "react"
import { Calendar, MoreHorizontal } from "lucide-react"
import { motion } from "framer-motion"
import {
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
} from "recharts"
import { format } from "date-fns"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover"
import { DateRangePicker } from "@/components/date-range-picker"
import { useApiData } from "@/hooks/use-api-data"
import { WeeklyVisitorsData } from "@/lib/data-service"

const data = [
  { day: 1, unique: 40000, total: 60000 },
  { day: 2, unique: 63480, total: 85000 },
  { day: 3, unique: 30000, total: 58000 },
  { day: 4, unique: 72000, total: 90000 },
  { day: 5, unique: 55000, total: 88000 },
  { day: 6, unique: 48000, total: 92000 },
  { day: 7, unique: 35000, total: 65000 },
]

function WeeklyVisitorsSkeleton() {
    return (
      <Card className="bg-[#1A1A1A] border-[#FFFFFF88] text-white">
        <CardHeader className="flex flex-row items-center justify-between pb-2">
          <div className="h-6 bg-gray-700 rounded w-32 animate-pulse"></div>
          <div className="flex items-center gap-2">
            <div className="h-8 bg-gray-700 rounded w-48 animate-pulse"></div>
            <div className="h-5 w-5 bg-gray-700 rounded animate-pulse"></div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="h-[300px] bg-gray-700 rounded animate-pulse mb-4"></div>
          <div className="flex justify-center gap-8">
            <div className="h-4 bg-gray-700 rounded w-24 animate-pulse"></div>
            <div className="h-4 bg-gray-700 rounded w-24 animate-pulse"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

export function WeeklyVisitors() {
  const [dateRange, setDateRange] = useState({
    from: new Date(2025, 0, 1),
    to: new Date(2025, 0, 7),
  });
  const { data: visitorsData, loading, error } = useApiData<WeeklyVisitorsData>({
    endpoint: 'weekly-visitors',
    dateRange
  });
  const [activeKey, setActiveKey] = useState<"unique" | "total" | null>("unique")

  const peak = useMemo(() => {
    if (!visitorsData?.data || visitorsData.data.length === 0) return { entry: { day: 1, unique: 0, total: 0 }, value: 0 };
    const key = activeKey || "unique"
    let max = -Infinity, entry = visitorsData.data[0]
    visitorsData.data.forEach(d => {
      if (d[key] > max) {
        max = d[key]; entry = d
      }
    })
    return { entry, value: entry[activeKey || "unique"] }
  }, [activeKey, visitorsData])

  if (loading) {
    return <WeeklyVisitorsSkeleton />;
  }

  if (error) {
    console.error('Weekly Visitors error:', error);
    return <div className="text-red-500">Error loading weekly visitors data</div>;
  }

  if (!visitorsData) {
    return <div className="text-gray-500">No weekly visitors data available</div>;
  }

  return (
    <Card className="bg-[#1A1A1A] border-[#FFFFFF88] text-white">
      <CardHeader className="flex flex-row items-center justify-between pb-2">
        <CardTitle className="text-xl font-light font-sans">Weekly Visitors</CardTitle>

        <div className="flex items-center gap-2">
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                size="sm"
                className="h-8 bg-[#1A1A1A] border-[#2A2A2A] hover:bg-[#2A2A2A] text-white"
              >
                <Calendar className="mr-2 h-4 w-4" />
                {dateRange.from && dateRange.to ? `${format(dateRange.from, "d MMM, yyyy")} – ${format(dateRange.to, "d MMM, yyyy")}` : "Select Date"}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0 bg-[#1A1A1A] border-[#2A2A2A]" align="end">
              <div>
                <DateRangePicker date={dateRange} onDateChange={setDateRange} />
              </div>
            </PopoverContent>
          </Popover>

          <button className="text-gray-400 hover:text-white">
            <MoreHorizontal size={20} />
          </button>
        </div>
      </CardHeader>

      <CardContent>
        <div className="relative h-[300px]">
          {/* Peak tooltip */}
          <div
            className="absolute z-10 p-2 rounded bg-[#111] bg-opacity-60"
            style={{
              // position roughly above the peak day
              left: `calc(${(peak.entry.day - 1) / 6 * 100}% - 40px)`,
              top: "3%",
            }}
          >
            <div className="text-lg font-semibold">
              {peak.value.toLocaleString()}
            </div>
            <div className="text-xs text-green-400">+5% over last week</div>
          </div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="h-full"
          >
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={visitorsData.data} margin={{ top: 40, right: 30, left: 20, bottom: 10 }}>
                <CartesianGrid stroke="#2A2A2A" strokeDasharray="3 3" vertical={false} />

                <XAxis
                  dataKey="day"
                  axisLine={false}
                  tickLine={false}
                  tick={{ fill: "#9CA3AF" }}
                />

                <YAxis
                  axisLine={false}
                  tickLine={false}
                  tick={{ fill: "#9CA3AF" }}
                  domain={[0, 100000]}
                  ticks={[0,20000,40000,60000,80000,100000]}
                  tickFormatter={v => v === 0 ? "0k" : `${v/1000}k`}
                />

                <Tooltip
                  contentStyle={{
                    backgroundColor: "#2A2A2A",
                    border: "none",
                    borderRadius: "8px",
                    color: "white",
                  }}
                  formatter={(val: number) => [`${val.toLocaleString()}`, ""]}
                  labelFormatter={(d: any) => `Day ${d}`}
                />

                {/** Unique Visitors line */}
                <Line
                  type="monotone"
                  dataKey="unique"
                  stroke="#4AE3F8"
                  strokeWidth={ activeKey === "unique" || activeKey === null ? 3 : 1.5 }
                  dot={false}
                  activeDot={{ r: 6, fill: "#4AE3F8" }}
                  style={{
                    opacity: activeKey === "total" ? 0.3 : 1,
                    filter: activeKey === "unique"
                      ? "drop-shadow(0px 0px 10px rgba(74,227,248,0.6))"
                      : "none"
                  }}
                />

                {/** Total Visitors line */}
                <Line
                  type="monotone"
                  dataKey="total"
                  stroke="#10B981"
                  strokeWidth={ activeKey === "total" || activeKey === null ? 3 : 1.5 }
                  dot={false}
                  activeDot={{ r: 6, fill: "#10B981" }}
                  style={{
                    opacity: activeKey === "unique" ? 0.3 : 1,
                    filter: activeKey === "total"
                      ? "drop-shadow(0px 0px 10px rgba(16,185,129,0.6))"
                      : "none"
                  }}
                />
              </LineChart>
            </ResponsiveContainer>
          </motion.div>
        </div>

        {/* Legend / toggles */}
        <div className="flex justify-center gap-8 mt-4">
          {[
            { key: "unique", label: "Unique Visitors", color: "#4AE3F8" },
            { key: "total",  label: "Total Visitors",  color: "#10B981" },
          ].map(series => {
            const isFaded = activeKey !== null && activeKey !== series.key
            return (
              <button
                key={series.key}
                onClick={() => setActiveKey(prev => prev === series.key ? null : (series.key as any))}
                className="flex items-center gap-2"
              >
                <span
                  className="w-3 h-3 rounded-full"
                  style={{
                    backgroundColor: series.color,
                    opacity: isFaded ? 0.3 : 1,
                  }}
                />
                <span className={`text-sm ${isFaded ? "text-gray-400" : "text-white"}`}>
                  {series.label}
                </span>
              </button>
            )
          })}
        </div>
      </CardContent>
    </Card>
  )
}

================
File: components/dashboard/weekly-visits.tsx
================
"use client"

import React, { useState, useMemo } from "react"
import { Calendar, MoreHorizontal } from "lucide-react"
import { motion } from "framer-motion"
import {
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
} from "recharts"
import { format } from "date-fns"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover"
import { DateRangePicker } from "../date-range-picker"
import { useApiData } from "@/hooks/use-api-data"

export function WeeklyVisits() {
  const [dateRange, setDateRange] = useState({
    from: new Date(2025, 0, 1),
    to: new Date(2025, 0, 7),
  });
  const { data: visitsData, loading, error } = useApiData<{ data: { day: number; unique: number; total: number }[] }>({
    endpoint: 'weekly-visits',
    dateRange
  });
  const fallback = {
    data: [
      { day: 1, unique: 40000, total: 60000 },
      { day: 2, unique: 63480, total: 85000 },
      { day: 3, unique: 30000, total: 58000 },
      { day: 4, unique: 72000, total: 90000 },
      { day: 5, unique: 55000, total: 88000 },
      { day: 6, unique: 48000, total: 92000 },
      { day: 7, unique: 35000, total: 65000 },
    ]
  };
  const d = (error ? fallback : (visitsData || fallback));
  const [activeKey, setActiveKey] = useState<"unique" | "total" | null>("unique")

  const peak = useMemo(() => {
    if (!d?.data || d.data.length === 0) return { entry: { day: 1, unique: 0, total: 0 }, value: 0 };
    const key = activeKey || "unique"
    let max = -Infinity, entry = d.data[0]
    d.data.forEach(d => {
      if (d[key] > max) {
        max = d[key]; entry = d
      }
    })
    return { entry, value: entry[activeKey || "unique"] }
  }, [activeKey, d])

  if (loading) {
    return <div className="text-gray-500">Loading weekly visits data...</div>;
  }
  if (!d) {
    return <div className="text-gray-500">No weekly visits data available</div>;
  }

  // Show a subtle warning if fallback data is being used due to error
  const isFallback = error;

  return (
    <Card className="bg-[#1A1A1A] border-[#FFFFFF88] text-white">
      <CardHeader className="flex flex-row items-center justify-between pb-2">
        <CardTitle className="text-xl font-light font-sans">Weekly Visits</CardTitle>

        <div className="flex items-center gap-2">
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                size="sm"
                className="h-8 bg-[#1A1A1A] border-[#2A2A2A] hover:bg-[#2A2A2A] text-white"
              >
                <Calendar className="mr-2 h-4 w-4" />
                {dateRange.from && dateRange.to ? `${format(dateRange.from, "d MMM, yyyy")} – ${format(dateRange.to, "d MMM, yyyy")}` : "Select Date"}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0 bg-[#1A1A1A] border-[#2A2A2A]" align="end">
              <div>
                <DateRangePicker date={dateRange} onDateChange={setDateRange} />
              </div>
            </PopoverContent>
          </Popover>

          <button className="text-gray-400 hover:text-white">
            <MoreHorizontal size={20} />
          </button>
        </div>
      </CardHeader>

      {/* Subtle warning if fallback is used */}
      {isFallback && (
        <div className="mb-2 flex items-center gap-2 text-xs text-yellow-400">
          <span className="inline-block w-2 h-2 rounded-full bg-yellow-400 animate-pulse"></span>
          Offline mode: showing fallback data
        </div>
      )}

      <CardContent>
        <div className="relative h-[300px]">
          {/* Peak tooltip */}
          <div
            className="absolute z-10 p-2 rounded bg-[#111] bg-opacity-60"
            style={{
              // position roughly above the peak day
              left: `calc(${(peak.entry.day - 1) / 6 * 100}% - 40px)`,
              top: "3%",
            }}
          >
            <div className="text-lg font-semibold">
              {peak.value.toLocaleString()}
            </div>
            <div className="text-xs text-green-400">+5% over last week</div>
          </div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="h-full"
          >
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={d.data} margin={{ top: 40, right: 30, left: 20, bottom: 10 }}>
                <CartesianGrid stroke="#2A2A2A" strokeDasharray="3 3" vertical={false} />

                <XAxis
                  dataKey="day"
                  axisLine={false}
                  tickLine={false}
                  tick={{ fill: "#9CA3AF" }}
                />

                <YAxis
                  axisLine={false}
                  tickLine={false}
                  tick={{ fill: "#9CA3AF" }}
                  domain={[0, 100000]}
                  ticks={[0,20000,40000,60000,80000,100000]}
                  tickFormatter={v => v === 0 ? "0k" : `${v/1000}k`}
                />

                <Tooltip
                  contentStyle={{
                    backgroundColor: "#2A2A2A",
                    border: "none",
                    borderRadius: "8px",
                    color: "white",
                  }}
                  formatter={(val: number) => [`${val.toLocaleString()}`, ""]}
                  labelFormatter={(d: any) => `Day ${d}`}
                />

                {/** Unique Visitors line */}
                <Line
                  type="monotone"
                  dataKey="unique"
                  stroke="#4AE3F8"
                  strokeWidth={ activeKey === "unique" || activeKey === null ? 3 : 1.5 }
                  dot={false}
                  activeDot={{ r: 6, fill: "#4AE3F8" }}
                  style={{
                    opacity: activeKey === "total" ? 0.3 : 1,
                    filter: activeKey === "unique"
                      ? "drop-shadow(0px 0px 10px rgba(74,227,248,0.6))"
                      : "none"
                  }}
                />

                {/** Total Visitors line */}
                <Line
                  type="monotone"
                  dataKey="total"
                  stroke="#10B981"
                  strokeWidth={ activeKey === "total" || activeKey === null ? 3 : 1.5 }
                  dot={false}
                  activeDot={{ r: 6, fill: "#10B981" }}
                  style={{
                    opacity: activeKey === "unique" ? 0.3 : 1,
                    filter: activeKey === "total"
                      ? "drop-shadow(0px 0px 10px rgba(16,185,129,0.6))"
                      : "none"
                  }}
                />
              </LineChart>
            </ResponsiveContainer>
          </motion.div>
        </div>

        {/* Legend / toggles */}
        <div className="flex justify-center gap-8 mt-4">
          {[
            { key: "unique", label: "Unique Visitors", color: "#4AE3F8" },
            { key: "total",  label: "Total Visitors",  color: "#10B981" },
          ].map(series => {
            const isFaded = activeKey !== null && activeKey !== series.key
            return (
              <button
                key={series.key}
                onClick={() => setActiveKey(prev => prev === series.key ? null : (series.key as any))}
                className="flex items-center gap-2"
              >
                <span
                  className="w-3 h-3 rounded-full"
                  style={{
                    backgroundColor: series.color,
                    opacity: isFaded ? 0.3 : 1,
                  }}
                />
                <span className={`text-sm ${isFaded ? "text-gray-400" : "text-white"}`}>
                  {series.label}
                </span>
              </button>
            )
          })}
        </div>
      </CardContent>
    </Card>
  )
}

================
File: components/insights/customer-volume-age.tsx
================
"use client";

import React, { useMemo, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Calendar, MoreHorizontal, ArrowUp } from "lucide-react";
import { motion } from "framer-motion";
import { format } from "date-fns";
import {
    BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell, LabelList
} from "recharts";
import { useApiData } from "@/hooks/use-api-data";

// --- Data Type Definitions ---
// This makes our component ready to handle dynamic peak information from the API.
interface PeakDetails {
    ageGroup: string;
    gender: 'men' | 'women';
    value: number;
    trend: number;
    averageSpend: number;
}
interface ChartEntry {
    age: string;
    men: number;
    women: number;
}
export interface CustomerVolumeData {
    chartData: ChartEntry[];
    peakDetails?: PeakDetails;
}

interface CustomerVolumeAgeProps {
    dateRange: {
        from: Date;
        to: Date;
    };
}

// Color Palette
const colors = {
    background: "#1A1A1A",
    cardBorder: "rgba(255, 255, 255, 0.4)",
    textPrimary: "#F4F4F5",
    textSecondary: "#A1A1AA",
    textMuted: "#71717A",
    gridLine: "rgba(255, 255, 255, 0.08)",
    dateRangeButtonBg: "#27272A",
    dateRangeButtonBorder: "rgba(255, 255, 255, 0.15)",
    barMen: "#06B6D4",
    barWomen: "#F59E0B",
    tooltipBg: "#1C1C1E",
    tooltipBorder: "rgba(255, 255, 255, 0.15)",
    tooltipDot: "#FFFFFF",
    trendUp: "#34D399",
};


// Updated Fallback Data to match the new dynamic structure
const FALLBACK_DATA: CustomerVolumeData = {
    chartData: [
        { age: "<18", men: 5800, women: 3800 },
        { age: "19-24", men: 8400, women: 6800 },
        { age: "25-30", men: 11200, women: 10000 },
        { age: "31-35", men: 13000, women: 12500 },
        { age: "36-40", men: 14382, women: 13000 },
        { age: "41-45", men: 10800, women: 7000 },
        { age: "45-50", men: 7800, women: 9200 },
        { age: "51-55", men: 5200, women: 6500 },
        { age: ">55", men: 8200, women: 6200 },
    ],
    // The peak details are now part of the data object.
    peakDetails: {
        ageGroup: "36-40",
        gender: "men",
        value: 14382,
        trend: 6,
        averageSpend: 3481,
    }
};

// Helper function to calculate Y-axis properties dynamically
const calculateYAxisConfig = (data: ChartEntry[]) => {
    if (!data || data.length === 0) {
        return { yAxisMax: 1000, ticks: [0, 250, 500, 750, 1000] };
    }

    // Find the absolute maximum value in the dataset
    const maxValue = Math.max(...data.map(d => Math.max(d.men, d.women)), 0);

    // Calculate a "nice" upper limit for the axis by adding ~10% padding
    // and rounding up to a sensible number.
    const getNiceUpperLimit = (num: number) => {
        if (num === 0) return 100;
        const paddedNum = num * 1.1; // Add 10% padding
        const exponent = Math.floor(Math.log10(paddedNum));
        const powerOf10 = Math.pow(10, exponent);
        const firstDigit = Math.ceil(paddedNum / powerOf10);
        return firstDigit * powerOf10;
    };
    
    const finalYAxisMax = getNiceUpperLimit(maxValue);

    // Generate 5 evenly spaced ticks, including 0
    const tickCount = 5;
    const ticks = Array.from({ length: tickCount }, (_, i) =>
        Math.round((finalYAxisMax / (tickCount - 1)) * i)
    );

    return { yAxisMax: finalYAxisMax, ticks };
};


// Custom Tooltip now accepts dynamic peak details
const CustomTooltip = ({ active, payload, label, peakDetails }: any) => {
    if (active && payload && payload.length) {
        const menData = payload.find((p: any) => p.dataKey === 'men');
        const womenData = payload.find((p: any) => p.dataKey === 'women');

        // Check if the hovered bar is the designated peak bar.
        const isPeakBarHovered = peakDetails &&
            label === peakDetails.ageGroup &&
            payload.some((p: any) => p.dataKey === peakDetails.gender && p.value === peakDetails.value);

        return (
            <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: 10 }}
                transition={{ duration: 0.2 }}
                className="rounded-md border shadow-lg p-3"
                style={{
                    backgroundColor: colors.tooltipBg,
                    borderColor: colors.tooltipBorder,
                    color: colors.textPrimary,
                    minWidth: isPeakBarHovered ? '180px' : 'auto',
                }}
            >
                {isPeakBarHovered ? (
                    <>
                        <div className="flex items-baseline gap-1.5 mb-0.5">
                            <p className="text-base font-semibold">{peakDetails.value.toLocaleString()}</p>
                            <div className="flex items-center text-xs" style={{ color: colors.trendUp }}>
                                <ArrowUp size={10} className="mr-0.5" /> {peakDetails.trend}%
                                <span className="ml-1 text-[10px]" style={{ color: colors.textMuted }}>over last week</span>
                            </div>
                        </div>
                        <p className="text-xs" style={{ color: colors.textSecondary }}>
                            Average Spend: INR {peakDetails.averageSpend.toLocaleString('en-IN')}
                        </p>
                    </>
                ) : (
                    <>
                        <p className="text-sm font-medium mb-1.5" style={{ color: colors.textPrimary }}>{label}</p>
                        {menData && (
                            <div className="flex items-center text-xs">
                                <span className="w-2 h-2 rounded-full mr-1.5" style={{backgroundColor: menData.color || colors.barMen}}></span>
                                Men: <span className="font-medium ml-1">{menData.value.toLocaleString()}</span>
                            </div>
                        )}
                        {womenData && (
                            <div className="flex items-center text-xs mt-1">
                                <span className="w-2 h-2 rounded-full mr-1.5" style={{backgroundColor: womenData.color || colors.barWomen}}></span>
                                Women: <span className="font-medium ml-1">{womenData.value.toLocaleString()}</span>
                            </div>
                        )}
                    </>
                )}
            </motion.div>
        );
    }
    return null;
};

export function CustomerVolumeAge({ dateRange }: CustomerVolumeAgeProps) {
    const { data: customerVolumeData, loading, error } = useApiData<CustomerVolumeData>({
        endpoint: 'customer-volume',
        dateRange
    });

    const [peakBarHoverState, setPeakBarHoverState] = useState<{ x: number; y: number; active: boolean } | null>(null);
    const [activeLegend, setActiveLegend] = useState<string | null>(null);

    // Use API data or fallback
    const data = customerVolumeData || FALLBACK_DATA;

    // Use `useMemo` for efficient, dynamic calculations that only run when data changes
    const { yAxisMax, ticks } = useMemo(() => calculateYAxisConfig(data.chartData), [data.chartData]);
    const peakDetails = useMemo(() => data.peakDetails, [data.peakDetails]);

    const handleLegendClick = (dataKey: string) => {
        setActiveLegend(prev => prev === dataKey ? null : dataKey);
    };

    // Loading state component
    if (loading) {
        return (
            <Card className="rounded-2xl border p-6 shadow-lg h-full flex flex-col" style={{ backgroundColor: colors.background, borderColor: colors.cardBorder }}>
                <CardHeader className="flex flex-row items-center justify-between p-0 mb-6">
                    <div className="h-6 bg-gray-700 rounded w-48 animate-pulse"></div>
                    <div className="flex items-center gap-3">
                        <div className="h-8 bg-gray-700 rounded w-48 animate-pulse"></div>
                        <div className="h-5 w-5 bg-gray-700 rounded animate-pulse"></div>
                    </div>
                </CardHeader>
                <CardContent className="p-0 flex-grow flex flex-col">
                    <div className="h-[320px] bg-gray-700 rounded animate-pulse mb-4"></div>
                    <div className="flex justify-center gap-6">
                        <div className="h-4 bg-gray-700 rounded w-16 animate-pulse"></div>
                        <div className="h-4 bg-gray-700 rounded w-20 animate-pulse"></div>
                    </div>
                </CardContent>
            </Card>
        );
    }

    return (
        <Card
            className="rounded-2xl border p-6 shadow-lg h-full flex flex-col font-[Inter,ui-sans-serif,system-ui]"
            style={{ backgroundColor: colors.background, borderColor: colors.cardBorder, color: colors.textPrimary }}
        >
            <CardHeader className="flex flex-row items-center justify-between p-0 mb-6">
                <CardTitle className="text-xl font-light font-sans tracking-wide" style={{ color: colors.textPrimary }}>
                    Customer Volume with Age {error && <span className="text-xs text-yellow-500 ml-2">(Offline Mode)</span>}
                </CardTitle>
                <div className="flex items-center gap-3">
                    <Button variant="outline" size="sm" className="h-8 px-3 rounded-lg text-xs font-normal border focus:outline-none focus:ring-1 focus:ring-white/30 hover:bg-[#3f3f46]" style={{ backgroundColor: colors.dateRangeButtonBg, borderColor: colors.dateRangeButtonBorder, color: colors.textSecondary }} >
                        <Calendar className="mr-1.5 h-3.5 w-3.5" style={{ color: colors.textMuted }} />
                        {format(dateRange.from, "d MMM, yyyy")} - {format(dateRange.to, "d MMM, yyyy")}
                    </Button>
                    <button className="focus:outline-none p-1 rounded-full hover:bg-[#27272A]" style={{ color: colors.textMuted }}>
                        <MoreHorizontal size={18} />
                    </button>
                </div>
            </CardHeader>

            <CardContent className="p-0 flex-grow flex flex-col">
                <div className="h-[320px] relative">
                    <motion.div
                        initial={{ opacity: 0, y: 15 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.6, ease: "easeOut" }}
                        className="h-full"
                    >
                        <ResponsiveContainer width="100%" height="100%">
                            <BarChart
                                data={data.chartData}
                                margin={{ top: 20, right: 5, left: 15, bottom: 5 }}
                                barGap={4}
                                barCategoryGap="35%"
                                onMouseMove={(state) => {
                                    // Dynamic peak hover logic based on peakDetails
                                    if (state.isTooltipActive && state.activePayload && peakDetails && state.activeLabel === peakDetails.ageGroup) {
                                        const peakBarPayload = state.activePayload.find(p => p.dataKey === peakDetails.gender && p.value === peakDetails.value);
                                        if (peakBarPayload) {
                                            const barPayload = peakBarPayload.payload as any;
                                            const barX = barPayload.x + barPayload.width / 2;
                                            const barY = barPayload.y;
                                            setPeakBarHoverState({ x: barX, y: barY, active: true });
                                            return;
                                        }
                                    }
                                    setPeakBarHoverState(prev => prev && prev.active ? { ...prev, active: false } : null);
                                }}
                                onMouseLeave={() => setPeakBarHoverState(null)}
                            >
                                <CartesianGrid strokeDasharray="3 0" stroke={colors.gridLine} vertical={false} />
                                <XAxis
                                    dataKey="age"
                                    axisLine={false}
                                    tickLine={false}
                                    tick={{ fill: colors.textSecondary, fontSize: 11, fontWeight: 400 }}
                                    dy={10}
                                    interval={0}
                                />
                                <YAxis
                                    axisLine={false}
                                    tickLine={false}
                                    tick={{ fill: colors.textSecondary, fontSize: 11, fontWeight: 400 }}
                                    domain={[0, yAxisMax]}
                                    ticks={ticks}
                                    tickFormatter={(value) => (value === 0 ? "0" : `${value / 1000}k`)}
                                    width={40}
                                />
                                <Tooltip
                                    cursor={{ fill: 'transparent' }}
                                    wrapperStyle={{ zIndex: 50, outline: 'none' }}
                                    content={<CustomTooltip peakDetails={peakDetails} />}
                                    position={peakBarHoverState?.active ? { x: peakBarHoverState.x - 90, y: peakBarHoverState.y - 95 } : undefined}
                                    isAnimationActive={false}
                                />
                                <Bar dataKey="men" name="Men" radius={[4, 4, 0, 0]} barSize={8}>
                                    {data.chartData.map((entry, index) => (
                                        <Cell
                                            key={`cell-men-${index}`}
                                            fill={colors.barMen}
                                            opacity={activeLegend === null || activeLegend === "men" ? 1 : 0.3}
                                        />
                                    ))}
                                    {/* Dot for peak bar, visible on hover (dynamic check for 'men') */}
                                    {peakBarHoverState?.active && peakDetails?.gender === 'men' && (
                                        <LabelList
                                            dataKey="men"
                                            position="top"
                                            content={(props) => {
                                                const { x, y, width, index } = props as any;
                                                // Only render for the peak bar
                                                if (data.chartData[index]?.age === peakDetails.ageGroup) {
                                                    return <circle cx={x + width / 2} cy={y - 5} r={3.5} fill={colors.tooltipDot} />;
                                                }
                                                return null;
                                            }}
                                        />
                                    )}
                                </Bar>
                                <Bar dataKey="women" name="Women" radius={[4, 4, 0, 0]} barSize={8}>
                                    {data.chartData.map((entry, index) => (
                                        <Cell
                                            key={`cell-women-${index}`}
                                            fill={colors.barWomen}
                                            opacity={activeLegend === null || activeLegend === "women" ? 1 : 0.3}
                                        />
                                    ))}
                                     {/* Dot for peak bar, visible on hover (dynamic check for 'women') */}
                                     {peakBarHoverState?.active && peakDetails?.gender === 'women' && (
                                        <LabelList
                                            dataKey="women"
                                            position="top"
                                            content={(props) => {
                                                const { x, y, width, index } = props as any;
                                                // Only render for the peak bar
                                                if (data.chartData[index]?.age === peakDetails.ageGroup) {
                                                    return <circle cx={x + width / 2} cy={y - 5} r={3.5} fill={colors.tooltipDot} />;
                                                }
                                                return null;
                                            }}
                                        />
                                    )}
                                </Bar>
                            </BarChart>
                        </ResponsiveContainer>
                    </motion.div>
                </div>

                <div className="flex justify-center items-center gap-6 mt-4 pt-2">
                    <Button
                        variant="ghost"
                        size="sm"
                        className={`flex items-center gap-1.5 p-1 h-auto rounded-md ${activeLegend === "men" ? "bg-gray-700/50" : ""}`}
                        onClick={() => handleLegendClick("men")}
                        style={{ opacity: activeLegend === null || activeLegend === "men" ? 1 : 0.5 }}
                    >
                        <span className="h-2.5 w-2.5 rounded-full" style={{ backgroundColor: colors.barMen }}></span>
                        <span className="text-xs" style={{ color: colors.textSecondary }}>Men</span>
                    </Button>
                    <Button
                        variant="ghost"
                        size="sm"
                        className={`flex items-center gap-1.5 p-1 h-auto rounded-md ${activeLegend === "women" ? "bg-gray-700/50" : ""}`}
                        onClick={() => handleLegendClick("women")}
                        style={{ opacity: activeLegend === null || activeLegend === "women" ? 1 : 0.5 }}
                    >
                        <span className="h-2.5 w-2.5 rounded-full" style={{ backgroundColor: colors.barWomen }}></span>
                        <span className="text-xs" style={{ color: colors.textSecondary }}>Women</span>
                    </Button>
                </div>
            </CardContent>
        </Card>
    );
}

================
File: components/insights/region-analytics.tsx
================
"use client";

import React, { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight, MoreHorizontal, ArrowUp, ArrowDown } from "lucide-react";
import { motion } from "framer-motion";
import Image from "next/image";
import createGlobe from "cobe";
import type { Marker } from "cobe";
import { useApiData } from "@/hooks/use-api-data";
import { RegionData } from "@/lib/data-service";

// Color Palette
const colors = {
    background: "#111113",
    cardBackground: "#1C1C1E",
    cardBorder: "rgba(255, 255, 255, 0.4)",
    textPrimary: "#F4F4F5",
    textSecondary: "#A1A1AA",
    textMuted: "#71717A",
    divider: "rgba(255, 255, 255, 0.1)",
    regionButtonBgActive: "#27272A",
    regionButtonBorder: "rgba(255, 255, 255, 0.4)",
    regionButtonTextActive: "#FFFFFF",
    regionButtonTextInactive: "#A1A1AA",
    trendUp: "#34D399",
    trendDown: "#F87171",
    sparklineSales: "#5FA8FC",
    sparklineUnits: "#4CD8E5",
    badgeBestSellingBg: "#27272A",
    badgeBestSellingBorder: "rgba(255, 255, 255, 0.4)",
    badgeBestSellingGlow: "rgba(255, 255, 255, 0.4)",
    globeOverlayBg: "rgba(30, 30, 32, 0.65)",
    globeOverlayBorder: "rgba(255, 255, 255, 0.15)",
    globeOverlayBackdropBlur: "12px",
    genderMale: "#4CD8E5",
    genderFemale: "#F59E0B",
    genderTrackOuter: "rgba(76, 216, 229, 0.1)",
    genderTrackInner: "rgba(245, 158, 11, 0.1)",
    genderLabelBg: "rgba(0, 0, 0, 0.35)",
    genderLabelText: "#F4F4F5",
};

interface RegionAnalyticsProps {
    dateRange: {
        from: Date;
        to: Date;
    };
}

// Fallback data
const FALLBACK_DATA: RegionData = {
    totalSales: 40000,
    salesChange: 2,
    totalUnits: 2000,
    unitsChange: 2,
    avgOrderValue: 1000,
    avgOrderValueChange: 6,
    avgReturnRate: 6.5,
    avgReturnRateChange: 6,
    avgConversionRate: 5.5,
    avgConversionRateChange: -6,
    regions: [
        { name: "India", value: 30, color: "#4CD8E5" },
        { name: "United Kingdom", value: 20, color: "#4CD8E5" },
        { name: "Canada", value: 10, color: "#4CD8E5" },
        { name: "Australia", value: 15, color: "#8A70D6" },
        { name: "Spain", value: 15, color: "#8A70D6" },
        { name: "Europe", value: 10, color: "#8A70D6" },
    ],
    customerCounts: { newCustomers: 54081, returningCustomers: 8120 },
    genderDistribution: { male: 70, female: 30 }
};

export function RegionAnalytics({ dateRange }: RegionAnalyticsProps) {
    const { data: regionData, loading, error } = useApiData<RegionData>({
        endpoint: 'region-data',
        dateRange
    });

    const [selectedRegion, setSelectedRegion] = useState("India");
    
    // Use API data or fallback
    const data = regionData || FALLBACK_DATA;
    const regions = data.regions.map(r => r.name).slice(0, 4); // Limit to 4 regions
    const currentIndex = regions.indexOf(selectedRegion);

    const handlePrevious = () => {
        const newIndex = (currentIndex - 1 + regions.length) % regions.length;
        setSelectedRegion(regions[newIndex]);
    };

    const handleNext = () => {
        const newIndex = (currentIndex + 1) % regions.length;
        setSelectedRegion(regions[newIndex]);
    };

    const displayedRegions = () => {
        const nextIndex = (currentIndex + 1) % regions.length;
        if (regions.length <= 1) return [regions[currentIndex]];
        return [regions[currentIndex], regions[nextIndex]];
    };

    if (loading) {
        return (
            <Card className="rounded-2xl border p-6 shadow-lg h-full flex flex-col" style={{ backgroundColor: colors.background, borderColor: colors.cardBorder }}>
                <CardHeader className="flex flex-row items-center justify-between p-0 mb-6">
                    <div className="h-8 bg-gray-700 rounded w-48 animate-pulse"></div>
                    <div className="flex items-center gap-2">
                        <div className="h-8 bg-gray-700 rounded w-20 animate-pulse"></div>
                        <div className="h-8 bg-gray-700 rounded w-20 animate-pulse"></div>
                    </div>
                </CardHeader>
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 lg:gap-5 flex-grow">
                    <div className="space-y-4">
                        {[1, 2, 3, 4].map(i => (
                            <div key={i} className="h-20 bg-gray-700 rounded animate-pulse"></div>
                        ))}
                    </div>
                    <div className="lg:col-span-2 bg-gray-700 rounded animate-pulse"></div>
                </div>
            </Card>
        );
    }

    return (
        <Card
            className="rounded-2xl border p-6 shadow-lg h-full flex flex-col font-sans"
            style={{
                backgroundColor: colors.background,
                borderColor: colors.cardBorder,
                color: colors.textPrimary,
            }}
        >
            <CardHeader className="flex flex-row items-center justify-between p-0 mb-6">
                <CardTitle className="text-2xl font-light font-sans tracking-wider" style={{ color: colors.textPrimary }}>
                    Region Analytics {error && <span className="text-xs text-yellow-500 ml-2">(Offline Mode)</span>}
                </CardTitle>
                <div className="flex items-center gap-2">
                    <Button
                        variant="ghost" size="icon"
                        className="h-8 w-8 p-0 rounded-full hover:bg-[#27272A]"
                        style={{ color: colors.textSecondary }}
                        onClick={handlePrevious} disabled={regions.length <= 1}
                    >
                        <ChevronLeft size={20} />
                    </Button>
                    <div className="flex gap-2">
                        {displayedRegions().map((region) => (
                            <Button key={region} variant="outline"
                                className={`h-8 px-5 rounded-md border text-sm font-normal transition-colors duration-200 ${
                                    region === selectedRegion
                                        ? 'border-transparent shadow-sm'
                                        : 'hover:bg-[#27272A] hover:border-transparent'
                                }`}
                                style={{
                                    backgroundColor: region === selectedRegion ? colors.regionButtonBgActive : 'transparent',
                                    borderColor: region === selectedRegion ? 'transparent' : colors.regionButtonBorder,
                                    color: region === selectedRegion ? colors.regionButtonTextActive : colors.regionButtonTextInactive,
                                }}
                                onClick={() => setSelectedRegion(region)}
                            >
                                {region}
                            </Button>
                        ))}
                    </div>
                    <Button
                        variant="ghost" size="icon"
                        className="h-8 w-8 p-0 rounded-full hover:bg-[#27272A]"
                        style={{ color: colors.textSecondary }}
                        onClick={handleNext} disabled={regions.length <= 1}
                    >
                        <ChevronRight size={20} />
                    </Button>
                </div>
            </CardHeader>

            <CardContent className="p-0 flex-grow grid grid-cols-1 lg:grid-cols-3 gap-4 lg:gap-5">
                <div className="space-y-4 lg:space-y-5">
                    <TotalSalesCard data={data} />
                    <TotalUnitSoldCard data={data} />
                    <SalesMetricsCard data={data} />
                    <TopSkusCard />
                </div>

                <div className="lg:col-span-2 flex flex-col min-h-[650px] lg:min-h-0 relative">
                    <div className="absolute inset-0">
                        <GlobeVisualization selectedRegion={selectedRegion} />
                    </div>
                    <div className="relative z-10 flex flex-col flex-grow justify-between pointer-events-none">
                        <div className="flex justify-center pt-[8%] pointer-events-auto">
                            <CustomerCountOverlay region={selectedRegion} data={data} />
                        </div>
                        <div className="flex justify-center pb-[5%] pointer-events-auto">
                            <GenderDistributionCard region={selectedRegion} data={data} />
                        </div>
                    </div>
                </div>
            </CardContent>
        </Card>
    );
}

// Sub Components
function TotalSalesCard({ data }: { data: RegionData }) {
    const isTrendUp = data.salesChange > 0;
    return (
        <Card className="rounded-lg border overflow-hidden" style={{ backgroundColor: colors.cardBackground, borderColor: colors.cardBorder }}>
            <CardContent className="p-3">
                <div className="flex justify-between items-start mb-1">
                    <div>
                        <p className="text-sm font-light tracking-wider" style={{ color: colors.textSecondary }}>Total Sales</p>
                        <p className="text-xl font-semibold mt-1" style={{ color: colors.textPrimary }}>
                            INR {data.totalSales.toLocaleString("en-IN")}
                        </p>
                    </div>
                    <div className={`flex items-center gap-1 text-xs font-medium px-1.5 py-0.5 rounded ${isTrendUp ? 'bg-green-500/10' : 'bg-red-500/10'}`}
                         style={{ color: isTrendUp ? colors.trendUp : colors.trendDown }}>
                        <Image src={isTrendUp ? "/upArrow.png" : "/downArrow.png"} alt={isTrendUp ? "Up" : "Down"} width={10} height={10} className="mr-0.5" />
                        {Math.abs(data.salesChange)}%
                        <span className="ml-0.5 font-normal text-[10px] opacity-80" style={{ color: colors.textMuted }}>last week</span>
                    </div>
                </div>
                <div className="h-8 w-full -ml-1 -mr-1">
                    <svg width="100%" height="100%" viewBox="0 0 100 25" preserveAspectRatio="none">
                        <motion.path
                            d="M0,20 C10,8 20,22 30,15 C40,25 50,10 60,20 C70,8 80,18 90,10 C100,20"
                            fill="none" stroke={colors.sparklineSales} strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"
                            initial={{ pathLength: 0 }} animate={{ pathLength: 1 }} transition={{ duration: 1.5, ease: "easeInOut" }}
                        />
                    </svg>
                </div>
            </CardContent>
        </Card>
    );
}

function TotalUnitSoldCard({ data }: { data: RegionData }) {
    const isTrendUp = data.unitsChange > 0;
    return (
        <Card className="rounded-lg border overflow-hidden" style={{ backgroundColor: colors.cardBackground, borderColor: colors.cardBorder }}>
            <CardContent className="p-3">
                <div className="flex justify-between items-start mb-1">
                    <div>
                        <p className="text-sm font-light tracking-wider" style={{ color: colors.textSecondary }}>Total Unit Sold</p>
                        <p className="text-xl font-semibold mt-1" style={{ color: colors.textPrimary }}>
                            {data.totalUnits.toLocaleString("en-IN")}
                        </p>
                    </div>
                    <div className={`flex items-center gap-1 text-xs font-medium px-1.5 py-0.5 rounded ${isTrendUp ? 'bg-green-500/10' : 'bg-red-500/10'}`}
                         style={{ color: isTrendUp ? colors.trendUp : colors.trendDown }}>
                        <Image src={isTrendUp ? "/upArrow.png" : "/downArrow.png"} alt={isTrendUp ? "Up" : "Down"} width={10} height={10} className="mr-0.5" />
                        {Math.abs(data.unitsChange)}%
                        <span className="ml-0.5 font-normal text-[10px] opacity-80" style={{ color: colors.textMuted }}>last week</span>
                    </div>
                </div>
                <div className="h-8 w-full -ml-1 -mr-1">
                    <svg width="100%" height="100%" viewBox="0 0 100 25" preserveAspectRatio="none">
                        <motion.path
                            d="M0,22 C10,12 20,25 30,18 C40,10 50,20 60,12 C70,28 80,15 90,22 C100,10"
                            fill="none" stroke={colors.sparklineUnits} strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"
                            initial={{ pathLength: 0 }} animate={{ pathLength: 1 }} transition={{ duration: 1.5, ease: "easeInOut", delay: 0.1 }}
                        />
                    </svg>
                </div>
            </CardContent>
        </Card>
    );
}

function SalesMetricsCard({ data }: { data: RegionData }) {
    const metrics = [
        { name: "Avg. Order Value", value: `INR ${data.avgOrderValue}`, trend: data.avgOrderValueChange },
        { name: "Avg. Return Rate", value: `${data.avgReturnRate}%`, trend: data.avgReturnRateChange },
        { name: "Avg. Conversion Rate", value: `${data.avgConversionRate}%`, trend: data.avgConversionRateChange },
    ];
    
    return (
        <Card className="rounded-lg border" style={{ backgroundColor: colors.cardBackground, borderColor: colors.cardBorder }}>
            <CardContent className="p-3">
                <div className="flex justify-between items-center mb-2.5 relative">
                    <p className="text-xl font-light tracking-wider" style={{color: colors.textSecondary}}>Sales</p>
                    <div className="relative">
                        <span className="absolute -inset-1 rounded-full opacity-40" style={{ background: `radial-gradient(${colors.badgeBestSellingGlow}, transparent 70%)`, filter: "blur(6px)", zIndex: 0 }} />
                        <span className="relative z-10 text-[10px] px-2.5 py-0.5 rounded-full border" style={{ backgroundColor: colors.badgeBestSellingBg, borderColor: colors.badgeBestSellingBorder, color: "#EBB866" }}>
                          Best Selling Region
                        </span>
                    </div>
                </div>
                <table className="w-full text-sm border-separate" style={{ borderSpacing: '0 0.4rem' }}>
                    <tbody>
                        {metrics.map(metric => {
                            const isTrendUp = metric.trend > 0;
                            return (
                                <tr key={metric.name}>
                                    <td className="py-0.5 font-normal" style={{color: colors.textSecondary}}>{metric.name}</td>
                                    <td className="py-0.5 text-right font-medium" style={{color: colors.textPrimary}}>{metric.value}</td>
                                    <td className="py-0.5 text-right pl-2 w-[95px]">
                                        <div className={`inline-flex items-center justify-end gap-1 text-[11px] font-medium whitespace-nowrap`} style={{ color: isTrendUp ? colors.trendUp : colors.trendDown }}>
                                            <Image src={isTrendUp ? "/upArrow.png" : "/downArrow.png"} alt={isTrendUp ? "Up" : "Down"} width={10} height={10} className="mr-0.5" />
                                            {isTrendUp ? <ArrowUp size={10} /> : <ArrowDown size={10} />} {Math.abs(metric.trend)}%
                                            <span className="ml-0.5 font-normal text-[10px]" style={{ color: colors.textMuted }}>last week</span>
                                        </div>
                                    </td>
                                </tr>
                            );
                        })}
                    </tbody>
                </table>
            </CardContent>
        </Card>
    );
}

function TopSkusCard() {
    // Static SKU data - could be enhanced with API later
    const skus = [
        { id: "ID140001", name: "Diamond Cut Earrings", image: "/diamond-earrings.png", dailyAvg: 1650, trend: 6, conversionRate: 71, tag: "Most Interacted With" },
        { id: "ID140002", name: "Gold Necklace", image: "/diamond-earrings.png", dailyAvg: 1450, trend: 4, conversionRate: 68, tag: "Most Purchased" },
    ];

    return (
        <Card className="rounded-xl border" style={{ backgroundColor: colors.cardBackground, borderColor: colors.cardBorder }}>
            <CardContent className="p-5">
                <p className="text-xl font-light pb-3 mb-4 border-b" style={{ color: colors.textPrimary, borderColor: colors.divider, letterSpacing: '0.025em' }}>
                    Top SKUs in the Region
                </p>
                <div className="space-y-5">
                    {skus.map((sku, index) => {
                        const isTrendUp = sku.trend > 0;
                        return (
                            <div key={index} className="flex gap-4 items-start">
                                <div className="w-[88px] h-[88px] rounded-lg flex items-center justify-center flex-shrink-0 overflow-hidden" style={{ backgroundColor: colors.background }}>
                                    <Image src={sku.image} alt={sku.name} width={80} height={80} className="object-contain" />
                                </div>
                                <div className="flex-1 flex min-w-0">
                                    <div className="flex-1 pt-1">
                                        <p className="text-sm font-light" style={{color: colors.textPrimary}}>{sku.name}</p>
                                        <p className="text-sm mt-1" style={{ color: colors.textSecondary }}>
                                            SKU ID: <span style={{color: colors.textPrimary, fontWeight: 500}}>{sku.id}</span>
                                        </p>
                                        {sku.tag && (
                                            <div className="mt-2.5">
                                                <span className="text-xs px-4 py-1.5 border rounded-full" style={{ backgroundColor: colors.cardBackground, borderColor: colors.cardBorder, color: colors.textSecondary }}>
                                                    {sku.tag}
                                                </span>
                                            </div>
                                        )}
                                    </div>
                                    <div className="w-[160px] flex-shrink-0 text-right space-y-2.5 ml-3 pt-1">
                                        <div>
                                            <p className="text-[11px] font-normal" style={{color: colors.textSecondary}}>Daily Average</p>
                                            <div className="flex items-baseline justify-end mt-0.5">
                                                <p className="text-lg font-semibold mr-1.5" style={{color: colors.textPrimary}}>
                                                    INR {sku.dailyAvg.toLocaleString('en-IN')}
                                                </p>
                                                <div className={`flex items-center text-sm font-medium`} style={{ color: isTrendUp ? colors.trendUp : colors.trendDown }}>
                                                    <Image src={isTrendUp ? "/upArrow.png" : "/downArrow.png"} alt={isTrendUp ? "Up" : "Down"} width={10} height={10} className="mr-0.5" />
                                                    {Math.abs(sku.trend)}%
                                                </div>
                                            </div>
                                            <p className="text-[10px] font-normal -mt-0.5" style={{color: colors.textMuted}}>last week</p>
                                        </div>
                                        <div>
                                            <p className="text-[11px] font-normal" style={{color: colors.textSecondary}}>Conversion Rate</p>
                                            <p className="text-lg font-semibold mt-0.5" style={{color: colors.textPrimary}}>{sku.conversionRate} %</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        );
                    })}
                </div>
            </CardContent>
        </Card>
    );
}

function GlobeVisualization({ selectedRegion }: { selectedRegion: string }) {
    const canvasRef = useRef<HTMLCanvasElement>(null);
    const globeInstance = useRef<ReturnType<typeof createGlobe> | null>(null);
    const rotationSpeed = 0.002;

    const markers = React.useMemo<Marker[]>(() => [
        { location: [20.5937, 78.9629], size: 0.08 }, { location: [22.5937, 80.9629], size: 0.04 },
        { location: [18.5937, 76.9629], size: 0.06 }, { location: [38.9637, 35.2433], size: 0.05 },
        { location: [34.0479, 100.6197], size: 0.06 }, { location: [40.7128, -74.0060], size: 0.07 },
        { location: [34.0522, -118.2437], size: 0.05 }, { location: [51.5074, -0.1278], size: 0.06 },
        { location: [-33.8688, 151.2093], size: 0.05 },
        ...Array.from({ length: 20 }, () => ({
            location: [Math.random() * 180 - 90, Math.random() * 360 - 180] as [number, number],
            size: Math.random() * 0.03 + 0.02
        }))
    ], []);

    useEffect(() => {
        if (!canvasRef.current) return;
        let phi = 3.8; let theta = 0.5;

        if (selectedRegion === "United States") { phi = 4.5; theta = -1.6; }
        else if (selectedRegion === "Europe") { phi = 4.8; theta = 0.1; }
        else if (selectedRegion === "India") { phi = 4.2; theta = 1.0; }
        else if (selectedRegion === "Australia") { phi = 2.2; theta = 2.4; }

        const globeWidth = canvasRef.current.offsetWidth;
        const globeHeight = canvasRef.current.offsetHeight;

        globeInstance.current = createGlobe(canvasRef.current, {
            devicePixelRatio: 2, width: globeWidth * 2, height: globeHeight * 2,
            phi: phi, theta: theta, dark: 1, diffuse: 1.0,
            mapSamples: 25000, mapBrightness: 9, mapBaseBrightness: 0.08,
            baseColor: [0.09, 0.09, 0.11], markerColor: [1.0, 0.45, 0.15],
            glowColor: [0.08, 0.08, 0.10], markers: markers, scale: 1.0, opacity: 1.0,
            onRender: (state) => {
                state.phi = phi;
                if (canvasRef.current) {
                    const currentWidth = canvasRef.current.offsetWidth;
                    const currentHeight = canvasRef.current.offsetHeight;
                    if (state.width !== currentWidth * 2 || state.height !== currentHeight * 2) {
                        state.width = currentWidth * 2;
                        state.height = currentHeight * 2;
                    }
                }
                phi += rotationSpeed;
            },
        });
        canvasRef.current.style.width = '100%'; canvasRef.current.style.height = '100%';
        canvasRef.current.style.contain = 'layout paint size'; canvasRef.current.style.opacity = '0';
        canvasRef.current.style.transition = 'opacity 1s ease';
        setTimeout(() => { if (canvasRef.current) canvasRef.current.style.opacity = '1'; }, 100);
        return () => globeInstance.current?.destroy();
    }, [selectedRegion, markers]);

    return <canvas ref={canvasRef} />;
}

function CustomerCountOverlay({ region, data }: { region: string; data: RegionData }) {
    return (
        <motion.div
            className="rounded-xl border p-4 shadow-xl w-[280px]"
            style={{
                backgroundColor: colors.globeOverlayBg,
                borderColor: colors.globeOverlayBorder,
                backdropFilter: `blur(${colors.globeOverlayBackdropBlur})`,
                WebkitBackdropFilter: `blur(${colors.globeOverlayBackdropBlur})`,
            }}
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.4 }}
        >
            <p className="text-sm font-medium text-center mb-2.5 tracking-wider uppercase" style={{color: colors.textSecondary}}>
                {region}
            </p>
            <hr className="border-t mb-3.5" style={{ borderColor: colors.divider }} />
            <div className="flex justify-around items-start gap-4 px-1">
                <div className="text-center">
                    <p className="text-xs mb-0.5 tracking-wide" style={{color: colors.textSecondary}}>New Customers</p>
                    <p className="text-2xl font-semibold leading-tight" style={{color: colors.textPrimary}}>
                        {data.customerCounts.newCustomers.toLocaleString('en-IN')}
                    </p>
                </div>
                <div className="text-center">
                    <p className="text-xs mb-0.5 tracking-wide" style={{color: colors.textSecondary}}>Returning</p>
                    <p className="text-2xl font-semibold leading-tight" style={{color: colors.textPrimary}}>
                        {data.customerCounts.returningCustomers.toLocaleString('en-IN')}
                    </p>
                </div>
            </div>
        </motion.div>
    );
}

function GenderDistributionCard({ region, data }: { region: string; data: RegionData }) {
    const malePercent = data.genderDistribution.male;
    const femalePercent = data.genderDistribution.female;
    const outerRadius = 42; const innerRadius = 30;
    const outerStrokeWidth = 8; const innerStrokeWidth = 6;
    const outerCircumference = 2 * Math.PI * outerRadius;
    const innerCircumference = 2 * Math.PI * innerRadius;
    const maleOffset = outerCircumference - (outerCircumference * malePercent) / 100;
    const femaleOffset = innerCircumference - (innerCircumference * femalePercent) / 100;

    const calculateLabelPos = (percent: number, radius: number, startAngleDeg: number = -90) => {
        const midAngleDeg = startAngleDeg + (percent / 2) * 3.6;
        const midAngleRad = midAngleDeg * Math.PI / 180;
        return { x: 50 + radius * Math.cos(midAngleRad), y: 50 + radius * Math.sin(midAngleRad) };
    };
    const maleLabelPos = calculateLabelPos(malePercent, outerRadius);
    const femaleStartAngleVisual = -90 + (malePercent / 100) * 360;
    const femaleLabelPos = calculateLabelPos(femalePercent, innerRadius, femaleStartAngleVisual);

    return (
        <motion.div
            className="rounded-xl border p-4 shadow-xl w-[280px]"
            style={{
                backgroundColor: colors.globeOverlayBg,
                borderColor: colors.globeOverlayBorder,
                backdropFilter: `blur(${colors.globeOverlayBackdropBlur})`,
                WebkitBackdropFilter: `blur(${colors.globeOverlayBackdropBlur})`,
            }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.6 }}
        >
            <div className="flex flex-row items-center justify-between mb-2.5">
                <h3 className="text-sm font-medium tracking-wider uppercase" style={{color: colors.textSecondary}}>{region}</h3>
                <button className="focus:outline-none p-0.5 rounded-full hover:bg-[#3f3f46]" style={{ color: colors.textMuted }}>
                    <MoreHorizontal size={18} />
                </button>
            </div>
            <div className="flex flex-col items-center">
                <div className="relative w-32 h-32 mb-2.5">
                    <svg className="w-full h-full" viewBox="0 0 100 100">
                        <circle cx="50" cy="50" r={outerRadius} fill="none" stroke={colors.genderTrackOuter} strokeWidth={outerStrokeWidth} />
                        <circle cx="50" cy="50" r={innerRadius} fill="none" stroke={colors.genderTrackInner} strokeWidth={innerStrokeWidth} />
                        <motion.circle cx="50" cy="50" r={outerRadius} fill="none" stroke={colors.genderMale} strokeWidth={outerStrokeWidth} strokeDasharray={outerCircumference} strokeLinecap="round" transform="rotate(-90 50 50)"
                            initial={{ strokeDashoffset: outerCircumference }} animate={{ strokeDashoffset: maleOffset }} transition={{ duration: 1.2, ease: "circOut" }} />
                        <motion.circle cx="50" cy="50" r={innerRadius} fill="none" stroke={colors.genderFemale} strokeWidth={innerStrokeWidth} strokeDasharray={innerCircumference} strokeLinecap="round" transform={`rotate(${-90 + (malePercent / 100) * 360} 50 50)`}
                            initial={{ strokeDashoffset: innerCircumference }} animate={{ strokeDashoffset: femaleOffset }} transition={{ duration: 1.2, ease: "circOut", delay: 0.1 }} />
                        <g>
                            <motion.circle cx={maleLabelPos.x} cy={maleLabelPos.y} r="8" fill={colors.genderLabelBg} initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 1.0 }}/>
                            <motion.text x={maleLabelPos.x} y={maleLabelPos.y} dy="0.35em" fill={colors.genderLabelText} fontSize="7.5" fontWeight="medium" textAnchor="middle" initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 1.0 }}>
                                {malePercent}%
                            </motion.text>
                        </g>
                        <g>
                            <motion.circle cx={femaleLabelPos.x} cy={femaleLabelPos.y} r="8" fill={colors.genderLabelBg} initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 1.2 }}/>
                            <motion.text x={femaleLabelPos.x} y={femaleLabelPos.y} dy="0.35em" fill={colors.genderLabelText} fontSize="7.5" fontWeight="medium" textAnchor="middle" initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 1.2 }}>
                                {femalePercent}%
                            </motion.text>
                        </g>
                        <text x="50" y="50" textAnchor="middle" dominantBaseline="middle" fontSize="12" fontWeight="medium" fill={colors.textPrimary}>Gender</text>
                    </svg>
                </div>
                <div className="flex justify-center gap-4 text-xs mt-1.5">
                    <div className="flex items-center gap-1.5">
                        <span className="h-2.5 w-2.5 rounded-full border" style={{ backgroundColor: colors.genderMale, borderColor: colors.genderMale }}></span>
                        <span style={{ color: colors.textSecondary }}>Male</span>
                    </div>
                    <div className="flex items-center gap-1.5">
                        <span className="h-2.5 w-2.5 rounded-full border" style={{ backgroundColor: colors.genderFemale, borderColor: colors.genderFemale }}></span>
                        <span style={{ color: colors.textSecondary }}>Female</span>
                    </div>
                </div>
            </div>
        </motion.div>
    );
}

================
File: components/insights/region-gauges.tsx
================
"use client"

import { motion } from "framer-motion"
import { Card, CardContent } from "@/components/ui/card"
import { useApiData } from "@/hooks/use-api-data"
import { RegionData } from "@/lib/data-service"

const regions = [
  { name: "India", value: 30, color: "#4CD8E5" },
  { name: "United Kingdom", value: 20, color: "#4CD8E5" },
  { name: "Canada", value: 10, color: "#4CD8E5" },
  { name: "Australia", value: 15, color: "#8A70D6" },
  { name: "Spain", value: 15, color: "#8A70D6" },
  { name: "Europe", value: 10, color: "#8A70D6" },
]

interface RegionGaugesProps {
  dateRange: {
    from: Date;
    to: Date;
  };
}

export function RegionGauges({ dateRange }: RegionGaugesProps) {
  const { data, loading, error } = useApiData<RegionData>({ endpoint: 'region-data', dateRange });
  const regionsData = data?.regions || [];

  return (
    <Card className="bg-[#1A1A1A] border-[#FFFFFF88] text-white">
      <CardContent className="p-6">
        {loading ? (
          <div className="text-gray-400">Loading region gauges...</div>
        ) : error ? (
          <>
            <div className="text-yellow-400 mb-4">Showing fallback data (offline mode)</div>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-10">
              {regions.map((region) => (
                <RegionGauge key={region.name} region={region} />
              ))}
            </div>
          </>
        ) : (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-10">
            {regionsData.map((region) => (
              <RegionGauge key={region.name} region={region} />
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  )
}

interface RegionGaugeProps {
  region: {
    name: string
    value: number
    color: string
  }
}

function RegionGauge({ region }: RegionGaugeProps) {
  const circumference = 2 * Math.PI * 40
  const strokeDashoffset = circumference * (1 - region.value / 100)

  return (
    <div className="flex flex-col items-center">
      <div className="relative w-24 h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          {/* Background circle */}
          <circle
            cx="50"
            cy="50"
            r="40"
            fill="none"
            stroke="#2A2A2A"
            strokeWidth="10"
            strokeLinecap="round"
            transform="rotate(-90 50 50)"
          />

          {/* Progress circle */}
          <motion.circle
            cx="50"
            cy="50"
            r="40"
            fill="none"
            stroke={region.color}
            strokeWidth="10"
            strokeLinecap="round"
            strokeDasharray={circumference}
            initial={{ strokeDashoffset: circumference }}
            animate={{ strokeDashoffset }}
            transition={{ duration: 1.5, ease: "easeOut" }}
            transform="rotate(-90 50 50)"
          />

          {/* Percentage text */}
          <text x="50" y="55" textAnchor="middle" fontSize="16" fontWeight="light" fill="white" className="select-none">
            {region.value}%
          </text>
        </svg>
      </div>
      <p className="mt-2 text-sm text-center font-light font-sans">{region.name}</p>
    </div>
  )
}

================
File: components/magicui/globe.tsx
================
"use client";

import createGlobe, { COBEOptions } from "cobe";
import { useMotionValue, useSpring } from "motion/react";
import { useEffect, useRef } from "react";

import { cn } from "@/lib/utils";

const MOVEMENT_DAMPING = 1400;

const GLOBE_CONFIG: COBEOptions = {
  width: 800,
  height: 800,
  onRender: () => {},
  devicePixelRatio: 2,
  phi: 0,
  theta: 0.3,
  dark: 0,
  diffuse: 0.4,
  mapSamples: 16000,
  mapBrightness: 1.2,
  baseColor: [1, 1, 1],
  markerColor: [251 / 255, 100 / 255, 21 / 255],
  glowColor: [1, 1, 1],
  markers: [
    { location: [14.5995, 120.9842], size: 0.03 },
    { location: [19.076, 72.8777], size: 0.1 },
    { location: [23.8103, 90.4125], size: 0.05 },
    { location: [30.0444, 31.2357], size: 0.07 },
    { location: [39.9042, 116.4074], size: 0.08 },
    { location: [-23.5505, -46.6333], size: 0.1 },
    { location: [19.4326, -99.1332], size: 0.1 },
    { location: [40.7128, -74.006], size: 0.1 },
    { location: [34.6937, 135.5022], size: 0.05 },
    { location: [41.0082, 28.9784], size: 0.06 },
  ],
};

export function Globe({
  className,
  config = GLOBE_CONFIG,
}: {
  className?: string;
  config?: COBEOptions;
}) {
  let phi = 0;
  let width = 0;
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const pointerInteracting = useRef<number | null>(null);
  const pointerInteractionMovement = useRef(0);

  const r = useMotionValue(0);
  const rs = useSpring(r, {
    mass: 1,
    damping: 30,
    stiffness: 100,
  });

  const updatePointerInteraction = (value: number | null) => {
    pointerInteracting.current = value;
    if (canvasRef.current) {
      canvasRef.current.style.cursor = value !== null ? "grabbing" : "grab";
    }
  };

  const updateMovement = (clientX: number) => {
    if (pointerInteracting.current !== null) {
      const delta = clientX - pointerInteracting.current;
      pointerInteractionMovement.current = delta;
      r.set(r.get() + delta / MOVEMENT_DAMPING);
    }
  };

  useEffect(() => {
    const onResize = () => {
      if (canvasRef.current) {
        width = canvasRef.current.offsetWidth;
      }
    };

    window.addEventListener("resize", onResize);
    onResize();

    const globe = createGlobe(canvasRef.current!, {
      ...config,
      width: width * 2,
      height: width * 2,
      onRender: (state) => {
        if (!pointerInteracting.current) phi += 0.005;
        state.phi = phi + rs.get();
        state.width = width * 2;
        state.height = width * 2;
      },
    });

    setTimeout(() => (canvasRef.current!.style.opacity = "1"), 0);
    return () => {
      globe.destroy();
      window.removeEventListener("resize", onResize);
    };
  }, [rs, config]);

  return (
    <div
      className={cn(
        "absolute inset-0 mx-auto aspect-[1/1] w-full max-w-[600px]",
        className,
      )}
    >
      <canvas
        className={cn(
          "size-full opacity-0 transition-opacity duration-500 [contain:layout_paint_size]",
        )}
        ref={canvasRef}
        onPointerDown={(e) => {
          pointerInteracting.current = e.clientX;
          updatePointerInteraction(e.clientX);
        }}
        onPointerUp={() => updatePointerInteraction(null)}
        onPointerOut={() => updatePointerInteraction(null)}
        onMouseMove={(e) => updateMovement(e.clientX)}
        onTouchMove={(e) =>
          e.touches[0] && updateMovement(e.touches[0].clientX)
        }
      />
    </div>
  );
}

================
File: components/magicui/shimmer-button.tsx
================
import React, { CSSProperties, ComponentPropsWithoutRef } from "react";

import { cn } from "@/lib/utils";

export interface ShimmerButtonProps extends ComponentPropsWithoutRef<"button"> {
  shimmerColor?: string;
  shimmerSize?: string;
  borderRadius?: string;
  shimmerDuration?: string;
  background?: string;
  className?: string;
  children?: React.ReactNode;
}

export const ShimmerButton = React.forwardRef<
  HTMLButtonElement,
  ShimmerButtonProps
>(
  (
    {
      shimmerColor = "#ffffff",
      shimmerSize = "0.05em",
      shimmerDuration = "3s",
      borderRadius = "100px",
      background = "rgba(0, 0, 0, 1)",
      className,
      children,
      ...props
    },
    ref,
  ) => {
    return (
      <button
        style={
          {
            "--spread": "90deg",
            "--shimmer-color": shimmerColor,
            "--radius": borderRadius,
            "--speed": shimmerDuration,
            "--cut": shimmerSize,
            "--bg": background,
          } as CSSProperties
        }
        className={cn(
          "group relative z-0 flex cursor-pointer items-center justify-center overflow-hidden whitespace-nowrap border border-white/10 px-6 py-3 text-white [background:var(--bg)] [border-radius:var(--radius)] dark:text-black",
          "transform-gpu transition-transform duration-300 ease-in-out active:translate-y-px",
          className,
        )}
        ref={ref}
        {...props}
      >
        {/* spark container */}
        <div
          className={cn(
            "-z-30 blur-[2px]",
            "absolute inset-0 overflow-visible [container-type:size]",
          )}
        >
          {/* spark */}
          <div className="absolute inset-0 h-[100cqh] animate-shimmer-slide [aspect-ratio:1] [border-radius:0] [mask:none]">
            {/* spark before */}
            <div className="absolute -inset-full w-auto rotate-0 animate-spin-around [background:conic-gradient(from_calc(270deg-(var(--spread)*0.5)),transparent_0,var(--shimmer-color)_var(--spread),transparent_var(--spread))] [translate:0_0]" />
          </div>
        </div>
        {children}

        {/* Highlight */}
        <div
          className={cn(
            "insert-0 absolute size-full",

            "rounded-2xl px-4 py-1.5 text-sm font-medium shadow-[inset_0_-8px_10px_#ffffff1f]",

            // transition
            "transform-gpu transition-all duration-300 ease-in-out",

            // on hover
            "group-hover:shadow-[inset_0_-6px_10px_#ffffff3f]",

            // on click
            "group-active:shadow-[inset_0_-10px_10px_#ffffff3f]",
          )}
        />

        {/* backdrop */}
        <div
          className={cn(
            "absolute -z-20 [background:var(--bg)] [border-radius:var(--radius)] [inset:var(--cut)]",
          )}
        />
      </button>
    );
  },
);

ShimmerButton.displayName = "ShimmerButton";

================
File: components/pages/dashboard.tsx
================
"use client"

import { useState } from "react"
import { Sidebar } from "@/components/sidebar"
import { Header } from "@/components/header"
import { KpiCards } from "@/components/kpi-cards"
import { SalesOverview } from "@/components/dashboard/sales-overview"
import { TrafficAnalysis } from "@/components/dashboard/traffic-analysis"
import { WeeklyVisits } from "@/components/dashboard/weekly-visits"
import { WeeklyVisitors } from "@/components/dashboard/weekly-visitors"
import { DateRangePicker } from "@/components/date-range-picker"
import { Search } from "@/components/search"

export function Dashboard() {
  const [dateRange, setDateRange] = useState({
    from: new Date(2025, 0, 1), 
    to: new Date(2025, 0, 7), 
  })

  return (
    <div className="flex min-h-screen bg-[#121212] text-white">
      <Sidebar />
      <main className="flex-1 p-4 md:p-8 w-full overflow-x-hidden">
        <Header />
        <div className="flex flex-col md:flex-row items-center justify-between mt-6 mb-8 gap-4 md:gap-0">
          <h1 className="text-3xl md:text-4xl font-light font-sans text-white">Dashboard</h1>
          <div className="w-full md:w-auto flex justify-center md:justify-end">
            <DateRangePicker date={dateRange} onDateChange={setDateRange} />
          </div>
        </div>

        <Search />

        <KpiCards dateRange={dateRange} />

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
          <SalesOverview dateRange={dateRange} />
          <TrafficAnalysis dateRange={dateRange} />
        </div>

        <div className="mt-6 space-y-6">
          <WeeklyVisits />
          <WeeklyVisitors />
        </div>
      </main>
    </div>
  )
}

================
File: components/pages/Insights.tsx
================
"use client"

import { useState } from "react"
import { Sidebar } from "@/components/sidebar"
import { Header } from "@/components/header"
import { KpiCards } from "@/components/kpi-cards"
import { RegionGauges } from "@/components/insights/region-gauges"
import { RegionAnalytics } from "@/components/insights/region-analytics"
import { CustomerVolumeAge } from "@/components/insights/customer-volume-age"
import { Search } from "@/components/search"
import { DateRangePicker } from "@/components/date-range-picker"

export function Insights() {
  const [dateRange, setDateRange] = useState({
    from: new Date(2025, 0, 1), 
    to: new Date(2025, 0, 7), 
  })

  return (
    <div className="flex min-h-screen bg-[#121212] text-white">
      <Sidebar />
      <main className="flex-1 p-4 md:p-8 w-full overflow-x-hidden">
        <Header />
        <div className="flex flex-col md:flex-row items-center justify-between mt-6 mb-8 gap-4 md:gap-0">
          <h1 className="text-3xl md:text-4xl font-light font-sans">Insights</h1>
          <div className="w-full md:w-auto flex justify-center md:justify-end">
            <DateRangePicker date={dateRange} onDateChange={setDateRange} />
          </div>
        </div>

        <Search />

        <KpiCards dateRange={dateRange} />

        <div className="mt-6">
          <RegionGauges dateRange={dateRange} />
        </div>

        <div className="mt-6">
          <RegionAnalytics dateRange={dateRange} />
        </div>

        <div className="mt-6">
          <CustomerVolumeAge dateRange={dateRange} />
        </div>
      </main>
    </div>
  )
}

================
File: components/pages/sales.tsx
================
"use client"

import { useState } from "react"
import { Sidebar } from "@/components/sidebar"
import { Header } from "@/components/header"
import { KpiCards } from "@/components/kpi-cards"
import { TotalSales } from "@/components/sales/total-sales"
import { TrafficAnalysis } from "@/components/sales/traffic-analysis-sales"
import { ReturnRates } from "@/components/sales/return-rates"
import { ConversionRates } from "@/components/sales/conversion-rates"
import { EmbedAssistedRevenue } from "@/components/sales/embed-assisted-revenue"
import { DateRangePicker } from "@/components/date-range-picker"
import { Search } from "@/components/search"

export function SalesAnalytics() {
  const [dateRange, setDateRange] = useState({
    from: new Date(2025, 0, 1),
    to: new Date(2025, 0, 7),
  })

  return (
    <div className="flex min-h-screen bg-[#121212] text-white">
      <Sidebar />
      <main className="flex-1 p-4 md:p-8 w-full overflow-x-hidden">
        <Header />
        <div className="flex flex-col md:flex-row items-center justify-between mt-6 mb-8 gap-4 md:gap-0">
          <h1 className="text-3xl md:text-4xl font-light font-sans text-white">Sales Analytics</h1>
          <div className="w-full md:w-auto flex justify-center md:justify-end">
            <DateRangePicker date={dateRange} onDateChange={setDateRange} />
          </div>
        </div>

        <Search />

        <KpiCards dateRange={dateRange} />

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
          <TotalSales dateRange={dateRange} />
          <TrafficAnalysis dateRange={dateRange} />
        </div>

        <div className="mt-6">
          <h2 className="text-2xl font-light font-sans text-white mb-4">Comparative Analysis</h2>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <ReturnRates dateRange={dateRange} />
            <ConversionRates dateRange={dateRange} />
          </div>
        </div>

        <div className="mt-6">
          <EmbedAssistedRevenue dateRange={dateRange} />
        </div>
      </main>
    </div>
  )
}

================
File: components/pages/sku-analytics.tsx
================
"use client"

import { useState } from "react"
import { Header } from "@/components/header"
import { KpiCards } from "@/components/kpi-cards"
import { SkuDetails } from "@/components/sku/sku-details"
import { VisitorAnalysis } from "@/components/sku/visitor-analysis"
import { SalesFunnelAnalysis } from "@/components/sku/sales-funnel-analysis"
import { InteractionDuration } from "@/components/sku/interaction-duration"
import { Search } from "@/components/search"
import { DateRangePicker } from "@/components/date-range-picker"
import { Sidebar } from "@/components/sidebar"

export function SkuAnalytics() {
  const [dateRange, setDateRange] = useState({
    from: new Date(2025, 0, 1),
    to: new Date(2025, 0, 7),
  })

  return (
    <div className="flex min-h-screen bg-[#121212] text-white">
      <Sidebar />
      <main className="flex-1 p-4 md:p-6 w-full overflow-x-hidden"> 
        <Header />
        <div className="flex flex-col md:flex-row items-start md:items-center justify-between mt-6 mb-8 gap-4 md:gap-0">
          <h1 className="text-3xl md:text-4xl font-light font-sans text-white">SKU Analytics</h1>
          <div className="w-full md:w-auto flex justify-center md:justify-end">
            <DateRangePicker date={dateRange} onDateChange={setDateRange} />
          </div>
        </div>

        <Search />

        <KpiCards dateRange={dateRange} />

        <div className="grid grid-cols-1 lg:grid-cols-5 gap-6 mt-6">
          <div className="lg:col-span-3">
            <SkuDetails />
          </div>
          <div className="lg:col-span-2">
            <VisitorAnalysis dateRange={dateRange} />
          </div>
        </div>

        <div className="mt-6">
          <h2 className="text-xl md:text-2xl font-light font-sans font-inter mb-4">Engagement Analysis</h2>
          <div className="space-y-6">
            <SalesFunnelAnalysis dateRange={dateRange} />
            <InteractionDuration dateRange={dateRange} />
          </div>
        </div>
      </main>
    </div>
  )
}

================
File: components/sales/conversion-rates.tsx
================
"use client";

import { MoreHorizontal } from "lucide-react";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useApiData } from "@/hooks/use-api-data";
import { ConversionRatesData } from "@/lib/data-service";

interface ConversionRatesProps {
  dateRange: {
    from: Date;
    to: Date;
  };
}

// Define colors based on the image analysis
const colors = {
  background: "#161618",
  cardBorder: "rgba(255, 255, 255, 0.4)",
  textPrimary: "#FFFFFF",
  textSecondary: "#A1A1AA", // Lighter gray for axis/legend text
  iconMuted: "#6B7280",
  gridLine: "rgba(255, 255, 255, 0.3)", // Faint white grid lines
  barWithEmbeds: "#14B8A6", // Teal
  barWithoutEmbeds: "#F59E0B", // Orange/Amber
  legendActiveBorder: "#FFFFFF", 
};

const MAX_VALUE = 80; 
const Y_AXIS_LABELS = [80, 40, 20, 0];

export function ConversionRates({ dateRange }: ConversionRatesProps) {
  const { data, loading, error } = useApiData<ConversionRatesData>({ endpoint: 'conversion-rates', dateRange });
  const fallback = { chartData: [
    { withEmbeds: 30, withoutEmbeds: 20 },
    { withEmbeds: 48, withoutEmbeds: 38 },
    { withEmbeds: 50, withoutEmbeds: 48 },
    { withEmbeds: 35, withoutEmbeds: 34 },
    { withEmbeds: 40, withoutEmbeds: 33 },
    { withEmbeds: 20, withoutEmbeds: 17 },
  ]};
  const d = (error ? fallback : (data || fallback));
  if (loading) return <div className="text-gray-400">Loading conversion rates...</div>;

  // Show a subtle warning if fallback data is being used due to error
  const isFallback = error;

  return (
    <Card
      className="rounded-2xl border p-6 shadow-xl h-full flex flex-col"
      style={{
        backgroundColor: colors.background,
        borderColor: colors.cardBorder,
        color: colors.textPrimary,
      }}
    >
      <CardHeader className="flex flex-row items-center justify-between p-0 mb-6"> 
        <CardTitle className="text-xl font-light font-sans text-white" style={{ color: colors.textPrimary }}> 
          Conversion Rates
        </CardTitle>
        <button className="focus:outline-none" style={{ color: colors.iconMuted }}>
          <MoreHorizontal size={20} />
        </button>
      </CardHeader>

      {/* Subtle warning if fallback is used */}
      {isFallback && (
        <div className="mb-2 flex items-center gap-2 text-xs text-yellow-400">
          <span className="inline-block w-2 h-2 rounded-full bg-yellow-400 animate-pulse"></span>
          Offline mode: showing fallback data
        </div>
      )}

      <CardContent className="p-0 flex-grow flex flex-col">
        {/* FIX 4: Added min-h-[250px] to chart area wrapper and responsive gap/bar width */}
        <div className="flex-grow flex items-end gap-2 sm:gap-4 pl-8 pr-4 relative min-h-[250px]"> 

          <div className="absolute left-0 top-0 bottom-[20px] flex flex-col justify-between h-[calc(100%-20px)]"> 
            {Y_AXIS_LABELS.map((label) => (
              <span key={label} className="text-xs" style={{ color: colors.textSecondary }}>
                {label === 0 ? '0' : `${label}%`} 
              </span>
            ))}
          </div>

          <div className="flex-grow h-full relative flex justify-around items-end gap-2 sm:gap-3"> 
            <div className="absolute inset-0 top-0 bottom-[20px] right-0 left-0"> 
              {Y_AXIS_LABELS.slice(0, -1).map((label, index) => ( 
                <div
                  key={`grid-${label}`}
                  className="absolute w-full h-px left-0"
                  style={{
                    backgroundColor: colors.gridLine,
                    top: `${100 - (label / MAX_VALUE) * 100}%`,
                  }}
                />
              ))}
               <div
                  className="absolute w-full h-px left-0 bottom-0"
                  style={{ backgroundColor: colors.gridLine }}
                />
            </div>

            {d.chartData.map((group, index) => (
              <div key={index} className="flex gap-1 sm:gap-1.5 items-end h-full relative z-10"> 
                <motion.div
                  className="w-2.5 md:w-3 lg:w-4 rounded-t-md" // Responsive bar width
                  style={{ backgroundColor: colors.barWithEmbeds }}
                  initial={{ height: "0%" }}
                  animate={{ height: `${(group.withEmbeds / MAX_VALUE) * 100}%` }}
                  transition={{ duration: 0.8, ease: "easeOut", delay: index * 0.05 }}
                />
                <motion.div
                  className="w-2.5 md:w-3 lg:w-4 rounded-t-md" // Responsive bar width
                  style={{ backgroundColor: colors.barWithoutEmbeds }}
                  initial={{ height: "0%" }}
                  animate={{ height: `${(group.withoutEmbeds / MAX_VALUE) * 100}%` }}
                  transition={{ duration: 0.8, ease: "easeOut", delay: index * 0.05 + 0.1 }}
                />
              </div>
            ))}
          </div>
        </div>

        <div className="flex flex-col sm:flex-row justify-center items-center gap-3 sm:gap-5 pt-4 mt-2"> {/* Responsive legend */}
          <div className="flex items-center gap-2">
            <span className="relative flex h-3 w-3">
              <span className="absolute inset-0 rounded-full" style={{ backgroundColor: colors.barWithEmbeds }}></span>
              <span className="absolute -inset-0.5 rounded-full border" style={{ borderColor: colors.barWithEmbeds }}></span>
            </span>
            <span className="text-xs" style={{ color: colors.textSecondary }}>
              With Embeds
            </span>
          </div>

          <div className="flex items-center gap-2">
             <span className="relative flex h-3 w-3">
               <span className="absolute inset-0 rounded-full" style={{ backgroundColor: colors.barWithoutEmbeds }}></span>
               <span className="absolute -inset-0.5 rounded-full border" style={{ borderColor: colors.barWithoutEmbeds }}></span>
             </span>
            <span className="text-xs" style={{ color: colors.textSecondary }}>
              Without Embeds
            </span>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

================
File: components/sales/embed-assisted-revenue.tsx
================
"use client"

import React, { useState, useMemo } from "react"
import { Calendar, MoreHorizontal } from "lucide-react"
import { motion } from "framer-motion"
import {
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
} from "recharts"
import { format } from "date-fns"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover"
import { DateRangePicker } from "@/components/date-range-picker"
import { useApiData } from "@/hooks/use-api-data"
import { EmbedAssistedRevenueData } from "@/lib/data-service"

interface EmbedAssistedRevenueProps {
  dateRange: {
    from: Date;
    to: Date;
  };
}

export function EmbedAssistedRevenue({ dateRange: initialDateRange }: EmbedAssistedRevenueProps) {
  const [dateRange, setDateRange] = useState(initialDateRange);
  const { data, loading, error } = useApiData<EmbedAssistedRevenueData>({ endpoint: 'embed-assisted-revenue', dateRange })
  const fallback = { data: [
    { day: 1, unique: 40000, total: 60000 },
    { day: 2, unique: 63480, total: 85000 },
    { day: 3, unique: 30000, total: 58000 },
    { day: 4, unique: 72000, total: 90000 },
    { day: 5, unique: 55000, total: 88000 },
    { day: 6, unique: 48000, total: 92000 },
    { day: 7, unique: 35000, total: 65000 },
  ] }
  const d = (error ? fallback : (data || fallback))
  const [activeKey, setActiveKey] = useState<"unique" | "total" | null>("unique")
  const peak = useMemo(() => {
    if (!Array.isArray(d.data) || d.data.length === 0) {
      return { entry: { day: 1, unique: 0, total: 0 }, value: 0 };
    }
    const key = activeKey || "unique"
    let max = -Infinity, entry = d.data[0]
    d.data.forEach(d => {
      if (d[key] > max) {
        max = d[key]; entry = d
      }
    })
    return { entry, value: entry[activeKey || "unique"] }
  }, [activeKey, d.data])
  if (loading) return <div className="text-gray-400">Loading embed-assisted revenue...</div>

  // Show a subtle warning if fallback data is being used due to error
  const isFallback = error;

  return (
    <Card className="bg-[#1A1A1A] border-[#FFFFFF66] text-white">
      <CardHeader className="flex flex-row items-center justify-between pb-2">
        <CardTitle className="text-xl font-light font-sans text-white">Embed-Assisted Revenue</CardTitle>

        <div className="flex items-center gap-2">
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                size="sm"
                className="h-8 bg-[#1A1A1A] border-[#2A2A2A] hover:bg-[#2A2A2A] text-white rounded-md"
              >
                <Calendar className="mr-2 h-4 w-4" />
                {format(dateRange.from, "d MMM, yyyy")} – {format(dateRange.to, "d MMM, yyyy")}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0 bg-[#1A1A1A] border-[#2A2A2A]" align="end">
              <div>
                <DateRangePicker date={dateRange} onDateChange={setDateRange} />
              </div>
            </PopoverContent>
          </Popover>

          <button className="text-gray-400 hover:text-white">
            <MoreHorizontal size={20} />
          </button>
        </div>
      </CardHeader>

      {/* Subtle warning if fallback is used */}
      {isFallback && (
        <div className="mb-2 flex items-center gap-2 text-xs text-yellow-400">
          <span className="inline-block w-2 h-2 rounded-full bg-yellow-400 animate-pulse"></span>
          Offline mode: showing fallback data
        </div>
      )}

      <CardContent>
        <div className="relative h-[300px]">
          {/* Peak tooltip */}
          <div
            className="absolute z-10 p-2 rounded bg-[#111] bg-opacity-60"
            style={{
              // position roughly above the peak day
              left: `calc(${(peak.entry.day - 1) / 6 * 100}% - 40px)`,
              top: "3%",
            }}
          >
            <div className="text-lg font-semibold">
              {peak.value.toLocaleString()}
            </div>
            <div className="text-xs text-green-400">+5% over last week</div>
          </div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="h-full"
          >
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={d.data} margin={{ top: 40, right: 30, left: 20, bottom: 10 }}>
                <CartesianGrid stroke="#2A2A2A" strokeDasharray="3 3" vertical={false} />

                <XAxis
                  dataKey="day"
                  axisLine={false}
                  tickLine={false}
                  tick={{ fill: "#9CA3AF" }}
                />

                <YAxis
                  axisLine={false}
                  tickLine={false}
                  tick={{ fill: "#9CA3AF" }}
                  domain={[0, 100000]}
                  ticks={[0,20000,40000,60000,80000,100000]}
                  tickFormatter={v => v === 0 ? "0k" : `${v/1000}k`}
                />

                <Tooltip
                  contentStyle={{
                    backgroundColor: "#2A2A2A",
                    border: "none",
                    borderRadius: "8px",
                    color: "white",
                  }}
                  formatter={(val: number) => [`${val.toLocaleString()}`, ""]}
                  labelFormatter={(d: any) => `Day ${d}`}
                />

                {/** Unique Visitors line */}
                <Line
                  type="monotone"
                  dataKey="unique"
                  stroke="#4AE3F8"
                  strokeWidth={ activeKey === "unique" || activeKey === null ? 3 : 1.5 }
                  dot={false}
                  activeDot={{ r: 6, fill: "#4AE3F8" }}
                  style={{
                    opacity: activeKey === "total" ? 0.3 : 1,
                    filter: activeKey === "unique"
                      ? "drop-shadow(0px 0px 10px rgba(74,227,248,0.6))"
                      : "none"
                  }}
                />

                {/** Total Visitors line */}
                <Line
                  type="monotone"
                  dataKey="total"
                  stroke="#10B981"
                  strokeWidth={ activeKey === "total" || activeKey === null ? 3 : 1.5 }
                  dot={false}
                  activeDot={{ r: 6, fill: "#10B981" }}
                  style={{
                    opacity: activeKey === "unique" ? 0.3 : 1,
                    filter: activeKey === "total"
                      ? "drop-shadow(0px 0px 10px rgba(16,185,129,0.6))"
                      : "none"
                  }}
                />
              </LineChart>
            </ResponsiveContainer>
          </motion.div>
        </div>

        {/* Legend / toggles */}
        <div className="flex justify-center gap-8 mt-4">
          {[
            { key: "unique", label: "Unique Visitors", color: "#4AE3F8" },
            { key: "total",  label: "Total Visitors",  color: "#10B981" },
          ].map(series => {
            const isFaded = activeKey !== null && activeKey !== series.key
            return (
              <button
                key={series.key}
                onClick={() => setActiveKey(prev => prev === series.key ? null : (series.key as any))}
                className="flex items-center gap-2"
              >
                <span
                  className="w-3 h-3 rounded-full"
                  style={{
                    backgroundColor: series.color,
                    opacity: isFaded ? 0.3 : 1,
                  }}
                />
                <span className={`text-sm ${isFaded ? "text-gray-400" : "text-white"}`}>
                  {series.label}
                </span>
              </button>
            )
          })}
        </div>
      </CardContent>
    </Card>
  )
}

================
File: components/sales/return-rates.tsx
================
"use client";

import { useState } from "react";
import { MoreHorizontal, ArrowDown, ArrowUp } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useApiData } from "@/hooks/use-api-data";
import { ReturnRatesData } from "@/lib/data-service";

// Define data for both sources, matching visual rings
const data = {
  without: { // Outer Ring Data
    rate: 71,
    trend: "down",
  },
  with: { // Inner Ring Data
    rate: 45, // Example data for the inner ring
    trend: "up", // Example trend for inner ring
  },
};

// Define colors based on activity state
const colors = {
  background: "#161618",
  cardBorder: "rgba(255, 255, 255, 0.4)", // Adjusted border opacity based on image
  textPrimary: "#FFFFFF",
  textSecondary: "#A1A1AA",
  textMuted: "#71717A",
  iconMuted: "#6B7280",
  // --- Dynamic Ring/Track Colors ---
  progressActive: "#14B8A6",      // Bright teal for the active progress arc
  progressInactive: "#095C56",    // Darker, less saturated teal for inactive arc (adjust as needed)
                                   // Alt: use opacity: "rgba(20, 184, 166, 0.3)"
  trackActive: "rgba(20, 184, 166, 0.2)", // Visible track for the active ring
  trackInactive: "rgba(20, 184, 166, 0.05)", // Very faint track for the inactive ring
  // --- Other Colors ---
  trendDown: "#F87171",
  trendUp: "#34D399",
  legendActiveHighlight: "#14B8A6", // Color for the active legend circle's border
  legendInactiveCircle: "#6B7280", // Background color for inactive legend circle
  legendInactiveText: "#6B7280",
};

// SVG Circle properties
const outerRadius = 42;
const innerRadius = 30;
const outerCircumference = 2 * Math.PI * outerRadius; // Approx 264
const innerCircumference = 2 * Math.PI * innerRadius; // Approx 188
const outerStrokeWidth = 8;
const innerStrokeWidth = 6; // Keep inner ring slightly thinner than outer

interface ReturnRatesProps {
  dateRange: {
    from: Date;
    to: Date;
  };
}

export function ReturnRates({ dateRange }: ReturnRatesProps) {
  const { data, loading, error } = useApiData<ReturnRatesData>({ endpoint: 'return-rates', dateRange });
  const fallback = { without: { rate: 71, trend: "down" }, with: { rate: 45, trend: "up" } };
  const d = (error ? fallback : (data || fallback));
  const [activeView, setActiveView] = useState<"without" | "with">("without");
  if (loading) return <div className="text-gray-400">Loading return rates...</div>;

  // Show a subtle warning if fallback data is being used due to error
  const isFallback = error;

  const displayData = d[activeView]; // Data to show in the center

  // Calculate offsets (these don't change based on activeView)
  const outerProgressOffset = outerCircumference - (outerCircumference * d.without.rate) / 100;
  const innerProgressOffset = innerCircumference - (innerCircumference * d.with.rate) / 100;

  // Determine active/inactive state for styling
  const isOuterActive = activeView === 'without';
  const isInnerActive = activeView === 'with';

  return (
    <Card
      className="rounded-2xl border p-6 shadow-xl h-full flex flex-col"
      style={{
        backgroundColor: colors.background,
        borderColor: colors.cardBorder,
        color: colors.textPrimary,
      }}
    >
      {/* Card Header */}
      <CardHeader className="flex flex-row items-center justify-between p-0 mb-4">
        {/* Adjusted Title font */}
        <CardTitle className="text-xl font-light font-sans text-white" style={{ color: colors.textPrimary }}>
          Return Rates
        </CardTitle>
        <button className="focus:outline-none" style={{ color: colors.iconMuted }}>
          <MoreHorizontal size={20} />
        </button>
      </CardHeader>

      {/* Subtle warning if fallback is used */}
      {isFallback && (
        <div className="mb-2 flex items-center gap-2 text-xs text-yellow-400">
          <span className="inline-block w-2 h-2 rounded-full bg-yellow-400 animate-pulse"></span>
          Offline mode: showing fallback data
        </div>
      )}

      {/* Card Content */}
      <CardContent className="p-0 flex flex-col flex-grow items-center justify-center">
        {/* Chart Area */}
        <div className="relative w-48 h-48 mb-6">
          {/* SVG Container */}
          <svg className="w-full h-full" viewBox="0 0 100 100">
            {/* Background Track Circle - Outer */}
            <circle
              cx="50"
              cy="50"
              r={outerRadius}
              fill="none"
              // *** Apply dynamic track color ***
              stroke={isOuterActive ? colors.trackActive : colors.trackInactive}
              strokeWidth={outerStrokeWidth}
              strokeLinecap="round"
            />
            {/* Background Track Circle - Inner */}
            <circle
              cx="50"
              cy="50"
              r={innerRadius}
              fill="none"
              // *** Apply dynamic track color ***
              stroke={isInnerActive ? colors.trackActive : colors.trackInactive}
              strokeWidth={innerStrokeWidth}
              strokeLinecap="round"
            />

            {/* Progress Circle - Outer (Without Embeds) */}
            <motion.circle
              cx="50"
              cy="50"
              r={outerRadius}
              fill="none"
              // *** Apply dynamic progress color ***
              stroke={isOuterActive ? colors.progressActive : colors.progressInactive}
              strokeWidth={outerStrokeWidth}
              strokeDasharray={outerCircumference}
              strokeDashoffset={outerProgressOffset}
              strokeLinecap="round"
              transform="rotate(-90 50 50)"
              initial={{ strokeDashoffset: outerCircumference }}
              // Animate stroke color change along with offset
              animate={{
                 strokeDashoffset: outerProgressOffset,
                 stroke: isOuterActive ? colors.progressActive : colors.progressInactive
              }}
              transition={{ duration: 0.5, ease: "easeInOut" }} // Slightly faster color transition?
            />

            {/* Progress Circle - Inner (With Embeds) */}
            <motion.circle
              cx="50"
              cy="50"
              r={innerRadius}
              fill="none"
              // *** Apply dynamic progress color ***
              stroke={isInnerActive ? colors.progressActive : colors.progressInactive}
              strokeWidth={innerStrokeWidth}
              strokeDasharray={innerCircumference}
              strokeDashoffset={innerProgressOffset}
              strokeLinecap="round"
              transform="rotate(-90 50 50)"
              initial={{ strokeDashoffset: innerCircumference }}
              // Animate stroke color change along with offset
              animate={{
                strokeDashoffset: innerProgressOffset,
                stroke: isInnerActive ? colors.progressActive : colors.progressInactive
              }}
              transition={{ duration: 0.5, ease: "easeInOut" }}
            />
          </svg>

          {/* Center Text & Trend Indicator (Based on activeView) */}
          <div className="absolute inset-0 flex flex-col items-center justify-center text-center pointer-events-none">
            <div className="flex items-baseline justify-center gap-1">
              <span className="text-3xl font-bold" style={{ color: colors.textPrimary }}>
                {displayData.rate}%
              </span>
              <AnimatePresence mode="wait" initial={false}>
                <motion.span
                  key={activeView} // Animate when activeView changes
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -5 }}
                  transition={{ duration: 0.2 }}
                >
                  {displayData.trend === "down" ? (
                    // <ArrowDown size={16} style={{ color: colors.trendDown }} />
                    <img src="/downArrow.png" alt="Down Arrow" className="w-3 h-3" />
                  ) : (
                    <img src="/upArrow.png" alt="Up Arrow" className="w-3 h-3" />
                  )}
                </motion.span>
              </AnimatePresence>
            </div>
            <span className="text-sm mt-1" style={{ color: colors.textSecondary }}>
              Returns
            </span>
          </div>
        </div>

        {/* Legend Area */}
        <div className="flex justify-center gap-5">
          {/* Without Embeds Legend Item (Corresponds to Outer Ring) */}
          <button
            onClick={() => setActiveView("without")}
            className={`flex items-center gap-2 cursor-pointer focus:outline-none transition-colors duration-200`}
            style={{ color: isOuterActive ? colors.textPrimary : colors.legendInactiveText }}
          >
            <span
              className="relative flex h-3 w-3 rounded-full border border-transparent"
              // Legend circle background reflects the *bright* active color if selected
              style={{ backgroundColor: isOuterActive ? colors.progressActive : colors.legendInactiveCircle }}
            >
              {/* Active state indicator border uses the bright color */}
              {isOuterActive && (
                 <span className="absolute -inset-0.5 rounded-full border" style={{ borderColor: colors.legendActiveHighlight }}></span>
              )}
            </span>
            <span className="text-xs">Without Embeds</span>
          </button>

          {/* With Embeds Legend Item (Corresponds to Inner Ring) */}
          <button
            onClick={() => setActiveView("with")}
            className={`flex items-center gap-2 cursor-pointer focus:outline-none transition-colors duration-200`}
             style={{ color: isInnerActive ? colors.textPrimary : colors.legendInactiveText }}
          >
             <span
               className="relative flex h-3 w-3 rounded-full border border-transparent"
               // Legend circle background reflects the *bright* active color if selected
               style={{ backgroundColor: isInnerActive ? colors.progressActive : colors.legendInactiveCircle }}
             >
               {/* Active state indicator border uses the bright color */}
               {isInnerActive && (
                 <span className="absolute -inset-0.5 rounded-full border" style={{ borderColor: colors.legendActiveHighlight }}></span>
               )}
            </span>
            <span className="text-xs">With Embeds</span>
          </button>
        </div>
      </CardContent>
    </Card>
  );
}

================
File: components/sales/total-sales.tsx
================
"use client";

import { useState } from "react";
import { MoreHorizontal, Calendar } from "lucide-react";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { format } from "date-fns";
import { Button } from "@/components/ui/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { ShimmerButton } from "@/components/magicui/shimmer-button"; // Ensure this path is correct
import { useApiData } from "@/hooks/use-api-data";
import { TotalSalesData } from "@/lib/data-service";

// --- Color Palette (Strictly from Target Image, with refinements) ---
const colors = {
  background: "#161618",
  cardBorder: "rgba(255, 255, 255, 0.4)",
  textPrimary: "#F4F4F5",
  textSecondary: "#A1A1AA",
  textMuted: "#71717A",
  textSubtle: "#52525B",

  dateRangeButtonBg: "#27272A",
  dateRangeButtonBorder: "rgba(255, 255, 255, 0.15)",

  badgeBg: "#27272A",
  badgeBorder: "rgba(255, 255, 255, 0.2)",
  // Specific color for "Best Sales of the Month" text from image
  badgeTextSpecial: "#EBB866", // Golden/Yellowish text

  // Progress Bar
  progressBarTrack: "#1D2B3A",
  progressBarFill: "#FFFFFF",
  progressBarGlow: "rgba(255, 255, 255, 0.7)",
  progressLabelPreviousWeek: "#2DD4BF",
  // Color for the subtle segment lines within the white progress bar fill
  progressBarSegmentLine: "rgba(0, 0, 0, 0.15)", // Dark subtle line

  // Stacked Bars
  barSocial: "#4B4A7A",
  barRedirect: "#3B82F6",
  barDirect: "#2DD4BF",

  separatorLine: "rgba(255, 255, 255, 0.3)",
  legendDotBorder: "rgba(255, 255, 255, 0.3)",
};

interface TotalSalesProps {
  dateRange: {
    from: Date;
    to: Date;
  };
}

export function TotalSales({ dateRange }: TotalSalesProps) {
  const { data, loading, error } = useApiData<TotalSalesData>({ endpoint: 'total-sales', dateRange });
  // Fallback data
  const fallback = {
    totalSales: 35248,
    previousWeekSales: 15230,
    progressPercent: 65,
    salesData: [
      { day: "Today", socialMedia: 33, redirectLinks: 37, directLogin: 30 },
      { day: "Jan 4", socialMedia: 30, redirectLinks: 40, directLogin: 30 },
      { day: "Jan 3", socialMedia: 38, redirectLinks: 28, directLogin: 34 },
    ],
  };
  const d = (error ? fallback : (data || fallback));
  if (loading) return <div className="text-gray-400">Loading total sales...</div>;

  // Show a subtle warning if fallback data is being used due to error
  const isFallback = error;

  const legendData = [
    { label: "Social Media", color: colors.barSocial },
    { label: "Redirect Links", color: colors.barRedirect },
    { label: "Direct Login", color: colors.barDirect },
  ];

  return (
    <Card
      className="rounded-2xl border p-5 shadow-xl font-[Inter,ui-sans-serif,system-ui]"
      style={{
        backgroundColor: colors.background,
        borderColor: colors.cardBorder,
        color: colors.textPrimary,
      }}
    >
      {/* Card Header */}
      <CardHeader className="flex flex-row items-center justify-between p-0 mb-5">
        <CardTitle className="text-xl font-light font-sans tracking-normal" style={{ color: colors.textPrimary }}> {/* Adjusted tracking */}
          Total Sales
        </CardTitle>
        <div className="flex items-center gap-2.5">
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline" size="sm"
                className="h-8 px-3 rounded-lg text-xs font-normal border focus:outline-none focus:ring-1 focus:ring-white/30 hover:bg-[#3f3f46]"
                style={{ backgroundColor: colors.dateRangeButtonBg, borderColor: colors.dateRangeButtonBorder, color: colors.textMuted }} >
                <Calendar className="mr-1.5 h-3.5 w-3.5" style={{ color: colors.textSecondary }} />
                {format(dateRange.from, "d MMM, yyyy")} - {format(dateRange.to, "d MMM, yyyy")}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0 border-none rounded-lg shadow-xl" style={{ backgroundColor: colors.dateRangeButtonBg }} align="end" >
              {/* Calendar Placeholder */}
            </PopoverContent>
          </Popover>
          <button className="focus:outline-none p-1 rounded-full hover:bg-[#27272A]" style={{ color: colors.textMuted }}>
            <MoreHorizontal size={18} />
          </button>
        </div>
      </CardHeader>

      {/* Subtle warning if fallback is used */}
      {isFallback && (
        <div className="mb-2 flex items-center gap-2 text-xs text-yellow-400">
          <span className="inline-block w-2 h-2 rounded-full bg-yellow-400 animate-pulse"></span>
          Offline mode: showing fallback data
        </div>
      )}

      {/* Card Content */}
      <CardContent className="p-0 space-y-5">
        {/* Sales Figure and Badge */}
        <div className="relative">
          <div
            className="absolute -top-3 -right-1 w-20 h-12 rounded-full opacity-60 pointer-events-none"
            style={{ background: `radial-gradient(${colors.progressBarGlow}, transparent 65%)`, filter: "blur(18px)", zIndex: 0 }} />
          <div className="flex items-end justify-between">
            <h3 className="text-3xl font-semibold font-sans leading-none tracking-tight" style={{ color: colors.textPrimary }}> {/* Increased font weight, adjusted tracking */}
              INR {d.totalSales.toLocaleString("en-IN")}
            </h3>
            <ShimmerButton
              className="relative z-10 inline-flex items-center justify-center rounded-full border text-xs font-medium px-3 py-1"
              style={{ backgroundColor: colors.badgeBg, borderColor: colors.cardBorder, color: colors.badgeTextSpecial }} // Applied special text color
              shimmerColor="#ffffff" shimmerSize="0.08em" shimmerDuration="3.5s" >
              Best Sales of the Month
            </ShimmerButton>
          </div>
          <div className="flex justify-between text-[11px] mt-1.5 tracking-wide" style={{ color: colors.textSecondary }}> {/* Added tracking */}
            <span>{format(dateRange.from, "MMM d, yyyy")}</span>
            <span>Revenue till {format(dateRange.to, "MMM d, yyyy")}</span>
          </div>
        </div>

        {/* Progress Bar Section */}
        <div className="space-y-1.5 pt-1">
          {/* <hr className="border-t" style={{ borderColor: colors.separatorLine }} /> */}
          <div className="relative w-full h-2.5 rounded-full overflow-hidden mt-3" style={{ backgroundColor: colors.progressBarTrack }}>
            {/* White Progress Bar with Segments */}
            <motion.div
              className="h-full rounded-full relative flex items-center" // Added relative and flex for segment lines
              style={{ backgroundColor: colors.progressBarFill }}
              initial={{ width: "0%" }}
              animate={{ width: `${d.progressPercent}%` }}
              transition={{ duration: 1.2, ease: [0.4, 0, 0.2, 1] }}
            >
                {/* Simulate subtle segment lines within the white bar if progressPercent > 0 */}
                {/* These are decorative and approximate the look */}
                {d.progressPercent > 25 && <div className="absolute left-[25%] top-0 bottom-0 w-px" style={{backgroundColor: colors.progressBarSegmentLine}}></div>}
                {d.progressPercent > 50 && <div className="absolute left-[50%] top-0 bottom-0 w-px" style={{backgroundColor: colors.progressBarSegmentLine}}></div>}
                {d.progressPercent > 75 && <div className="absolute left-[75%] top-0 bottom-0 w-px" style={{backgroundColor: colors.progressBarSegmentLine}}></div>}
            </motion.div>

            {/* Progress Bar Glow */}
            <motion.div
              className="absolute top-1/2 -translate-y-1/2 h-[120%] w-5 rounded-full pointer-events-none"
              style={{ backgroundColor: colors.progressBarGlow, filter: 'blur(5px)', left: `${d.progressPercent}%`, transform: 'translate(-70%, -50%)', opacity: 0.9 }}
              initial={{ left: "0%", opacity: 0 }}
              animate={{ left: `${d.progressPercent}%`, opacity: 0.9 }}
              transition={{ duration: 1.2, ease: [0.4, 0, 0.2, 1] }} />
          </div>
          
          <div className="relative w-full flex justify-center -mt-1">
            <span className="text-[10px] font-medium px-2 py-0.5 rounded tracking-normal" style={{ color: colors.progressLabelPreviousWeek, backgroundColor: colors.background }}> {/* Adjusted tracking */}
                Previous Week
            </span>
          </div>
          <hr className="border-t" style={{ borderColor: colors.separatorLine }} />
          <div className="flex justify-between text-base font-semibold pt-1.5 tracking-tight" style={{ color: colors.textPrimary }}> {/* Increased font size, weight, adjusted tracking */}
            <span className="font-medium text-sm" style={{ color: colors.textSubtle }}>Previous Week</span> {/* Adjusted this label style slightly */}
            <span>INR {d.previousWeekSales.toLocaleString("en-IN")}</span>
          </div>
        </div>

        {/* Daily Breakdown Bars */}
        <div className="space-y-2.5 pt-3">
          {d.salesData.map((item, index) => {
            const total = item.socialMedia + item.redirectLinks + item.directLogin;
            const socialPercent = total === 0 ? 0 : (item.socialMedia / total) * 100;
            const redirectPercent = total === 0 ? 0 : (item.redirectLinks / total) * 100;
            const directPercent = total === 0 ? 0 : (item.directLogin / total) * 100;

            return (
              <div key={item.day} className="flex items-center gap-3">
                <span className="w-12 text-xs text-right flex-shrink-0 font-medium tracking-normal" style={{ color: colors.textSecondary }}> {/* Adjusted tracking */}
                  {item.day}
                </span>
                <div className="flex-1 h-3.5 rounded-full overflow-hidden flex">
                  <motion.div style={{ backgroundColor: colors.barSocial, width: `${socialPercent}%` }} className="h-full"
                    initial={{ width: "0%"}} animate={{ width: `${socialPercent}%`}} transition={{ duration: 0.8, ease: "easeOut", delay: 0.1 * index }} />
                  <motion.div style={{ backgroundColor: colors.barRedirect, width: `${redirectPercent}%` }} className="h-full"
                     initial={{ width: "0%"}} animate={{ width: `${redirectPercent}%`}} transition={{ duration: 0.8, ease: "easeOut", delay: 0.1 * index + 0.05 }} />
                  <motion.div style={{ backgroundColor: colors.barDirect, width: `${directPercent}%` }} className="h-full"
                     initial={{ width: "0%"}} animate={{ width: `${directPercent}%`}} transition={{ duration: 0.8, ease: "easeOut", delay: 0.1 * index + 0.1 }} />
                </div>
              </div> );
          })}
        </div>

        {/* Legend */}
        <div className="flex justify-end gap-3.5 pt-2 pr-2">
          {legendData.map((item) => (
            <div key={item.label} className="flex items-center gap-1.5">
              <span className="relative flex h-2.5 w-2.5">
                 <span className="relative inline-flex rounded-full h-full w-full border" style={{backgroundColor: item.color, borderColor: colors.legendDotBorder }}></span>
              </span>
              <span className="text-[11px] tracking-normal" style={{ color: colors.textSecondary }}> {/* Adjusted tracking */}
                {item.label}
              </span>
            </div> ))}
        </div>
      </CardContent>
    </Card>
  );
}

================
File: components/sales/traffic-analysis-sales.tsx
================
"use client";

import { MoreHorizontal } from "lucide-react";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import React from "react"; // Import React for fragment usage
import { useApiData } from "@/hooks/use-api-data";
import { TrafficAnalysisData } from "@/lib/data-service";

// Data based on the image
const chartData = [
  { name: "New Customers", value: 80, color: "#1E3A8A" }, // Dark Blue
  { name: "Returning Customers", value: 20, color: "#F59E0B" }, // Orange/Amber
];

// Define colors based on the image analysis
const colors = {
  background: "#161618",
  cardBorder: "rgba(255, 255, 255, 0.4)", // Slightly reduced border opacity from image analysis
  textPrimary: "#FFFFFF",
  textSecondary: "#A1A1AA", // Lighter gray for secondary/legend text
  textMuted: "#6B7280", // Muted gray for 'By' in center
  iconMuted: "#6B7280",
  segmentLabel: "#E5E7EB", // Light gray/off-white for segment %
  // Added background color for the percentage labels
  labelBackground: "rgba(0, 0, 0, 0.35)", // Dark transparent background
  // Segment colors are defined in chartData
};

// SVG Donut properties
const radius = 40;
const circumference = 2 * Math.PI * radius; // Approx 251.2
const strokeWidth = 18; // Wider stroke for the donut look

interface TrafficAnalysisProps {
  dateRange: {
    from: Date;
    to: Date;
  };
}

export function TrafficAnalysis({ dateRange }: TrafficAnalysisProps) {
  const { data, loading, error } = useApiData<TrafficAnalysisData>({ endpoint: 'traffic-analysis-sales', dateRange });
  const fallback = { chartData: [
    { name: "New Customers", value: 80, color: "#1E3A8A" },
    { name: "Returning Customers", value: 20, color: "#F59E0B" },
  ]};
  const d = data || fallback;
  if (loading) return <div className="text-gray-400">Loading traffic analysis...</div>;
  if (error) return <div className="text-yellow-400">Showing fallback data (offline mode)</div>;
  if (!Array.isArray(chartData) || chartData.length === 0) {
    return <div className="text-gray-500">No traffic analysis data available</div>;
  }
  let accumulatedAngle = -90; // Start angle (top)

  return (
    <Card
      className="rounded-2xl border p-6 shadow-xl h-full flex flex-col"
      style={{
        backgroundColor: colors.background,
        borderColor: colors.cardBorder,
        color: colors.textPrimary,
      }}
    >
      {/* Card Header */}
      <CardHeader className="flex flex-row items-center justify-between p-0 mb-6">
        {/* Adjusted Title styling */}
        <CardTitle className="text-xl font-light font-sans text-white" style={{ color: colors.textPrimary }}>
          Traffic Analysis
        </CardTitle>
        <button className="focus:outline-none" style={{ color: colors.iconMuted }}>
          <MoreHorizontal size={20} />
        </button>
      </CardHeader>

      {/* Card Content */}
      <CardContent className="p-0 flex-grow flex flex-col items-center justify-center">
        {/* Chart Area */}
        <div className="relative w-52 h-52 mb-6">
          {/* SVG Container */}
          <svg className="w-full h-full" viewBox="0 0 100 100">
            {/* Render segments - IMPORTANT: Render orange (smaller %) BEFORE blue (larger %) for overlap */}
            {/* Sort data to render smaller value first */}
            {[...chartData].sort((a, b) => a.value - b.value).map((segment, index) => {
              const percentage = segment.value;
              const segmentAngle = (percentage / 100) * 360;
              const startAngle = accumulatedAngle;
              const midAngle = startAngle + segmentAngle / 2;

              const segmentOffset = circumference - (circumference * percentage) / 100;

              // Calculate label position
              const labelRadius = radius; // Position label on the stroke
              const labelX = 50 + labelRadius * Math.cos((midAngle * Math.PI) / 180);
              const labelY = 50 + labelRadius * Math.sin((midAngle * Math.PI) / 180);

              // Update accumulated angle for the next segment's start
              accumulatedAngle += segmentAngle;

              return (
                // Using React.Fragment to group SVG elements per segment
                <React.Fragment key={segment.name}>
                  {/* Donut Segment */}
                  <motion.circle
                    cx="50"
                    cy="50"
                    r={radius}
                    fill="none"
                    stroke={segment.color}
                    strokeWidth={strokeWidth}
                    strokeDasharray={circumference}
                    strokeDashoffset={circumference} // Start fully hidden
                    strokeLinecap="butt" // Use butt for sharp overlap edges
                    transform={`rotate(${startAngle} 50 50)`} // Rotate to start position
                    initial={{ strokeDashoffset: circumference }}
                    animate={{ strokeDashoffset: segmentOffset }}
                    transition={{
                      duration: 1,
                      ease: "easeInOut",
                      delay: index * 0.2,
                    }}
                  />

                  {/* Transparent Oval Background for Label */}
                  <motion.rect
                  // position the rect so it's centered on (labelX, labelY)
                  x={labelX - 12}         // half of your desired width (e.g. 28/2)
                  y={labelY - 7.5}          // half of your desired height (e.g. 16/2)
                  width={24}              // total width of the pill
                  height={15}             // total height of the pill
                  rx={7.5}                  // corner radius = half the height for a perfect pill
                  ry={7.5}
                  fill={colors.labelBackground}  // same semi-transparent white/gray
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 0.4 }}
                  transition={{ delay: 1 + index * 0.2 }}
                />

                   {/* Segment Percentage Label */}
                   <motion.text
                      x={labelX}
                      y={labelY}
                      fill={colors.segmentLabel}
                      fontSize="7" // Reduced font size
                      fontWeight="medium" // Adjusted font weight
                      textAnchor="middle"
                      dominantBaseline="central"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 1 + index * 0.2 }} // Delay until segment draws
                    >
                      {`${percentage}%`}
                    </motion.text>
                </React.Fragment>
              );
            })}

            {/* Center Text - Adjusted font size and weight */}
            <text x="50" y="50" textAnchor="middle" dominantBaseline="middle">
              <tspan x="50" dy="-0.6em" fontSize="8" fill={colors.textMuted}> {/* Adjusted size/position */}
                By
              </tspan>
              <tspan x="50" dy="1.2em" fontSize="8" fontWeight="normal" fill={colors.textPrimary}> {/* Adjusted size/weight */}
                Customer
              </tspan>
              <tspan x="50" dy="1.2em" fontSize="8" fontWeight="normal" fill={colors.textPrimary}> {/* Adjusted size/weight */}
                Types
              </tspan>
            </text>
          </svg>
        </div>

        {/* Legend Area */}
        <div className="flex justify-center gap-5 pt-2">
          {chartData.map((item) => (
            <div key={item.name} className="flex items-center gap-2">
              <span className="relative flex h-3 w-3">
                 {/* Background color circle */}
                 <span className="absolute inset-0 rounded-full" style={{ backgroundColor: item.color }}></span>
                 {/* Subtle border matching the color */}
                 <span className="absolute -inset-0.5 rounded-full border" style={{ borderColor: item.color }}></span>
              </span>
              <span className="text-xs" style={{ color: colors.textSecondary }}>
                {item.name}
              </span>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}

================
File: components/sku/interaction-duration.tsx
================
"use client";

import React, { useState } from "react";
import { Calendar, MoreHorizontal, ArrowUp } from "lucide-react";
import { motion } from "framer-motion";
import {
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  DotProps,
} from "recharts";
import { format } from "date-fns";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
import { useApiData } from "@/hooks/use-api-data";
import type { InteractionDurationData } from '@/lib/data-service';

// --- Color Palette (Based on Target Image) ---
const colors = {
    background: "#161618",
    cardBorder: "rgba(255, 255, 255, 0.4)",
    textPrimary: "#F4F4F5", // For main values in tooltip and title
    textSecondary: "#A1A1AA", // For axis labels, legend, "over last week"
    textMuted: "#71717A", // For date range button text
    gridLine: "rgba(255, 255, 255, 0.08)",

    dateRangeButtonBg: "#27272A",
    dateRangeButtonBorder: "rgba(255, 255, 255, 0.15)",

    // Line colors from the target image
    lineSkuInteraction: "#22D3EE", // Bright Cyan
    lineSiteAverage: "#0D9488",   // Darker Teal/Green

    tooltipBg: "#1C1C1E", // Dark, slightly desaturated background
    tooltipBorder: "rgba(255, 255, 255, 0.1)", // Fainter border for tooltip
    trendUp: "#34D399",
    trendDown: "#EF4444", // Red for trend
    activeDotFill: "#FFFFFF", // White fill for the inner part of the active dot
    // activeDotBorder will be the line color itself
};

const fallbackData: InteractionDurationData = {
  data: [
    { day: "1", unique: 50, total: 20, prevUnique: 45, prevTotal: 18 },
    { day: "2", unique: 100, total: 95, prevUnique: 48, prevTotal: 90 },
    { day: "3", unique: 30, total: 20, prevUnique: 105, prevTotal: 22 },
    { day: "4", unique: 20, total: 90, prevUnique: 28, prevTotal: 85 },
    { day: "5", unique: 120, total: 110, prevUnique: 18, prevTotal: 105 },
    { day: "6", unique: 70, total: 60, prevUnique: 115, prevTotal: 65 },
    { day: "7", unique: 10, total: 75, prevUnique: 75, prevTotal: 70 },
  ]
};

// --- Custom Tooltip Content (Top Tooltip) ---
type TooltipProps = { active?: boolean; payload?: any[]; label?: string; data: InteractionDurationData['data'] };
const CustomInteractionTooltip = ({ active, payload, label, data }: TooltipProps) => {
  if (active && payload && payload.length && label) {
    const dataPoint = payload[0];
    const currentValue = dataPoint.value;
    const seriesNameKey = dataPoint.dataKey as "unique" | "total";
    const originalDataPoint = data.find((row) => row.day === label);
    let trendPercent = 0;
    if (originalDataPoint) {
      const prevValue = seriesNameKey === 'unique' ? originalDataPoint.prevUnique : originalDataPoint.prevTotal;
      if (prevValue && prevValue !== 0) {
        trendPercent = Math.round(((currentValue - prevValue) / prevValue) * 100);
      }
    }
    return (
      <div
        className="rounded-md border shadow-lg p-2 min-w-[130px]"
        style={{
          backgroundColor: colors.tooltipBg,
          borderColor: colors.tooltipBorder,
          color: colors.textPrimary,
        }}
      >
        <p className="text-base font-semibold mb-0.5">{currentValue.toLocaleString()} seconds</p>
        {trendPercent !== 0 && (
            <div className="flex items-center text-[11px]" style={{ color: trendPercent > 0 ? colors.trendUp : colors.trendDown }}>
                {trendPercent > 0 ? <ArrowUp size={9} className="mr-0.5" /> : <ArrowUp size={9} className="mr-0.5 transform rotate-180" />}
                {Math.abs(trendPercent)}%
                <span className="ml-1 text-[9px]" style={{ color: colors.textSecondary }}>over last week</span>
            </div>
        )}
      </div>
    );
  }
  return null;
};

// --- Custom Active Dot ---
const CustomActiveDot = (props: DotProps & { stroke?: string, dataKey?: string }) => {
    const { cx, cy, stroke, dataKey } = props;
    // The outer ring of the dot takes the color of the line
    const dotStrokeColor = stroke || (dataKey === 'unique' ? colors.lineSkuInteraction : colors.lineSiteAverage);

    if (cx == null || cy == null) return null; // Guard against undefined coords

    return (
        <g>
            {/* Outer colored ring */}
            <circle cx={cx} cy={cy} r={5} fill={dotStrokeColor} stroke="none" />
            {/* Inner white dot */}
            <circle cx={cx} cy={cy} r={2.5} fill={colors.activeDotFill} stroke="none" />
        </g>
    );
};


export function InteractionDuration() {
  const [range, setRange] = useState({
    from: new Date(2025, 0, 1),
    to:   new Date(2025, 0, 7),
  });
  const [activeKey, setActiveKey] = useState<"unique" | "total" | null>("unique");
  const { data, loading, error } = useApiData<InteractionDurationData>({ endpoint: 'interaction-duration', dateRange: range });
  const d: InteractionDurationData = (error ? fallbackData : (data || fallbackData));
  const isFallback = error;

  if (loading) return <div className="text-gray-400">Loading interaction duration...</div>;

  return (
    <Card
        className="rounded-2xl border p-6 shadow-xl h-full flex flex-col font-[Inter,ui-sans-serif,system-ui]"
        style={{ backgroundColor: colors.background, borderColor: colors.cardBorder, color: colors.textPrimary }}
    >
      <CardHeader className="flex flex-row items-center justify-between p-0 mb-5"> {/* Adjusted mb */}
        <CardTitle className="text-xl font-light font-sans tracking-normal" style={{ color: colors.textPrimary }}> {/* Adjusted font */}
            Interaction Session Duration
        </CardTitle>
        <div className="flex items-center gap-2.5">
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" size="sm" className="h-8 px-3 rounded-lg text-xs font-normal border focus:outline-none focus:ring-1 focus:ring-white/30 hover:bg-[#3f3f46]" style={{ backgroundColor: colors.dateRangeButtonBg, borderColor: colors.dateRangeButtonBorder, color: colors.textMuted }} >
                <Calendar className="mr-1.5 h-3.5 w-3.5" style={{ color: colors.textSecondary }} />
                {format(range.from, "d MMM, yyyy")} – {format(range.to, "d MMM, yyyy")}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0 bg-[#1C1C1E] border-[#3A3A3A] rounded-lg shadow-xl" align="end">
              <div className="p-2 text-xs">Date Picker Placeholder</div>
              {/* <DateRangePicker date={range} onDateChange={setRange} /> */}
            </PopoverContent>
          </Popover>
          <button className="focus:outline-none p-1 rounded-full hover:bg-[#27272A]" style={{ color: colors.textMuted }}>
            <MoreHorizontal size={18} />
          </button>
        </div>
      </CardHeader>

      {/* Subtle warning if fallback is used */}
      {isFallback && (
        <div className="mb-2 flex items-center gap-2 text-xs text-yellow-400">
          <span className="inline-block w-2 h-2 rounded-full bg-yellow-400 animate-pulse"></span>
          Offline mode: showing fallback data
        </div>
      )}

      <CardContent className="p-0 flex-grow flex flex-col">
        <div className="relative h-[280px]"> {/* Adjusted height */}
          <motion.div
            initial={{ opacity: 0 }} animate={{ opacity: 1 }}
            transition={{ duration: 0.6, ease: "circOut", delay: 0.1 }} className="h-full" >
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={d.data} margin={{ top: 40, right: 10, left: 5, bottom: 5 }}> {/* More top margin, less right/bottom */}
                <CartesianGrid stroke={colors.gridLine} strokeDasharray="0" horizontal={true} vertical={false} /> {/* Solid horizontal lines */}
                <XAxis
                  dataKey="day" axisLine={false} tickLine={false}
                  tick={{ fill: colors.textSecondary, fontSize: 10, fontWeight: 400 }} dy={10}
                  interval="preserveStartEnd" // Ensure first and last ticks are shown
                />
                <YAxis
                  axisLine={false} tickLine={false}
                  tick={{ fill: colors.textSecondary, fontSize: 10, fontWeight: 400 }}
                  domain={[0, 160]} ticks={[0, 40, 80, 120, 160]} // Match Y-axis from image
                  tickFormatter={v => `${v}s`} width={35}
                />
                <Tooltip
                  position={{ y: -55 }}
                  cursor={{ stroke: colors.textPrimary, strokeWidth: 0.5, strokeDasharray: '0' }}
                  content={(props) => <CustomInteractionTooltip {...props} data={d.data} />}
                  wrapperStyle={{ zIndex: 50, outline: 'none' }}
                  isAnimationActive={false}
                />
                <Line
                  type="monotone" dataKey="unique" stroke={colors.lineSkuInteraction}
                  strokeWidth={ activeKey === "unique" || activeKey === null ? 2.5 : 1.5 }
                  dot={false} activeDot={(props: DotProps & { stroke?: string, dataKey?: string }) => <CustomActiveDot {...props} stroke={colors.lineSkuInteraction} dataKey="unique" />}
                  style={{ opacity: activeKey === "total" ? 0.4 : 1, filter: activeKey === "unique" ? `drop-shadow(0px 0px 6px ${colors.lineSkuInteraction}99)` : "none" }} // Adjusted shadow
                  animationEasing="ease-out" animationDuration={800}
                />
                <Line
                  type="monotone" dataKey="total" stroke={colors.lineSiteAverage}
                  strokeWidth={ activeKey === "total" || activeKey === null ? 2.5 : 1.5 }
                  dot={false} activeDot={(props: DotProps & { stroke?: string, dataKey?: string }) => <CustomActiveDot {...props} stroke={colors.lineSiteAverage} dataKey="total"/>}
                  style={{ opacity: activeKey === "unique" ? 0.4 : 1, filter: activeKey === "total" ? `drop-shadow(0px 0px 6px ${colors.lineSiteAverage}99)` : "none" }} // Adjusted shadow
                  animationEasing="ease-out" animationDuration={800}
                />
              </LineChart>
            </ResponsiveContainer>
          </motion.div>
        </div>

        {/* Legend */}
        <div className="flex justify-center gap-5 mt-4 pt-1"> {/* Adjusted gap/margin */}
          {[
            { key: "unique", label: "Interaction with SKU", color: colors.lineSkuInteraction },
            { key: "total",  label: "Site Average",  color: colors.lineSiteAverage },
          ].map(series => {
            const isFaded = activeKey !== null && activeKey !== series.key;
            return (
              <button key={series.key} onClick={() => setActiveKey(prev => prev === series.key ? null : (series.key as any))}
                className={`flex items-center gap-1.5 text-xs transition-opacity duration-200 ${isFaded ? "opacity-50 hover:opacity-75" : "opacity-100"}`} // Adjusted opacity
                style={{ color: colors.textSecondary }} >
                <span className="w-2.5 h-2.5 rounded-full border" style={{ backgroundColor: series.color, borderColor: series.color }} /> {/* Border matches bg */}
                <span>{series.label}</span>
              </button> );
          })}
        </div>
      </CardContent>
    </Card>
  );
}

================
File: components/sku/sales-funnel-analysis.tsx
================
// src/components/dashboard/SalesFunnelAnalysisRefined.tsx (Example Path)

"use client";

import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Calendar, MoreHorizontal } from "lucide-react"; // Keep MoreHorizontal
import { format } from "date-fns";
import { motion } from "framer-motion";
import Image from "next/image"; // Import Image for trend arrows
import { useApiData } from "@/hooks/use-api-data";
import type { SalesFunnelData } from '@/lib/data-service';

// --- Color Palette (Based on Target Image Analysis) ---
const colors = {
    background: "#1A1A1A", // Main card background
    cardBorder: "rgba(255, 255, 255, 0.4)",
    textPrimary: "#F4F4F5", // Brightest text (values, main revenue)
    textSecondary: "#A1A1AA", // Subtitles, button text, inactive labels
    textMuted: "#71717A", // Dimmer text ('last week', 'Weekly Revenue')
    divider: "rgba(255, 255, 255, 0.6)", // White divider lines (more opaque)

    dateRangeButtonBg: "#27272A",
    dateRangeButtonBorder: "rgba(255, 255, 255, 0.15)",

    trendUp: "#34D399", // Green
    trendDown: "#F87171", // Red

    // Funnel stage colors from target image
    funnelStage1: "#0090FF", // Bright Blue
    funnelStage2: "#4DD7FE", // Lighter Cyan/Blue
    funnelStage3: "#16A085", // Teal Green 1
    funnelStage4: "#0D8072", // Teal Green 2 (Slightly darker)
    funnelStage5: "#065F46", // Darkest Teal Green

    percentLabelBg: "rgba(0, 0, 0, 0.3)", // Darker transparent bg for %
    percentLabelBorder: "rgba(255, 255, 255, 0.15)", // Fainter border for % label

    stageButtonBg: "#27272A",
    stageButtonBorder: "rgba(255, 255, 255, 0.15)",
    stageButtonText: "#A1A1AA", // Secondary color matches other labels
};

// --- Funnel Data (Matching the 5 visual stages) ---
const funnelData = [
    { value: "6.80k", percent: 100, change: null, color: colors.funnelStage1 },
    { value: "6.80k", percent: 71, change: -6, color: colors.funnelStage2 },
    { value: "5.75k", percent: 43, change: 2, color: colors.funnelStage3 },
    { value: "4.5k", percent: 27, change: 3, color: colors.funnelStage4 },
    { value: "3.5k", percent: 10, change: 3, color: colors.funnelStage5 }
];

// --- Bottom Stage Labels (4 labels for 5 stages) ---
const stageLabels = ["Impressions", "Interactions", "Add to Cart", "Conversions"];

const fallbackData: SalesFunnelData = {
  weeklyRevenue: 8459,
  stages: [
    { value: "6.80k", percent: 100, change: null, color: colors.funnelStage1 },
    { value: "6.80k", percent: 71, change: -6, color: colors.funnelStage2 },
    { value: "5.75k", percent: 43, change: 2, color: colors.funnelStage3 },
    { value: "4.5k", percent: 27, change: 3, color: colors.funnelStage4 },
    { value: "3.5k", percent: 10, change: 3, color: colors.funnelStage5 }
  ],
  unitsSold: 500,
};

// --- Component ---
export function SalesFunnelAnalysis() {
    const [dateRange] = useState({
        from: new Date(2025, 0, 1),
        to: new Date(2025, 0, 7),
    });
    const { data, loading, error } = useApiData<SalesFunnelData>({ endpoint: 'sales-funnel', dateRange });
    const d: SalesFunnelData = (error ? fallbackData : (data || fallbackData));
    const isFallback = error;

    // --- SVG Funnel Path Calculations ---
    const svgWidth = 1000;
    const svgHeight = 150; // Adjusted height for better vertical proportion
    const numStages = d.stages.length;
    const stageWidth = svgWidth / numStages;
    const maxStageHeight = 130; // Max height within SVG viewbox
    const topPadding = 10;
    const curveFactor = 0.45; // Fine-tuned curve factor

    const getPathData = (index: number) => {
        const stage = d.stages[index];
        const prevStagePercent = index === 0 ? 100 : d.stages[index - 1].percent;

        // Use percentages directly relative to max height for visual accuracy
        const currentHeight = maxStageHeight * (stage.percent / 100);
        const prevHeight = maxStageHeight * (prevStagePercent / 100);

        const startX = index * stageWidth;
        const endX = (index + 1) * stageWidth;

        const startYTop = topPadding + (maxStageHeight - prevHeight) / 2;
        const startYBottom = startYTop + prevHeight;
        const endYTop = topPadding + (maxStageHeight - currentHeight) / 2;
        const endYBottom = endYTop + currentHeight;

        const cp1X = startX + stageWidth * curveFactor;
        const cp2X = endX - stageWidth * curveFactor;

        // First stage is rectangular
        if (index === 0) {
            return `M ${startX},${startYTop} L ${endX},${endYTop} L ${endX},${endYBottom} L ${startX},${startYBottom} Z`;
        }

        // Subsequent stages use curves
        const dPath = `M ${startX},${startYTop}` +
                  ` C ${cp1X},${startYTop} ${cp2X},${endYTop} ${endX},${endYTop}` +
                  ` L ${endX},${endYBottom}` +
                  ` C ${cp2X},${endYBottom} ${cp1X},${startYBottom} ${startX},${startYBottom}` +
                  ` Z`;
        return dPath;
    };

    if (loading) return <div className="text-gray-400">Loading sales funnel analysis...</div>;

    return (
        <Card
            className="rounded-2xl border p-6 shadow-xl h-full flex flex-col font-[Inter,ui-sans-serif,system-ui]"
            style={{ backgroundColor: colors.background, borderColor: colors.cardBorder, color: colors.textPrimary }}
        >
            {/* Header */}
            <CardHeader className="flex flex-row items-center justify-between p-0 mb-4">
                <CardTitle className="text-xl font-light font-sans tracking-wide" style={{ color: colors.textPrimary }}>
                    Sales Funnel Analysis
                </CardTitle>
                <div className="flex items-center gap-3">
                    <Button variant="outline" size="sm" className="h-8 px-3 rounded-lg text-xs font-normal border focus:outline-none focus:ring-1 focus:ring-white/30 hover:bg-[#3f3f46]" style={{ backgroundColor: colors.dateRangeButtonBg, borderColor: colors.dateRangeButtonBorder, color: colors.textSecondary }} >
                        <Calendar className="mr-1.5 h-3.5 w-3.5" style={{ color: colors.textMuted }} />
                        {format(dateRange.from, "d MMM, yyyy")} - {format(dateRange.to, "d MMM, yyyy")}
                    </Button>
                    <button className="focus:outline-none p-1 rounded-full hover:bg-[#27272A]" style={{ color: colors.textMuted }}>
                        <MoreHorizontal size={18} />
                    </button>
                </div>
            </CardHeader>

            {/* Subtle warning if fallback is used */}
            {isFallback && (
              <div className="mb-2 flex items-center gap-2 text-xs text-yellow-400">
                <span className="inline-block w-2 h-2 rounded-full bg-yellow-400 animate-pulse"></span>
                Offline mode: showing fallback data
              </div>
            )}

            {/* Content */}
            <CardContent className="p-0 flex-grow flex flex-col">
                {/* Weekly Revenue */}
                <div className="mb-3">
                    <p className="text-[11px] font-medium uppercase tracking-wider" style={{ color: colors.textMuted }}>Weekly Revenue</p>
                    <p className="text-xl font-semibold" style={{ color: colors.textPrimary }}>INR {d.weeklyRevenue.toLocaleString("en-IN")}</p>
                </div>

                {/* Funnel Area */}
                <div className="relative flex-grow min-h-[240px] mb-4"> {/* Increased min-height slightly */}

                    {/* Top Labels (Values & Trends) - Refined Positioning */}
                    <div className="absolute top-0 left-0 right-0 flex items-start h-8 z-20 px-[1%]"> {/* Add slight horizontal padding */}
                        {d.stages.map((stage, index) => (
                            <div key={`label-group-${index}`}
                                 className="absolute top-0 flex items-center"
                                 // Position each group starting slightly before its stage visually
                                 style={{ left: `${(index * (100 / numStages)) + (index === 0 ? 1 : 2)}%`}} // Offset starting position
                                >
                                {/* Value */}
                                <span className="text-sm font-semibold" style={{ color: colors.textPrimary }}>
                                    {stage.value}
                                </span>
                                {/* Trend (Positioned next to value, only if change exists) */}
                                {stage.change !== null && (
                                    <div className={`flex items-center gap-0.5 text-[10px] font-medium whitespace-nowrap ml-1.5`} // Added margin-left
                                         style={{ color: stage.change > 0 ? colors.trendUp : colors.trendDown }}>
                                        {/* Use Image component for arrows */}
                                        <Image
                                            src={stage.change > 0 ? "/upArrow.png" : "/downArrow.png"}
                                            alt={stage.change > 0 ? "Up Arrow" : "Down Arrow"}
                                            width={8} // Adjust size as needed
                                            height={8}
                                            className="flex-shrink-0"
                                        />
                                        {Math.abs(stage.change)}%
                                        <span className="ml-1 font-normal text-[9px]" style={{ color: colors.textMuted }}>last week</span>
                                    </div>
                                )}
                            </div>
                        ))}
                    </div>

                    {/* SVG Funnel Shapes */}
                    <svg
                        viewBox={`0 0 ${svgWidth} ${svgHeight + topPadding * 2}`}
                        className="absolute inset-0 top-8 w-full h-[calc(100%-6rem)]" // Adjusted height calculation
                        preserveAspectRatio="none"
                    >
                        {/* Render Funnel Stages */}
                        {d.stages.map((stage, index) => (
                            <motion.path
                                key={`path-${index}`}
                                d={getPathData(index)}
                                fill={stage.color}
                                initial={{ opacity: 0 }} // Simpler initial state
                                animate={{ opacity: 1 }}
                                transition={{ duration: 0.6, delay: index * 0.08, ease: "easeOut" }} // Faster, subtle delay
                            />
                        ))}

                        {/* Vertical Divider Lines (Positioned at the end of each stage except last) */}
                        {d.stages.slice(0, numStages - 1).map((_, index) => {
                            const x = (index + 1) * stageWidth;
                             // Extend slightly beyond SVG viewbox for visual effect if needed, or use container height
                            const y1 = -5; // Start slightly above
                            const y2 = svgHeight + topPadding * 2 + 5; // End slightly below
                            return (
                                 <motion.line
                                    key={`divider-${index}`}
                                    x1={x} y1={y1} x2={x} y2={y2}
                                    stroke={colors.divider} strokeWidth="1" // Thinner divider
                                    initial={{ pathLength: 0, opacity: 0 }}
                                    animate={{ pathLength: 1, opacity: 1 }}
                                    transition={{ duration: 0.5, delay: 0.4 + index * 0.1 }}
                                 />
                            );
                        })}

                         {/* Percentage Labels Inside Funnel */}
                         {d.stages.map((stage, index) => {
                             const stageHeight = maxStageHeight * (stage.percent / 100);
                             const stageCenterY = topPadding + (maxStageHeight - stageHeight) / 2 + stageHeight / 2;
                             const stageCenterX = (index + 0.5) * stageWidth;
                             const labelWidth = 32; const labelHeight = 16; // Adjusted size

                             return (
                                <g key={`percent-label-${index}`}>
                                     <motion.rect
                                         x={stageCenterX - labelWidth / 2} y={stageCenterY - labelHeight / 2}
                                         width={labelWidth} height={labelHeight} rx="8" ry="8" // Fully rounded
                                         fill={colors.percentLabelBg} stroke={colors.percentLabelBorder} strokeWidth="0.5"
                                         initial={{ opacity: 0, scale: 0.5 }} animate={{ opacity: 1, scale: 1 }} transition={{ duration: 0.4, delay: 0.5 + index * 0.1 }} />
                                     <motion.text
                                         x={stageCenterX} y={stageCenterY + 0.5} // Slight Y adjustment for baseline
                                         fill={colors.textPrimary} fontSize="8" fontWeight="medium" textAnchor="middle" dominantBaseline="middle"
                                         initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.4, delay: 0.6 + index * 0.1 }} >
                                         {stage.percent}%
                                     </motion.text>
                                 </g> );
                         })}
                    </svg>

                    {/* Bottom Right: # Units Sold */}
                    <div className="absolute bottom-1 right-4 text-right z-10"> {/* Position lower */}
                        <p className="text-[11px]" style={{ color: colors.textMuted }}># Units Sold</p>
                        <p className="text-base font-semibold" style={{ color: colors.textPrimary }}>{d.unitsSold}</p>
                    </div>
                </div>

                {/* Stage Labels (Bottom) - Positioned under dividers */}
                 <div className="relative h-7 -mt-4"> {/* Container for bottom labels, slight negative margin */}
                    {stageLabels.map((label, index) => {
                         // Calculate center X position under the divider line
                         const dividerXPercent = ((index + 1) / numStages) * 100;
                         return (
                            <div key={label} className="absolute top-0 transform -translate-x-1/2"
                                 style={{ left: `${dividerXPercent}%` }}>
                                 <Button
                                     variant="outline" size="sm"
                                     className="h-6 px-3 rounded-full text-[11px] font-normal border hover:bg-[#3f3f46] focus:outline-none focus:ring-1 focus:ring-white/30"
                                     style={{ backgroundColor: colors.stageButtonBg, borderColor: colors.stageButtonBorder, color: colors.stageButtonText, }} >
                                     {label}
                                 </Button>
                             </div>
                         );
                     })}
                 </div>
            </CardContent>
        </Card>
    );
}

================
File: components/sku/sku-details.tsx
================
"use client";

import { useState } from "react";
import { Calendar, MoreHorizontal } from "lucide-react"; // Removed AlertCircle as we'll use custom
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Image from "next/image";
import { format } from "date-fns";
import { useApiData } from "@/hooks/use-api-data";
import type { SKUData } from '@/lib/data-service';

// Colors remain largely the same, slight tweaks if necessary based on re-evaluation
const colors = {
  background: "#161618",
  cardBorder: "rgba(255, 255, 255, 0.4)",
  textPrimary: "#FDFDFD",
  textSecondary: "#A1A1AA", // For labels like "SKU Name:"
  textMuted: "#808080",   // For "Daily Average" type labels in stats box
  dateRangeButtonBg: "#27272A",
  dateRangeButtonBorder: "rgba(255, 255, 255, 0.15)",
  dateRangeButtonText: "#D4D4D8",
  imageContainerBg: "#000000",
  statsBoxBorder: "rgba(255, 255, 255, 0.3)",
  statsSeparator: "rgba(255, 255, 255, 0.3)",
  statusAvailable: "#2DD4BF", // Teal/Green
  categoryTagBg: "#27272A",
  categoryTagBorder: "rgba(255, 255, 255, 0.3)", // Slightly more visible border for tags
  categoryTagText: "#A1A1AA",
  indicatorTagBg: "#27272A",
  indicatorTagBorder: "rgba(255, 255, 255, 0.3)", // Slightly more visible border for tags
  indicatorTagText: "#E4E4E7",
  iconHighCTR: "#2DD4BF",
  iconNeedsPromotion: "#FBBF24", // Amber/Yellow
  iconLowEngagement: "#60A5FA", // Blue
};

const fallbackSkuData: SKUData = {
  name: "Diamond Cut Earrings",
  id: "ID140001",
  stock: "Available",
  listed: "Yes",
  digitised: "Yes",
  price: 1050,
  categories: ["Earrings", "Diamond"],
  thisWeekSales: 8459,
  dailyAverage: 1650,
  conversionRate: 71,
  averageCTR: 2.3,
  imageSrc: "/diamond-earrings.png",
};

// Custom SVG Icon for High CTR (Target-like) - from previous version
const HighCTRIcon = ({ color = colors.iconHighCTR, size = 20 }) => ( // Increased size slightly
  <svg width={size} height={size} viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="10" cy="10" r="9" stroke={color} strokeWidth="1.8"/>
    <circle cx="10" cy="10" r="5.5" stroke={color} strokeWidth="1.8"/>
    <circle cx="10" cy="10" r="2" fill={color}/>
  </svg>
);


// Custom SVG Icon for Needs Promotion (Yellow circle with exclamation)
const NeedsPromotionIcon = ({ color = colors.iconNeedsPromotion, size = 20 }) => ( // Increased size slightly
  <svg width={size} height={size} viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="10" cy="10" r="9" fill={color}/>
    <path d="M10.0002 13.1667C10.4604 13.1667 10.8335 12.7936 10.8335 12.3333C10.8335 11.8731 10.4604 11.5 10.0002 11.5C9.54001 11.5 9.16687 11.8731 9.16687 12.3333C9.16687 12.7936 9.54001 13.1667 10.0002 13.1667Z" fill="white"/>
    <path d="M10.8335 10V6.66667H9.16687V10H10.8335Z" fill="white"/>
  </svg>
);

// Custom SVG Icon for Low Engagement (Zz) - from previous version
const LowEngagementZzIcon = ({ color = colors.iconLowEngagement, size = 22 }) => ( // Increased size slightly
  <svg width={size} height={size} viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
    <path d="M7.16191 5.83191L4 8.99382H5.99025L9.15217 5.83191H7.16191Z" fill={color}/>
    <path d="M10.1619 8.83191L7 11.9938H8.99025L12.1522 8.83191H10.1619Z" fill={color}/>
  </svg>
);

export function SkuDetails() {
  const [dateRange] = useState({
    from: new Date(2025, 0, 1),
    to: new Date(2025, 0, 7),
  });
  const { data, loading, error } = useApiData<SKUData>({ endpoint: 'sku-data', dateRange });
  const skuData: SKUData = (error ? fallbackSkuData : (data || fallbackSkuData));
  const isFallback = error;

  const detailItems = [
    { key: "name", label: "SKU Name:", value: skuData.name, valueColor: colors.textPrimary, valueFontWeight: "font-medium", multilineValue: true, maxWidth: "max-w-[170px]" },
    { key: "id", label: "SKU ID:", value: skuData.id, valueColor: colors.textPrimary, valueFontWeight: "font-medium" },
    { key: "stock", label: "Stock :", value: skuData.stock, valueColor: colors.statusAvailable, valueFontWeight: "font-medium" },
    { key: "listed", label: "Listed :", value: skuData.listed, valueColor: colors.statusAvailable, valueFontWeight: "font-medium" },
    { key: "digitised", label: "Digitised :", value: skuData.digitised, valueColor: colors.statusAvailable, valueFontWeight: "font-medium" },
  ];

  if (loading) return <div className="text-gray-400">Loading SKU details...</div>;

  return (
    <Card
      className="rounded-2xl border p-6 shadow-lg h-full flex flex-col font-sans"
      style={{
        backgroundColor: colors.background,
        borderColor: colors.cardBorder,
        color: colors.textPrimary,
      }}
    >
      <CardHeader className="flex flex-row items-center justify-between p-0 mb-6">
        <CardTitle className="text-2xl font-light font-sans tracking-wide" style={{ color: colors.textPrimary }}>
          SKU Details
        </CardTitle>
        <div className="flex items-center gap-3">
          <Button
            variant="outline"
            size="sm"
            className="h-9 px-3.5 rounded-lg text-sm font-normal border focus:outline-none focus:ring-1 focus:ring-gray-500 hover:bg-[#38383d]"
            style={{
              backgroundColor: colors.dateRangeButtonBg,
              borderColor: colors.dateRangeButtonBorder,
              color: colors.dateRangeButtonText,
            }}
          >
            <Calendar className="mr-2 h-4 w-4" style={{ color: colors.textSecondary }} />
            {format(dateRange.from, "dd, MMM, yyyy")} - {format(dateRange.to, "dd, MMM, yyyy")}
          </Button>
          <button className="focus:outline-none p-1" style={{ color: colors.textSecondary }}>
            <MoreHorizontal size={24} />
          </button>
        </div>
      </CardHeader>

      {/* Subtle warning if fallback is used */}
      {isFallback && (
        <div className="mb-2 flex items-center gap-2 text-xs text-yellow-400">
          <span className="inline-block w-2 h-2 rounded-full bg-yellow-400 animate-pulse"></span>
          Offline mode: showing fallback data
        </div>
      )}

      <CardContent className="p-0 flex-grow flex flex-col">
        <div className="flex flex-col md:flex-row gap-x-6 lg:gap-x-8 mb-6"> {/* Adjusted gap */}
          
          {/* Left Column: Image + Stats Box */}
          {/* Fixed width for this column to match image proportion */}
          <div className="w-full md:w-[280px] flex flex-col gap-5 flex-shrink-0">
            {/* Adjusted height for image container */}
            <div 
              className="h-[220px] w-full rounded-xl overflow-hidden flex items-center justify-center"
              style={{ backgroundColor: colors.imageContainerBg }}
            >
              <Image
                src={skuData.imageSrc}
                alt={skuData.name}
                width={300}
                height={300}
                className="object-contain"
                priority
                onError={(e) => { (e.target as HTMLImageElement).src = 'https://via.placeholder.com/250?text=Image+Err'; }}
              />
            </div>

            <div
              className="rounded-xl border p-4 flex flex-col"
              style={{ borderColor: colors.statsBoxBorder, backgroundColor: colors.background }}
            >
              <div className="flex justify-between items-baseline mb-2">
                <span className="text-sm font-light" style={{ color: colors.textSecondary }}>This Week</span>
                <span className="text-xl font-semibold text-sans" style={{ color: colors.textPrimary }}>
                  INR {skuData.thisWeekSales.toLocaleString("en-IN")}
                </span>
              </div>
              <hr className="border-t my-2" style={{ borderColor: colors.statsSeparator }} />
              <div className="flex justify-between items-center p-0.5">
                <div className="text-center">
                  <span className="block text-xs mb-0.5" style={{ color: colors.textMuted }}>Daily Average</span>
                  <span className="block text-sm font-light" style={{ color: colors.textPrimary }}>
                    INR {skuData.dailyAverage.toLocaleString("en-IN")}
                  </span>
                </div>
                <div className="text-center">
                  <span className="block text-xs mb-0.5" style={{ color: colors.textMuted }}>Conversion Rate</span>
                  <span className="block text-sm font-light" style={{ color: colors.textPrimary }}>
                    {skuData.conversionRate}%
                  </span>
                </div>
                 <div className="text-center">
                  <span className="block text-xs mb-0.5" style={{ color: colors.textMuted }}>Average CTR</span>
                  <span className="block text-sm font-light" style={{ color: colors.textPrimary }}>
                    {skuData.averageCTR}%
                  </span>
                </div>
              </div>
            </div>
          </div>

          {/* Right Column: SKU Details + Categories */}
          <div className="flex-1 flex flex-col pt-1 mt-4 md:mt-0">
             <div className="space-y-3"> {/* Adjusted vertical spacing */}
                {detailItems.map(item => (
                  <div className="flex items-start gap-2" key={item.key}>
                      <span className="w-24 text-xl text-light text-sans flex-shrink-0 pt-px" style={{color: colors.textSecondary}}>{item.label}</span>
                      <span 
                        className={`text-xl ${item.valueFontWeight} ${item.multilineValue ? 'leading-snug' : ''} ${item.maxWidth || ''}`}
                        style={{color: item.valueColor}}
                      >
                        {item.value}
                      </span>
                  </div>
                ))}
             </div>

             <div className="flex items-baseline gap-2 mt-4"> {/* Margin top for separation */}
                <span className="w-24 text-xl text-light text-sans flex-shrink-0 pt-px" style={{color: colors.textSecondary}}>Listing Price :</span>
                <span className="text-xl font-semibold" style={{color: colors.textPrimary}}>
                    INR {skuData.price.toLocaleString("en-IN")}
                </span>
            </div>

            <div className="mt-4"> {/* Margin top for separation */}
              <div className="flex items-start gap-2"> {/* items-start for alignment if categories wrap */}
                <span className="w-24 text text-light text-sans flex-shrink-0 pt-px" style={{ color: colors.textSecondary }}>Categories :</span>
                <div className="inline-flex flex-wrap gap-1.5">
                  {skuData.categories.map((category) => (
                    <span
                      key={category}
                      className="text-sm px-2.5 py-[3px] rounded-full border" // Adjusted padding for small tags
                      style={{
                        backgroundColor: colors.categoryTagBg,
                        borderColor: colors.categoryTagBorder,
                        color: colors.categoryTagText,
                      }}
                    >
                      {category}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Bottom Indicator Tags */}
        <div className="flex flex-col sm:flex-row gap-3 mt-auto pt-6"> {/* Increased pt */}
           {[
             { text: "High CTR", IconComponent: HighCTRIcon, iconColor: colors.iconHighCTR },
             { text: "Needs Promotion", IconComponent: NeedsPromotionIcon, iconColor: colors.iconNeedsPromotion },
             { text: "Low Engagement", IconComponent: LowEngagementZzIcon, iconColor: colors.iconLowEngagement },
           ].map(({ text, IconComponent, iconColor }) => (
             <div
               key={text}
               className="flex-1 flex items-center justify-center gap-2 border rounded-xl px-4 py-2 text-sm font-normal" // rounded-xl, font-normal
               style={{ 
                 backgroundColor: colors.indicatorTagBg, 
                 borderColor: colors.indicatorTagBorder,
                 color: colors.indicatorTagText,
               }}
             >
               <span>{text}</span>
               <IconComponent /> {/* Color and size are now default in SVG definition */}
             </div>
           ))}
        </div>
      </CardContent>
    </Card>
  );
}

================
File: components/sku/visitor-analysis.tsx
================
"use client";
import React, { useState } from "react"; 
import { MoreHorizontal } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { motion } from "framer-motion";
import { Instagram, Facebook, Zap as WhatsappIcon, Twitter as TikTokIcon } from "lucide-react"; 
import { useApiData } from "@/hooks/use-api-data";
import type { VisitorAnalysisData } from '@/lib/data-service';

// --- Color Palette (Based on Target Image) ---
const colors = {
    background: "#161618",
    cardBorder: "rgba(255, 255, 255, 0.4)",
    textPrimary: "#F4F4F5",
    textSecondary: "#A1A1AA",
    textMuted: "#71717A",
    tooltipBg: "#FFFFFF", 
    tooltipText: "#111113", 
    divider: "rgba(255, 255, 255, 0.1)", 
    cellLevel0: "#27272A", 
    cellLevel1: "#5F5DE6", 
    cellLevel2: "#7C7BFF", 
    cellLevel3: "#A09FFF", 
    gradientStart: "#27272A", 
    gradientMid: "#7C7BFF",   
    gradientEnd: "#A09FFF",   
};

// Custom Google Icon SVG
const GoogleIcon = ({size = 18, color = colors.textSecondary }) => (
    <svg width={size} height={size} viewBox="0 0 24 24" fill={color} xmlns="http://www.w3.org/2000/svg">
        <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
        <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
        <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
        <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
        <path d="M1 1h22v22H1z" fill="none"/>
    </svg>
);

const fallbackData: VisitorAnalysisData = {
  platforms: ["Instagram", "Google", "WhatsApp", "Facebook", "TikTok"],
  days: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
  heatmapData: {
    Instagram: [50, 120, 20, 400, 280, 150, 80],
    Google: [80, 20, 150, 15, 180, 90, 60],
    WhatsApp: [300, 10, 120, 160, 20, 70, 40],
    Facebook: [100, 130, 8, 420, 10, 140, 50],
    TikTok: [20, 80, 24, 380, 453, 290, 10],
  },
};

export function VisitorAnalysis() {
  const [dateRange] = useState({
    from: new Date(2025, 0, 1),
    to: new Date(2025, 0, 7),
  });
  const { data, loading, error } = useApiData<VisitorAnalysisData>({ endpoint: 'visitor-analysis', dateRange });
  const d: VisitorAnalysisData = (error ? fallbackData : (data || fallbackData));
  const isFallback = error;

  const [hoveredCell, setHoveredCell] = useState<{
    platform: string;
    day: string;
    value: number;
    x: number;
    y: number;
  } | null>(null);

  const socialMediaPlatforms = d.platforms;
  type Platform = typeof socialMediaPlatforms[number];

  const socialMediaIcons: Record<Platform, React.ReactNode> = {
    Instagram: <Instagram size={18} style={{ color: colors.textSecondary }}/>,
    Google: <GoogleIcon />,
    WhatsApp: <WhatsappIcon size={18} style={{ color: colors.textSecondary }}/>,
    Facebook: <Facebook size={18} style={{ color: colors.textSecondary }}/>,
    TikTok: <TikTokIcon size={18} style={{ color: colors.textSecondary }}/>,
  };

  const daysOfWeek = d.days;

  const heatmapDataValues: Record<Platform, number[]> = d.heatmapData;

  const heatmapColorLevels = socialMediaPlatforms.map(platform =>
    heatmapDataValues[platform].map(value => {
      if (value < 50) return 0;
      if (value < 150) return 1;
      if (value < 300) return 2;
      return 3;
    })
  );

  const getColorForLevel = (level: number) => {
    switch (level) {
      case 0: return colors.cellLevel0;
      case 1: return colors.cellLevel1;
      case 2: return colors.cellLevel2;
      case 3: return colors.cellLevel3;
      default: return colors.cellLevel0;
    }
  };

  const handleMouseEnter = (
    event: React.MouseEvent<HTMLDivElement>,
    platform: Platform,
    dayIndex: number
  ) => {
    const rect = event.currentTarget.getBoundingClientRect();
    setHoveredCell({
      platform: platform,
      day: daysOfWeek[dayIndex],
      value: heatmapDataValues[platform][dayIndex],
      x: rect.left + rect.width / 2,
      y: rect.top,
    });
  };

  const handleMouseLeave = () => {
    setHoveredCell(null);
  };

  if (loading) return <div className="text-gray-400">Loading visitor analysis...</div>;

  return (
    <Card
        className="rounded-2xl border p-6 shadow-lg h-full flex flex-col font-[Inter,ui-sans-serif,system-ui] overflow-visible" // FIX 6: Added overflow-visible
        style={{ backgroundColor: colors.background, borderColor: colors.cardBorder, color: colors.textPrimary }}
    >
      <CardHeader className="flex flex-row items-center justify-between p-0 mb-5">
        <CardTitle className="text-xl font-light font-sans tracking-normal" style={{ color: colors.textPrimary }}>
            Visitor Analysis
        </CardTitle>
        <button className="focus:outline-none p-1 rounded-full hover:bg-[#27272A]" style={{ color: colors.textMuted }}>
            <MoreHorizontal size={18} />
        </button>
      </CardHeader>

      {/* Subtle warning if fallback is used */}
      {isFallback && (
        <div className="mb-2 flex items-center gap-2 text-xs text-yellow-400">
          <span className="inline-block w-2 h-2 rounded-full bg-yellow-400 animate-pulse"></span>
          Offline mode: showing fallback data
        </div>
      )}

      <CardContent className="p-0 flex-grow flex flex-col relative">
        <div className="grid grid-cols-[auto_repeat(7,minmax(0,1fr))] gap-1.5">
          <div></div>
          {daysOfWeek.map((day) => (
            <div key={day} className="text-center text-[11px] font-medium py-1" style={{color: colors.textSecondary}}>
              {day}
            </div>
          ))}

          {socialMediaPlatforms.map((platform, platformIndex) => (
            <React.Fragment key={platform}>
              <div className="flex items-center justify-center h-9 w-9 my-auto">
                {socialMediaIcons[platform]}
              </div>
              {heatmapColorLevels[platformIndex].map((level, dayIndex) => (
                <motion.div
                  key={`${platform}-${dayIndex}`}
                  className="aspect-square rounded-md cursor-default flex items-center justify-center relative"
                  style={{ backgroundColor: getColorForLevel(level) }}
                  onMouseEnter={(e) => handleMouseEnter(e, platform, dayIndex)}
                  onMouseLeave={handleMouseLeave}
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.3, delay: (platformIndex * 7 + dayIndex) * 0.015, ease: "easeOut" }}
                >
                </motion.div>
              ))}
            </React.Fragment>
          ))}
        </div>

        <div className="mt-6 pt-4 border-t" style={{borderColor: colors.divider}}>
          <p className="text-xs font-medium mb-2" style={{color: colors.textSecondary}}>Total Visitors</p>
          <div className="w-full h-2.5 rounded-full"
               style={{ background: `linear-gradient(to right, ${colors.gradientStart}, ${colors.gradientMid}, ${colors.gradientEnd})` }}>
          </div>
          <div className="flex justify-between text-[10px] mt-1" style={{color: colors.textMuted}}>
            <span>{'<'} 100</span>
            <span>{'>'} 800</span>
          </div>
        </div>

        {hoveredCell && (
          <motion.div
            className="fixed p-2 rounded-md shadow-xl text-sm font-medium pointer-events-none" // FIX 6: Changed to 'fixed' for viewport positioning
            style={{
              backgroundColor: colors.tooltipBg,
              color: colors.tooltipText,
              left: hoveredCell.x, // x is already viewport-relative from getBoundingClientRect
              top: hoveredCell.y,  // y is already viewport-relative
              transform: 'translate(-50%, -115%)', // Position above and centered
              zIndex: 1000, // FIX 6: Increased z-index significantly
            }}
            initial={{ opacity: 0, y: 10, scale: 0.9 }} 
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 10, scale: 0.9 }}
            transition={{ duration: 0.2, ease: "easeOut" }}
          >
            <div className="absolute left-1/2 -translate-x-1/2 bottom-0 w-3 h-3 transform translate-y-[7px] rotate-45"
                 style={{ backgroundColor: colors.tooltipBg }}/>
            {hoveredCell.platform} : {hoveredCell.value.toLocaleString()}
          </motion.div>
        )}
      </CardContent>
    </Card>
  );
}

================
File: components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: components/ui/alert-dialog.tsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: components/ui/aspect-ratio.tsx
================
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/calendar.tsx
================
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/carousel.tsx
================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: components/ui/chart.tsx
================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: components/ui/command.tsx
================
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: components/ui/context-menu.tsx
================
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/drawer.tsx
================
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: components/ui/hover-card.tsx
================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: components/ui/input-otp.tsx
================
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/menubar.tsx
================
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: components/ui/pagination.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: components/ui/popover.tsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: components/ui/progress.tsx
================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: components/ui/radio-group.tsx
================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: components/ui/resizable.tsx
================
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: components/ui/sidebar.tsx
================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: components/ui/toaster.tsx
================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: components/ui/toggle-group.tsx
================
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: components/ui/toggle.tsx
================
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: components/ui/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: components/ui/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: components/date-range-picker.tsx
================
"use client"

import { Calendar } from "lucide-react"
import { format } from "date-fns"
import { Button } from "@/components/ui/button"
import { Calendar as CalendarComponent } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"

interface DateRangePickerProps {
  date: {
    from: Date
    to: Date
  }
  onDateChange: (date: { from: Date; to: Date }) => void
}

export function DateRangePicker({ date, onDateChange }: DateRangePickerProps) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          className="h-10 w-full sm:w-[280px] flex justify-center text-center font-normal bg-[#27272A] border border-transparent text-gray-300 hover:border-[#4F4F52] focus:bg-[#1F1F22] focus:border-[#4F4F52] focus:ring-0 rounded-md placeholder:text-gray-500"
        >
          <Calendar className="mr-2 h-4 w-4 flex-shrink-0" />
          <span className="truncate"> {/* To prevent text overflow on very small button widths */}
            {format(date.from, "d MMM, yyyy")} - {format(date.to, "d MMM, yyyy")}
          </span>
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0 bg-[#1A1A1A] border-[#2A2A2A]" align="end">
        <CalendarComponent
          initialFocus
          mode="range"
          defaultMonth={date.from}
          selected={{
            from: date.from,
            to: date.to,
          }}
          onSelect={(selectedDate) => {
            if (selectedDate?.from && selectedDate?.to) {
              onDateChange({
                from: selectedDate.from,
                to: selectedDate.to,
              })
            }
          }}
          numberOfMonths={2}
          className="bg-[#1A1A1A] text-white"
        />
      </PopoverContent>
    </Popover>
  )
}

================
File: components/header.tsx
================
import { Bell } from "lucide-react"
import Image from "next/image"
import { SignedIn, SignedOut, SignInButton, UserButton, useUser } from '@clerk/nextjs'

export function Header() {
  const { user } = useUser();
  return (
    <div className="flex items-center justify-end gap-6">
      <button className="relative p-2 rounded-full text-gray-400 hover:text-white hover:bg-[#27272A] transition-colors">
        <Bell size={20} />
        <span className="absolute top-1.5 right-1.5 w-2 h-2 bg-red-500 rounded-full border border-black"></span>
      </button>

      <div className="flex items-center gap-3">
        <div className="text-right">
          <p className="text-sm text-gray-400">Welcome back</p>
          <p className="font-medium text-white">
            {user ? (user.fullName || user.username || user.primaryEmailAddress?.emailAddress || "User") : ""}
          </p>
          {/* {user && user.primaryEmailAddress?.emailAddress && (
            <p className="text-xs text-gray-500">{user.primaryEmailAddress.emailAddress}</p>
          )} */}
        </div>
      </div>

      <SignedIn>
        <UserButton afterSignOutUrl="/auth" />
      </SignedIn>
      <SignedOut>
        <SignInButton mode="modal">
          <button className="px-4 py-2 rounded bg-[#27272A] text-white hover:bg-[#3F3F46] transition-colors">Login</button>
        </SignInButton>
      </SignedOut>
    </div>
  )
}

================
File: components/kpi-cards.tsx
================
"use client";

import dynamic from "next/dynamic";
import Image from "next/image";
import { useApiData } from "@/hooks/use-api-data";
import { KPIData } from "@/lib/data-service";

const Chart = dynamic(() => import("react-apexcharts"), { ssr: false });

interface KpiCardsProps {
  dateRange: {
    from: Date;
    to: Date;
  };
}

export function KpiCards({ dateRange }: KpiCardsProps) {
  const { data: kpiData, loading, error } = useApiData<KPIData>({
    endpoint: 'kpi',
    dateRange
  });

  if (loading) {
    return <KpiCardsSkeleton />;
  }

  if (error) {
    console.error('KPI Cards error:', error);
    return <div className="text-red-500">Error loading KPI data</div>;
  }

  if (!kpiData) {
    return <div className="text-gray-500">No KPI data available</div>;
  }

  const kpis = [
    {
      title: "Total Visits",
      value: kpiData.totalVisits.toLocaleString(),
      change: Math.abs(kpiData.totalVisitsChange),
      trend: kpiData.totalVisitsChange >= 0 ? "up" as const : "down" as const,
      period: "last week",
      data: generateSparklineData(30, 0.4),
    },
    {
      title: "Conversions",
      value: `${kpiData.conversions}`,
      change: Math.abs(kpiData.conversionsChange),
      trend: kpiData.conversionsChange >= 0 ? "up" as const : "down" as const,
      period: "last week",
      data: generateSparklineData(30, 0.6),
    },
    {
      title: "Bounce Rate",
      value: `${kpiData.bounceRate}%`,
      change: Math.abs(kpiData.bounceRateChange),
      trend: kpiData.bounceRateChange <= 0 ? "up" as const : "down" as const,
      period: "last week",
      data: generateSparklineData(30, 0.6),
    },
    {
      title: "Visit Duration",
      value: `${Math.floor(kpiData.avgDuration / 60)}m ${kpiData.avgDuration % 60}s`,
      change: Math.abs(kpiData.avgDurationChange),
      trend: kpiData.avgDurationChange >= 0 ? "up" as const : "down" as const,
      period: "last week",
      data: generateSparklineData(30, 0.5),
    },
  ];

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mt-8">
      {kpis.map((kpi, idx) => (
        <KpiCard key={idx} {...kpi} />
      ))}
    </div>
  );
}

function KpiCardsSkeleton() {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mt-8">
      {Array.from({ length: 4 }).map((_, idx) => (
        <div key={idx} className="bg-[#121212] rounded p-6 border-black animate-pulse">
          <div className="h-4 bg-gray-700 rounded w-20 mb-2"></div>
          <div className="h-8 bg-gray-700 rounded w-16 mb-4"></div>
          <div className="h-12 bg-gray-700 rounded"></div>
        </div>
      ))}
    </div>
  );
}

interface KpiCardProps {
  title: string;
  value: string;
  change: number;
  trend: "up" | "down";
  period: string;
  data: number[];
}

function KpiCard({ title, value, change, trend, period, data }: KpiCardProps) {
  const isUp = trend === "up";

  const lineColor = isUp ? "#C0AFE2" : "#EF4444";
  const fillToColor = isUp ? "#D8B4FE" : "#FECACA";

  const options: ApexCharts.ApexOptions = {
    chart: {
      type: "area",
      sparkline: { enabled: true },
      animations: { enabled: false },
    },
    stroke: {
      curve: "smooth",
      width: 3,
      colors: [lineColor],
    },
    fill: {
      type: "gradient",
      gradient: {
        shade: "dark",
        gradientToColors: [fillToColor],
        opacityFrom: 0.7,
        opacityTo: 0.1,
        stops: [0, 100],
      },
    },
    xaxis: {
      labels: { show: false },
      axisBorder: { show: false },
      axisTicks: { show: false },
    },
    yaxis: { show: false },
    tooltip: { enabled: false },
  };

  return (
    <div className="flex items-center justify-between bg-[#121212] rounded p-6 border-black overflow-hidden">
      <div>
        <p className="text-xs font-light text-gray-400">{title}</p>
        <p className="mt-1 text-3xl font-light text-white">{value}</p>
      </div>

      <div className="relative w-32 h-12 flex-shrink-0">
        <Chart
          options={options}
          series={[{ data }]}
          type="area"
          width="100%"
          height={48}
        />

        <div className="absolute top-1 right-2 flex flex-col items-end pointer-events-none">
          <div className="flex items-center gap-1">
            {isUp ? (
              <Image src="/upArrow.png" alt="Up" width={12} height={12} />
            ) : (
              <Image src="/downArrow.png" alt="Down" width={12} height={12} />
            )}
            <span className="text-lg font-semibold text-white">{change}%</span>
          </div>
          <span className="mt-0.5 text-[10px] text-gray-400 font-light">
            {period}
          </span>
        </div>
      </div>
    </div>
  );
}

function generateSparklineData(points: number, volatility: number) {
  let v = 50;
  const out: number[] = [];
  for (let i = 0; i < points; i++) {
    v += (Math.random() - 0.5) * volatility * 20;
    v = Math.max(0, Math.min(100, v));
    out.push(v);
  }
  return out;
}

================
File: components/search.tsx
================
import { SearchIcon } from "lucide-react"
import { Input } from "@/components/ui/input"

export function Search() {
  return (
    <div className="relative w-full">
      <SearchIcon className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-white" />
      <Input
        type="text"
        placeholder="Search in site"
        className="pl-4 pr-10 bg-[#27272A] border border-transparent text-gray-100 h-10 rounded-md focus:bg-[#1F1F22] focus:border-[#4F4F52] focus:ring-0 placeholder:text-white-500"
      />
    </div>
  )
}

================
File: components/sidebar.tsx
================
// Indicate this is a Client Component
"use client";

import type React from "react";
import Link from "next/link";
import Image from "next/image";
import { usePathname } from 'next/navigation';
import { Home, BarChart2, Package, LineChart, Menu, X } from "lucide-react";
import { useState, useEffect } from "react";
import { UserButton } from '@clerk/nextjs'

export function Sidebar() {
  const pathname = usePathname();
  // FIX 2: Initialize isMobile based on window presence for server-side rendering safety
  const [isMobile, setIsMobile] = useState(typeof window !== "undefined" ? window.innerWidth < 768 : false);
  // FIX 2: Default isCollapsed to true if mobile.
  const [isCollapsed, setIsCollapsed] = useState(typeof window !== "undefined" ? window.innerWidth < 768 : false);


  useEffect(() => {
    const checkMobile = () => window.innerWidth < 768;

    const handleResize = () => {
      const mobile = checkMobile();
      setIsMobile(mobile);
      if (!mobile) { // Desktop
        setIsCollapsed(false); // Always open on desktop
      } else {
        // On mobile, keep current state unless it's the initial load scenario
        // The initial load is handled by the useState default
      }
    };

    // Set initial state correctly after mount
    const initialMobile = checkMobile();
    setIsMobile(initialMobile);
    setIsCollapsed(initialMobile); // Collapse by default on initial mobile load

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <>
      {/* Hamburger menu toggle button - visible only on mobile */}
      <button 
        onClick={() => setIsCollapsed(!isCollapsed)}
        className="md:hidden fixed top-4 left-4 z-30 bg-zinc-800 p-2 rounded-md text-white"
        aria-label={isCollapsed ? "Open menu" : "Close menu"}
      >
        {/* FIX 2: If mobile and collapsed, show Menu icon to open. Otherwise (mobile and open), show X. */}
        {isMobile && isCollapsed ? <Menu size={24} /> : isMobile && !isCollapsed ? <X size={24} /> : null}
      </button>

      <div
        className={`
          ${isMobile ? (isCollapsed ? "translate-x-[-100%]" : "translate-x-0") : "translate-x-0"}
          w-64 min-h-screen bg-[#18181B] p-6 flex flex-col text-white relative
          rounded-tr-2xl rounded-br-2xl
          shadow-[0_0_30px_rgba(255,255,255,0.15),0_0_60px_rgba(255,255,255,0.08)]
          transition-transform duration-300 ease-in-out
          ${isMobile ? "fixed top-0 left-0 z-20" : ""}
        `}
      >
        <div
          className="pointer-events-none absolute inset-0 rounded-tr-2xl rounded-br-2xl"
          style={{
            background:
              "linear-gradient(to right, rgba(24,24,27,1) 0%, rgba(24,24,27,0) 10%, rgba(24,24,27,0) 90%, rgba(24,24,27,1) 100%)",
          }}
        />

        <div className="mb-10 mt-2 relative z-10">
          <Image
            src="/camarinlogo.svg"
            alt="Camarin Logo"
            width={120}
            height={28}
          />
        </div>

        <nav className="flex-1 space-y-2 relative z-10">
          <NavItem href="/" icon={<Home size={20} />} label="Dashboard" active={pathname === '/'} />
          <NavItem href="/sales" icon={<BarChart2 size={20} />} label="Sales" active={pathname === '/sales'} />
          <NavItem href="/sku" icon={<Package size={20} />} label="SKU" active={pathname === '/sku'} />
          <NavItem href="/insights" icon={<LineChart size={20} />} label="Insights" active={pathname === '/insights'} />
        </nav>

        <div className="mt-auto pt-4 relative z-10 flex justify-center">
          <UserButton afterSignOutUrl="/auth" appearance={{ elements: { userButtonAvatarBox: 'w-8 h-8', userButtonPopoverCard: 'bg-[#18181B] text-white' } }} />
        </div>
      </div>

      {/* Overlay backdrop for mobile, shown when sidebar is open */}
      {isMobile && !isCollapsed && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-10" // z-10 to be below sidebar (z-20)
          onClick={() => setIsCollapsed(true)}
          aria-hidden="true"
        />
      )}
    </>
  );
}

interface NavItemProps {
  href: string;
  icon: React.ReactNode;
  label: string;
  active?: boolean; 
}

function NavItem({ href, icon, label, active }: NavItemProps) {
  return (
    <Link href={href} className="relative block" passHref>
      {active && (
        <span
          aria-hidden="true"
          className="absolute inset-y-0 left-0 w-full rounded-l-full pointer-events-none"
          style={{
            background:
              "linear-gradient(90deg, rgba(255,255,255,0.6) 0%, rgba(255,255,255,0) 80%)",
            filter: "blur(12px)",
          }}
        />
      )}
      <div
        className={`
          relative flex items-center gap-3 px-4 py-2.5 transition-colors rounded-lg
          ${
            active
              ? `
                bg-[#3F3F46]
                text-white font-medium
                rounded-l-full rounded-r-none 
                shadow-[0_0_4px_#fff,0_0_8px_#fff]
              `
              : `
                text-gray-400 hover:text-gray-100 hover:bg-[#27272A]
              `
          }
        `}
      >
        <span className="relative z-10">{icon}</span>
        <span className="relative z-10 text-sm">{label}</span>
      </div>
    </Link>
  );
}

================
File: components/theme-provider.tsx
================
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

================
File: hooks/use-api-data.ts
================
import { useState, useEffect } from 'react';

interface DateRange {
  from: Date;
  to: Date;
}

interface UseApiDataOptions {
  dateRange?: DateRange;
  endpoint: string;
  params?: Record<string, string>;
}

interface UseApiDataReturn<T> {
  data: T | null;
  loading: boolean;
  error: string | null;
  refetch: () => Promise<void>;
}

export function useApiData<T>({ 
  dateRange, 
  endpoint, 
  params = {} 
}: UseApiDataOptions): UseApiDataReturn<T> {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);

      const urlParams = new URLSearchParams();
      
      if (dateRange) {
        urlParams.append('from', dateRange.from.toISOString());
        urlParams.append('to', dateRange.to.toISOString());
      }
      
      Object.entries(params).forEach(([key, value]) => {
        urlParams.append(key, value);
      });

      const response = await fetch(`/api/${endpoint}?${urlParams.toString()}`);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch data: ${response.statusText}`);
      }

      const result = await response.json();
      setData(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, [dateRange, endpoint, JSON.stringify(params)]);

  return { data, loading, error, refetch: fetchData };
}

================
File: hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: lib/data-service.ts
================
import { query, testConnection } from './db';

export interface DateRange {
  from: Date;
  to: Date;
}

export interface KPIData {
  totalVisits: number;
  totalVisitsChange: number;
  conversions: number;
  conversionsChange: number;
  bounceRate: number;
  bounceRateChange: number;
  avgDuration: number;
  avgDurationChange: number;
}

export interface SalesOverviewData {
  chartData: Array<{
    name: string;
    social: number;
    redirect: number;
    direct: number;
  }>;
  loadToOpportunity: number;
  opportunityToWin: number;
}

export interface TrafficAnalysisData {
  deviceData: Array<{ name: string; value: number; color: string }>;
  browserData: Array<{ name: string; value: number; color: string }>;
}

export interface WeeklyVisitorsData {
  data: Array<{ day: number; unique: number; total: number }>;
}

export interface RegionData {
  totalSales: number;
  salesChange: number;
  totalUnits: number;
  unitsChange: number;
  avgOrderValue: number;
  avgOrderValueChange: number;
  avgReturnRate: number;
  avgReturnRateChange: number;
  avgConversionRate: number;
  avgConversionRateChange: number;
  regions: Array<{ name: string; value: number; color: string }>;
  customerCounts: { newCustomers: number; returningCustomers: number };
  genderDistribution: { male: number; female: number };
}

export interface CustomerVolumeData {
  chartData: Array<{
    age: string;
    men: number;
    women: number;
  }>;
}

export interface SKUData {
  name: string;
  id: string;
  stock: string;
  listed: string;
  digitised: string;
  price: number;
  categories: string[];
  thisWeekSales: number;
  dailyAverage: number;
  conversionRate: number;
  averageCTR: number;
  imageSrc: string;
}

export interface VisitorAnalysisData {
  heatmapData: Record<string, number[]>;
  platforms: string[];
  days: string[];
}

export interface SalesFunnelData {
  weeklyRevenue: number;
  stages: Array<{
    value: string;
    percent: number;
    change: number | null;
    color: string;
  }>;
  unitsSold: number;
}

export interface InteractionDurationData {
  data: Array<{
    day: string;
    unique: number;
    total: number;
    prevUnique: number;
    prevTotal: number;
  }>;
}

export interface TotalSalesData {
  totalSales: number;
  previousWeekSales: number;
  progressPercent: number;
  salesData: Array<{
    day: string;
    socialMedia: number;
    redirectLinks: number;
    directLogin: number;
  }>;
}

export interface ConversionRatesData {
  chartData: Array<{
    withEmbeds: number;
    withoutEmbeds: number;
  }>;
}

export interface ReturnRatesData {
  without: { rate: number; trend: string };
  with: { rate: number; trend: string };
}

export interface EmbedAssistedRevenueData {
  data: Array<{ day: number; unique: number; total: number }>;
}

export class DataService {

  static async testDatabaseConnection(): Promise<boolean> {
    try {
      return await testConnection();
    } catch (error) {
      console.error('Database connection test failed:', error);
      return false;
    }
  }

  // Enhanced error handling wrapper
  private static async executeQuery<T>(
    queryFn: () => Promise<T>,
    fallbackData: T,
    queryName: string
  ): Promise<T> {
    try {
      return await queryFn();
    } catch (error) {
      console.error(`${queryName} query failed:`, error);
      console.warn(`Falling back to default data for ${queryName}`);
      return fallbackData;
    }
  }

  static async getKPIData(dateRange: DateRange): Promise<KPIData> {
    return this.executeQuery(
      async () => {
        // Validate date range
        if (!dateRange.from || !dateRange.to) {
          throw new Error('Invalid date range provided');
        }

        const currentWeekQuery = `
          SELECT 
            COALESCE(SUM(total_visits), 0) as total_visits,
            COALESCE(AVG(avg_duration), 0) as avg_duration,
            COALESCE(SUM(total_bounces)::float / NULLIF(SUM(total_visits), 0) * 100, 0) as bounce_rate
          FROM daily_visits_summary 
          WHERE bucket >= $1 AND bucket <= $2
        `;

        const previousWeekQuery = `
          SELECT 
            COALESCE(SUM(total_visits), 0) as total_visits,
            COALESCE(AVG(avg_duration), 0) as avg_duration,
            COALESCE(SUM(total_bounces)::float / NULLIF(SUM(total_visits), 0) * 100, 0) as bounce_rate
          FROM daily_visits_summary 
          WHERE bucket >= $1 AND bucket <= $2
        `;

        const currentWeekStart = dateRange.from;
        const currentWeekEnd = dateRange.to;
        const previousWeekStart = new Date(currentWeekStart.getTime() - 7 * 24 * 60 * 60 * 1000);
        const previousWeekEnd = new Date(currentWeekEnd.getTime() - 7 * 24 * 60 * 60 * 1000);

        const [currentResult, previousResult] = await Promise.all([
          query(currentWeekQuery, [currentWeekStart, currentWeekEnd]),
          query(previousWeekQuery, [previousWeekStart, previousWeekEnd])
        ]);

        const current = currentResult.rows[0] || {};
        const previous = previousResult.rows[0] || {};

        const conversionsQuery = `
          SELECT COALESCE(COUNT(*), 0)::int as conversions
          FROM sales_funnel_events 
          WHERE funnel_stage = 'conversion' 
          AND event_timestamp >= $1 AND event_timestamp <= $2
        `;

        const previousConversionsQuery = `
          SELECT COALESCE(COUNT(*), 0)::int as conversions
          FROM sales_funnel_events 
          WHERE funnel_stage = 'conversion' 
          AND event_timestamp >= $1 AND event_timestamp <= $2
        `;

        const [currentConversionsResult, previousConversionsResult] = await Promise.all([
          query(conversionsQuery, [currentWeekStart, currentWeekEnd]),
          query(previousConversionsQuery, [previousWeekStart, previousWeekEnd])
        ]);

        const currentConv = currentConversionsResult.rows[0]?.conversions || 0;
        const previousConv = previousConversionsResult.rows[0]?.conversions || 0;

        const currentTotalVisits = parseInt(current.total_visits) || 0;
        const previousTotalVisits = parseInt(previous.total_visits) || 0;
        const currentBounceRate = parseFloat(current.bounce_rate) || 0;
        const previousBounceRate = parseFloat(previous.bounce_rate) || 0;
        const currentAvgDuration = parseFloat(current.avg_duration) || 0;
        const previousAvgDuration = parseFloat(previous.avg_duration) || 0;

        return {
          totalVisits: currentTotalVisits,
          totalVisitsChange: previousTotalVisits ? 
            Math.round(((currentTotalVisits - previousTotalVisits) / previousTotalVisits) * 100) : 0,
          conversions: currentConv,
          conversionsChange: previousConv ? 
            Math.round(((currentConv - previousConv) / previousConv) * 100) : 0,
          bounceRate: Math.round(currentBounceRate),
          bounceRateChange: previousBounceRate ? 
            Math.round(((currentBounceRate - previousBounceRate) / previousBounceRate) * 100) : 0,
          avgDuration: Math.round(currentAvgDuration),
          avgDurationChange: previousAvgDuration ? 
            Math.round(((currentAvgDuration - previousAvgDuration) / previousAvgDuration) * 100) : 0,
        };
      },
      // Fallback data
      {
        totalVisits: 45231,
        totalVisitsChange: 12,
        conversions: 1205,
        conversionsChange: 8,
        bounceRate: 34,
        bounceRateChange: -5,
        avgDuration: 245,
        avgDurationChange: 15,
      },
      'KPI Data'
    );
  }

  static async getSalesOverviewData(dateRange: DateRange): Promise<SalesOverviewData> {
    const dailyTrafficQuery = `
      SELECT 
        EXTRACT(DOW FROM bucket) as day_of_week,
        traffic_source,
        SUM(total_visits) as visits
      FROM daily_visits_summary 
      WHERE bucket >= $1 AND bucket <= $2
      GROUP BY EXTRACT(DOW FROM bucket), traffic_source
      ORDER BY day_of_week
    `;

    const result = await query(dailyTrafficQuery, [dateRange.from, dateRange.to]);
    
    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    const chartData = [];

    for (let i = 0; i < 7; i++) { // DOW: 0 (Sun) to 6 (Sat)
      const dayDataForDay = result.rows.filter(row => Number(row.day_of_week) === i);
      chartData.push({
        name: dayNames[i],
        social: Number(dayDataForDay.find(d => d.traffic_source === 'social')?.visits) || 0,
        redirect: Number(dayDataForDay.find(d => d.traffic_source === 'redirect')?.visits) || 0,
        direct: Number(dayDataForDay.find(d => d.traffic_source === 'direct')?.visits) || 0,
      });
    }

    const conversionMetricsQuery = `
      WITH funnel_stats AS (
        SELECT 
          funnel_stage,
          COUNT(*) as stage_count
        FROM sales_funnel_events 
        WHERE event_timestamp >= $1 AND event_timestamp <= $2
        GROUP BY funnel_stage
      )
      SELECT 
        (SELECT stage_count FROM funnel_stats WHERE funnel_stage = 'opportunity')::float / 
        NULLIF((SELECT stage_count FROM funnel_stats WHERE funnel_stage = 'impression'), 0) * 100 as load_to_opportunity,
        (SELECT stage_count FROM funnel_stats WHERE funnel_stage = 'conversion')::float / 
        NULLIF((SELECT stage_count FROM funnel_stats WHERE funnel_stage = 'opportunity'), 0) * 100 as opportunity_to_win
    `;

    const conversionResult = await query(conversionMetricsQuery, [dateRange.from, dateRange.to]);
    const conversionData = conversionResult.rows[0];

    return {
      chartData,
      loadToOpportunity: Math.round(Number(conversionData?.load_to_opportunity) || 64),
      opportunityToWin: Math.round(Number(conversionData?.opportunity_to_win) || 18),
    };
  }

  static async getTrafficAnalysisData(dateRange: DateRange): Promise<TrafficAnalysisData> {
    return this.executeQuery(
      async () => {
        const deviceQuery = `
          SELECT 
            COALESCE(device_type, 'Unknown') as device_type,
            COALESCE(SUM(total_visits), 0) as visits
          FROM daily_visits_summary 
          WHERE bucket >= $1 AND bucket <= $2
          GROUP BY device_type
          ORDER BY visits DESC
        `;

        const browserQuery = `
          SELECT 
            COALESCE(wv.browser_type, 'Unknown') as browser_type,
            COUNT(*) as visits
          FROM website_visits wv
          WHERE wv.visit_timestamp >= $1 AND wv.visit_timestamp <= $2
          GROUP BY wv.browser_type
          ORDER BY visits DESC
        `;

        const [deviceResult, browserResult] = await Promise.all([
          query(deviceQuery, [dateRange.from, dateRange.to]),
          query(browserQuery, [dateRange.from, dateRange.to])
        ]);

        const totalDeviceVisits = deviceResult.rows.reduce((sum, row) => sum + (Number(row.visits) || 0), 0);
        const totalBrowserVisits = browserResult.rows.reduce((sum, row) => sum + (Number(row.visits) || 0), 0);

        const deviceColors = ["#1E3A8A", "#F59E0B", "#10B981"];
        const browserColors = ["#1E3A8A", "#F59E0B", "#10B981"];

        const deviceData = deviceResult.rows.slice(0, 3).map((row, index) => ({
          name: row.device_type || 'Unknown',
          value: totalDeviceVisits ? Math.round(((Number(row.visits) || 0) / totalDeviceVisits) * 100) : 0,
          color: deviceColors[index % deviceColors.length]
        }));

        const browserData = browserResult.rows.slice(0, 3).map((row, index) => ({
          name: row.browser_type || 'Unknown',
          value: totalBrowserVisits ? Math.round(((Number(row.visits) || 0) / totalBrowserVisits) * 100) : 0,
          color: browserColors[index % browserColors.length]
        }));

        return { deviceData, browserData };
      },
      // Fallback data
      {
        deviceData: [
          { name: "Laptop & PC", value: 70, color: "#1E3A8A" },
          { name: "Mobile Phones", value: 20, color: "#F59E0B" },
          { name: "Tablets & Others", value: 10, color: "#10B981" },
        ],
        browserData: [
          { name: "Chrome", value: 60, color: "#1E3A8A" },
          { name: "Safari", value: 25, color: "#F59E0B" },
          { name: "Firefox", value: 15, color: "#10B981" },
        ]
      },
      'Traffic Analysis Data'
    );
  }

  static async getWeeklyVisitorsData(dateRange: DateRange): Promise<WeeklyVisitorsData> {
    return this.executeQuery(
      async () => {
        const dailyVisitsQuery = `
          SELECT 
            EXTRACT(DOW FROM bucket) as day,
            COALESCE(SUM(unique_sessions), 0) as unique_visitors,
            COALESCE(SUM(total_visits), 0) as total_visitors
          FROM daily_visits_summary 
          WHERE bucket >= $1 AND bucket <= $2
          GROUP BY EXTRACT(DOW FROM bucket)
          ORDER BY day
        `;

        const result = await query(dailyVisitsQuery, [dateRange.from, dateRange.to]);
        
        const data = result.rows.map(row => ({
          day: Number(row.day) + 1, // Assuming day 1-7 is expected, DOW is 0-6
          unique: Number(row.unique_visitors) || 0,
          total: Number(row.total_visitors) || 0,
        }));

        // Fill missing days with zeros
        const completeData = [];
        for (let i = 1; i <= 7; i++) {
          const existingDay = data.find(d => d.day === i);
          completeData.push(existingDay || { day: i, unique: 0, total: 0 });
        }

        return { data: completeData };
      },
      // Fallback data
      {
        data: [
          { day: 1, unique: 40000, total: 60000 },
          { day: 2, unique: 63480, total: 85000 },
          { day: 3, unique: 30000, total: 58000 },
          { day: 4, unique: 72000, total: 90000 },
          { day: 5, unique: 55000, total: 88000 },
          { day: 6, unique: 48000, total: 92000 },
          { day: 7, unique: 35000, total: 65000 },
        ]
      },
      'Weekly Visitors Data'
    );
  }

  static async getWeeklyVisitsData(dateRange: DateRange): Promise<{ data: { day: number; unique: number; total: number }[] }> {
    const dailyVisitsQuery = `
      SELECT 
        EXTRACT(DOW FROM bucket) as day,
        0 as unique_visitors,
        SUM(total_visits) as total_visitors
      FROM daily_visits_summary 
      WHERE bucket >= $1 AND bucket <= $2
      GROUP BY EXTRACT(DOW FROM bucket)
      ORDER BY day
    `;
    const result = await query(dailyVisitsQuery, [dateRange.from, dateRange.to]);
    const data = result.rows.map(row => ({
      day: Number(row.day) + 1,
      unique: 0,
      total: Number(row.total_visitors) || 0,
    }));
    // Fill missing days with zeros
    const completeData = [];
    for (let i = 1; i <= 7; i++) {
      const existingDay = data.find(d => d.day === i);
      completeData.push(existingDay || { day: i, unique: 0, total: 0 });
    }
    return { data: completeData };
  }

  static async getRegionData(dateRange: DateRange): Promise<RegionData> {
    const regionSalesQuery = `
      SELECT 
        r.name as region_name,
        SUM(dss.total_revenue) as revenue,
        SUM(dss.total_units_sold) as units
      FROM daily_sales_summary dss
      JOIN regions r ON dss.region_id = r.region_id
      WHERE dss.bucket >= $1 AND dss.bucket <= $2
      GROUP BY r.region_id, r.name
    `;

    const totalSalesQuery = `
      SELECT 
        SUM(total_revenue) as total_revenue,
        SUM(total_units_sold) as total_units,
        AVG(total_revenue / NULLIF(total_orders, 0)) as avg_order_value
      FROM daily_sales_summary 
      WHERE bucket >= $1 AND bucket <= $2
    `;

    const customerCountsQuery = `
      SELECT 
        COUNT(CASE WHEN DATE_PART('day', NOW() - created_at) <= 30 THEN 1 END) as new_customers,
        COUNT(CASE WHEN DATE_PART('day', NOW() - created_at) > 30 THEN 1 END) as returning_customers
      FROM users
    `;

    const genderQuery = `
      SELECT 
        gender,
        COUNT(*) as count
      FROM users
      GROUP BY gender
    `;

    const [regionResult, totalResult, customerResult, genderResult] = await Promise.all([
      query(regionSalesQuery, [dateRange.from, dateRange.to]),
      query(totalSalesQuery, [dateRange.from, dateRange.to]),
      query(customerCountsQuery),
      query(genderQuery)
    ]);

    const totalData = totalResult.rows[0] || {};
    const customers = customerResult.rows[0] || {};
    
    const totalRevenue = Number(totalData.total_revenue) || 0;
    const totalUnits = Number(totalData.total_units) || 0;
    const avgOrderValue = Number(totalData.avg_order_value) || 0;

    const totalGenderCount = genderResult.rows.reduce((sum, row) => sum + (Number(row.count) || 0), 0);
    const maleCount = Number(genderResult.rows.find(row => row.gender === 'Male')?.count) || 0;
    const femaleCount = Number(genderResult.rows.find(row => row.gender === 'Female')?.count) || 0;

    const colors = ["#4CD8E5", "#8A70D6"];
    const regions = regionResult.rows.map((row, index) => ({
      name: row.region_name,
      value: totalRevenue ? Math.round(((Number(row.revenue) || 0) / totalRevenue) * 100) : 0,
      color: colors[index % colors.length]
    }));

    return {
      totalSales: Math.round(totalRevenue) || 40000, // Fallback to original default if totalRevenue is 0
      salesChange: 2, // Hardcoded, as per original
      totalUnits: totalUnits || 2000, // Fallback
      unitsChange: 2, // Hardcoded
      avgOrderValue: Math.round(avgOrderValue) || 1000, // Fallback
      avgOrderValueChange: 6, // Hardcoded
      avgReturnRate: 6.5, // Hardcoded
      avgReturnRateChange: 6, // Hardcoded
      avgConversionRate: 5.5, // Hardcoded
      avgConversionRateChange: -6, // Hardcoded
      regions,
      customerCounts: {
        newCustomers: Number(customers.new_customers) || 54081, // Fallback
        returningCustomers: Number(customers.returning_customers) || 8120 // Fallback
      },
      genderDistribution: {
        male: totalGenderCount > 0 ? Math.round((maleCount / totalGenderCount) * 100) : 70, // Fallback
        female: totalGenderCount > 0 ? Math.round((femaleCount / totalGenderCount) * 100) : 30 // Fallback
      }
    };
  }

  static async getCustomerVolumeData(dateRange: DateRange): Promise<CustomerVolumeData> {
    const ageGenderQuery = `
      SELECT 
        age_group,
        gender,
        COUNT(*) as count
      FROM users
      GROUP BY age_group, gender
      ORDER BY 
        CASE age_group 
          WHEN '<18' THEN 1
          WHEN '19-24' THEN 2
          WHEN '25-30' THEN 3
          WHEN '31-35' THEN 4
          WHEN '36-40' THEN 5
          WHEN '41-45' THEN 6
          WHEN '45-50' THEN 7
          WHEN '51-55' THEN 8
          WHEN '>55' THEN 9
          ELSE 10
        END
    `;

    const result = await query(ageGenderQuery);
    
    const ageGroups = ['<18', '19-24', '25-30', '31-35', '36-40', '41-45', '45-50', '51-55', '>55'];
    
    const chartData = ageGroups.map(age => {
      const menCount = Number(result.rows.find(row => row.age_group === age && row.gender === 'Male')?.count) || 0;
      const womenCount = Number(result.rows.find(row => row.age_group === age && row.gender === 'Female')?.count) || 0;
      
      return {
        age,
        men: menCount,
        women: womenCount
      };
    });

    return { chartData };
  }

  static async getSKUData(skuId: string = 'ID140001'): Promise<SKUData> {
    const skuQuery = `
      SELECT 
        s.*,
        ARRAY_AGG(c.name) as category_names,
        COALESCE(SUM(dss.total_revenue), 0) as week_sales,
        COALESCE(AVG(dss.total_revenue), 0) as daily_avg
      FROM skus s
      LEFT JOIN categories c ON s.category_id = c.category_id
      LEFT JOIN daily_sales_summary dss ON s.sku_id = dss.sku_id 
        AND dss.bucket >= NOW() - INTERVAL '7 days'
      WHERE s.sku_code = $1
      GROUP BY s.sku_id
    `;

    const interactionQuery = `
      SELECT 
        AVG(CASE WHEN interaction_type = 'click' THEN 1.0 ELSE 0.0 END) * 100 as ctr,
        COUNT(CASE WHEN interaction_type = 'conversion' THEN 1 END)::float / 
        NULLIF(COUNT(*), 0) * 100 as conversion_rate
      FROM sku_interactions si
      JOIN skus s ON si.sku_id = s.sku_id
      WHERE s.sku_code = $1
      AND si.interaction_timestamp >= NOW() - INTERVAL '7 days'
    `;

    const [skuResult, interactionResult] = await Promise.all([
      query(skuQuery, [skuId]),
      query(interactionQuery, [skuId])
    ]);

    const sku = skuResult.rows[0];
    const interaction = interactionResult.rows[0];

    if (!sku) {
      return {
        name: "Diamond Cut Earrings",
        id: "ID140001",
        stock: "Available",
        listed: "Yes",
        digitised: "Yes",
        price: 1050,
        categories: ["Earrings", "Diamond"],
        thisWeekSales: 8459,
        dailyAverage: 1650,
        conversionRate: 71,
        averageCTR: 2.3,
        imageSrc: "/diamond-earrings.png"
      };
    }

    return {
      name: sku.name,
      id: sku.sku_code,
      stock: sku.stock_status,
      listed: sku.is_listed ? "Yes" : "No",
      digitised: sku.is_digitized ? "Yes" : "No",
      price: parseFloat(sku.price),
      categories: sku.category_names?.filter(Boolean) || [],
      thisWeekSales: Math.round(Number(sku.week_sales) || 0),
      dailyAverage: Math.round(Number(sku.daily_avg) || 0),
      conversionRate: Math.round(Number(interaction?.conversion_rate) || 71), // Fallback to original
      averageCTR: parseFloat(Number(interaction?.ctr || 2.3).toFixed(1)), // Fallback and format
      imageSrc: sku.image_url || "/diamond-earrings.png"
    };
  }

  static async getVisitorAnalysisData(dateRange: DateRange): Promise<VisitorAnalysisData> {
    const heatmapQuery = `
      SELECT 
        wv.traffic_source,
        EXTRACT(DOW FROM wv.visit_timestamp) as day_of_week,
        COUNT(*) as visits
      FROM website_visits wv
      WHERE wv.visit_timestamp >= $1 AND wv.visit_timestamp <= $2
      GROUP BY wv.traffic_source, EXTRACT(DOW FROM wv.visit_timestamp)
    `;

    const result = await query(heatmapQuery, [dateRange.from, dateRange.to]);
    
    const platforms = ["Instagram", "Google", "WhatsApp", "Facebook", "TikTok"];
    const days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]; // Mon=0 to Sun=6
    
    const heatmapData: Record<string, number[]> = {};
    
    platforms.forEach(platform => {
      heatmapData[platform] = new Array(7).fill(0);
    });

    result.rows.forEach(row => {
      const platformName = platforms.find(p => row.traffic_source?.toLowerCase().includes(p.toLowerCase()));
      if (platformName) {
        const dow = Number(row.day_of_week); // 0=Sun, 1=Mon, ..., 6=Sat
        const dayIndex = (dow === 0) ? 6 : dow - 1; // Convert DOW to Mon=0..Sun=6 index
        if (dayIndex >= 0 && dayIndex < 7) { // Ensure dayIndex is valid
           heatmapData[platformName][dayIndex] = (heatmapData[platformName][dayIndex] || 0) + (Number(row.visits) || 0);
        }
      }
    });

    return { heatmapData, platforms, days };
  }

  static async getSalesFunnelData(dateRange: DateRange): Promise<SalesFunnelData> {
    const funnelQuery = `
      WITH funnel_counts AS (
        SELECT 
          funnel_stage,
          COUNT(*) as count
        FROM sales_funnel_events 
        WHERE event_timestamp >= $1 AND event_timestamp <= $2
        GROUP BY funnel_stage
      ),
      total_impressions AS (
        SELECT count FROM funnel_counts WHERE funnel_stage = 'impression'
      )
      SELECT 
        fc.funnel_stage,
        fc.count,
        ROUND((fc.count::float / NULLIF(ti.count,0)) * 100) as percentage
      FROM funnel_counts fc
      CROSS JOIN total_impressions ti
      ORDER BY 
        CASE fc.funnel_stage
          WHEN 'impression' THEN 1
          WHEN 'interaction' THEN 2
          WHEN 'add_to_cart' THEN 3
          WHEN 'opportunity' THEN 4
          WHEN 'conversion' THEN 5
          ELSE 6
        END
    `;

    const revenueQuery = `
      SELECT SUM(total_revenue) as weekly_revenue
      FROM daily_sales_summary 
      WHERE bucket >= $1 AND bucket <= $2
    `;

    const unitsQuery = `
      SELECT SUM(total_units_sold) as units_sold
      FROM daily_sales_summary 
      WHERE bucket >= $1 AND bucket <= $2
    `;

    const [funnelResult, revenueResult, unitsResult] = await Promise.all([
      query(funnelQuery, [dateRange.from, dateRange.to]),
      query(revenueQuery, [dateRange.from, dateRange.to]),
      query(unitsQuery, [dateRange.from, dateRange.to])
    ]);

    const colors = ["#0090FF", "#4DD7FE", "#16A085", "#0D8072", "#065F46"];
    const stages = funnelResult.rows.map((row, index) => ({
      value: `${(Number(row.count) / 1000).toFixed(1)}k`,
      percent: Number(row.percentage) || 0,
      change: index === 0 ? null : Math.floor(Math.random() * 10) - 3, // Original random change
      color: colors[index % colors.length]
    }));

    return {
      weeklyRevenue: Math.round(Number(revenueResult.rows[0]?.weekly_revenue) || 8459), // Fallback
      stages,
      unitsSold: Number(unitsResult.rows[0]?.units_sold) || 500 // Fallback
    };
  }

  static async getInteractionDurationData(dateRange: DateRange): Promise<InteractionDurationData> {
    const durationQuery = `
      SELECT 
        EXTRACT(DOW FROM interaction_timestamp) as day,
        AVG(CASE WHEN interaction_type = '3DView' THEN duration_seconds END) as sku_duration,
        AVG(duration_seconds) as site_avg_duration
      FROM sku_interactions
      WHERE interaction_timestamp >= $1 AND interaction_timestamp <= $2
      GROUP BY EXTRACT(DOW FROM interaction_timestamp)
      ORDER BY day
    `;

    const result = await query(durationQuery, [dateRange.from, dateRange.to]);
    
    const data = result.rows.map(row => {
      const skuDuration = Number(row.sku_duration) || 50; // Fallback
      const siteAvgDuration = Number(row.site_avg_duration) || 45; // Fallback
      return {
        day: (Number(row.day) + 1).toString(), // DOW (0-6) to day number string "1"-"7"
        unique: Math.round(skuDuration),
        total: Math.round(siteAvgDuration),
        prevUnique: Math.round(skuDuration * 0.9), // Original derived placeholder
        prevTotal: Math.round(siteAvgDuration * 0.9) // Original derived placeholder
      };
    });
    return { data };
  }

  static async getTotalSalesData(dateRange: DateRange): Promise<TotalSalesData> {
    const salesQuery = `
      SELECT SUM(total_revenue) as total_sales
      FROM daily_sales_summary 
      WHERE bucket >= $1 AND bucket <= $2
    `;

    const previousWeekSalesQuery = `
      SELECT SUM(total_revenue) as previous_sales
      FROM daily_sales_summary 
      WHERE bucket >= $1 AND bucket <= $2
    `;

    const dailyBreakdownQuery = `
      SELECT 
        EXTRACT(DOW FROM dvs.bucket) as day_of_week,
        dvs.traffic_source,
        SUM(dvs.total_visits) as visits -- Changed from total_revenue for visit breakdown
      FROM daily_visits_summary dvs
      WHERE dvs.bucket >= $1 AND dvs.bucket <= $2
      GROUP BY EXTRACT(DOW FROM dvs.bucket), dvs.traffic_source
    `;

    const previousWeekStart = new Date(dateRange.from.getTime() - 7 * 24 * 60 * 60 * 1000);
    const previousWeekEnd = new Date(dateRange.to.getTime() - 7 * 24 * 60 * 60 * 1000);

    const [salesResult, previousWeekSalesResult, breakdownResult] = await Promise.all([
      query(salesQuery, [dateRange.from, dateRange.to]),
      query(previousWeekSalesQuery, [previousWeekStart, previousWeekEnd]), // Corrected params
      query(dailyBreakdownQuery, [dateRange.from, dateRange.to])
    ]);

    const totalSales = Math.round(Number(salesResult.rows[0]?.total_sales) || 35248); // Fallback
    const previousWeekSales = Math.round(Number(previousWeekSalesResult.rows[0]?.previous_sales) || 15230); // Fallback
    
    const totalForProgress = totalSales + previousWeekSales;
    const progressPercent = totalForProgress > 0 ? Math.round((totalSales / totalForProgress) * 100) : 0;

    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    const salesDataMap: { [key: number]: { socialMedia: number; redirectLinks: number; directLogin: number } } = {};

    for (const row of breakdownResult.rows) {
        const dow = Number(row.day_of_week);
        if (dow < 0 || dow > 6) continue; // Skip invalid DOW
        if (!salesDataMap[dow]) {
            salesDataMap[dow] = { socialMedia: 0, redirectLinks: 0, directLogin: 0 };
        }
        const visits = Number(row.visits) || 0;
        if (row.traffic_source === 'social') salesDataMap[dow].socialMedia += visits;
        else if (row.traffic_source === 'redirect') salesDataMap[dow].redirectLinks += visits;
        else if (row.traffic_source === 'direct') salesDataMap[dow].directLogin += visits;
    }

    const salesData = dayNames.map((dayName, index) => {
        // index is DOW (0 for Sun, 1 for Mon, etc.)
        return {
            day: dayName,
            socialMedia: salesDataMap[index]?.socialMedia || 0,
            redirectLinks: salesDataMap[index]?.redirectLinks || 0,
            directLogin: salesDataMap[index]?.directLogin || 0,
        };
    });

    return {
      totalSales,
      previousWeekSales,
      progressPercent,
      salesData
    };
  }

  static async getConversionRatesData(dateRange: DateRange): Promise<ConversionRatesData> {
    const conversionQuery = `
      SELECT 
        embed_assisted,
        COUNT(CASE WHEN interaction_type = 'conversion' THEN 1 END)::float / 
        NULLIF(COUNT(*), 0) * 100 as conversion_rate
      FROM sku_interactions
      WHERE interaction_timestamp >= $1 AND interaction_timestamp <= $2
      GROUP BY embed_assisted
    `;

    const result = await query(conversionQuery, [dateRange.from, dateRange.to]);
    
    const withEmbedsRate = parseFloat(result.rows.find(row => row.embed_assisted === true)?.conversion_rate) || 45; // Fallback
    const withoutEmbedsRate = parseFloat(result.rows.find(row => row.embed_assisted === false)?.conversion_rate) || 35; // Fallback

    // Original placeholder chart data generation
    const chartData = Array.from({ length: 6 }, (_, i) => ({
      withEmbeds: Math.round(withEmbedsRate + (Math.random() * 10 - 5)),
      withoutEmbeds: Math.round(withoutEmbedsRate + (Math.random() * 10 - 5))
    }));

    return { chartData };
  }

  static async getReturnRatesData(dateRange: DateRange): Promise<ReturnRatesData> {
    const returnQuery = `
      SELECT 
        embed_assisted,
        COUNT(CASE WHEN interaction_type = 'return' THEN 1 END)::float / 
        NULLIF(COUNT(*), 0) * 100 as return_rate
      FROM sku_interactions
      WHERE interaction_timestamp >= $1 AND interaction_timestamp <= $2
      GROUP BY embed_assisted
    `;

    const result = await query(returnQuery, [dateRange.from, dateRange.to]);
    
    const withEmbedsRate = parseFloat(result.rows.find(row => row.embed_assisted === true)?.return_rate) || 45; // Fallback
    const withoutEmbedsRate = parseFloat(result.rows.find(row => row.embed_assisted === false)?.return_rate) || 71; // Fallback

    return {
      without: { 
        rate: Math.round(withoutEmbedsRate), 
        trend: withoutEmbedsRate > 50 ? "down" : "up" // Original arbitrary trend
      },
      with: { 
        rate: Math.round(withEmbedsRate), 
        trend: withEmbedsRate > 50 ? "down" : "up" // Original arbitrary trend
      }
    };
  }

  static async getEmbedAssistedRevenueData(dateRange: DateRange): Promise<EmbedAssistedRevenueData> {
    const revenueQuery = `
      SELECT 
        EXTRACT(DOW FROM si.interaction_timestamp) as day,
        COUNT(CASE WHEN si.embed_assisted = true THEN 1 END) as embed_assisted_interactions,
        COUNT(*) as total_interactions
      FROM sku_interactions si
      WHERE si.interaction_timestamp >= $1 AND si.interaction_timestamp <= $2
      GROUP BY EXTRACT(DOW FROM si.interaction_timestamp)
      ORDER BY day
    `;

    const result = await query(revenueQuery, [dateRange.from, dateRange.to]);
    
    const data = result.rows.map(row => {
      // Removed random data and large multipliers, assuming these represent counts or scaled revenue.
      // If these are meant to be monetary values, the query should sum revenue.
      // For now, treating them as interaction counts.
      const embedAssistedCount = Number(row.embed_assisted_interactions) || 0;
      const totalInteractionsCount = Number(row.total_interactions) || 0;
      
      // Original logic had large random numbers and *1000.
      // Reverting to simpler interpretation based on query, can be adjusted if intent was different.
      return {
        day: Number(row.day) + 1, // DOW (0-6) to 1-7
        unique: embedAssistedCount, // Assuming 'unique' refers to embed-assisted interactions
        total: totalInteractionsCount, // Assuming 'total' refers to all interactions
      };
    });

    return { data };
  }
}

================
File: lib/db.ts
================
// lib/db.ts
import { Pool, PoolConfig, QueryResult } from 'pg';

let pool: Pool | null = null;

function stripQuotes(str: string | undefined): string | undefined {
  if (!str) return str;
  return str.replace(/^"(.*)"$/, '$1').replace(/^'(.*)'$/, '$1');
}

async function tryPool(config: PoolConfig): Promise<Pool> {
  const testPool = new Pool(config);
  try {
    await testPool.query('SELECT 1');
    return testPool;
  } catch (e) {
    await testPool.end().catch(() => {});
    throw e;
  }
}

export async function getPool(): Promise<Pool> {
  if (pool) return pool;

  // Try credentials method
  const {
    TIMESCALEDB_HOST,
    TIMESCALEDB_PORT,
    TIMESCALEDB_DATABASE,
    TIMESCALEDB_USER,
    TIMESCALEDB_PASSWORD,
    DATABASE_URL
  } = process.env;

  let lastError: any = null;

  if (
    TIMESCALEDB_HOST &&
    TIMESCALEDB_PORT &&
    TIMESCALEDB_DATABASE &&
    TIMESCALEDB_USER &&
    TIMESCALEDB_PASSWORD
  ) {
    try {
      const config: PoolConfig = {
        host: TIMESCALEDB_HOST,
        port: parseInt(TIMESCALEDB_PORT, 10),
        database: TIMESCALEDB_DATABASE,
        user: TIMESCALEDB_USER,
        password: stripQuotes(TIMESCALEDB_PASSWORD),
        ssl: { rejectUnauthorized: false },
        max: 10,
        min: 0,
        idleTimeoutMillis: 10000,
        connectionTimeoutMillis: 5000,
        statement_timeout: 30000,
        query_timeout: 30000,
        application_name: 'camarin-analytics-dashboard'
      };
      pool = await tryPool(config);
      setupPoolEventHandlers(pool);
      return pool;
    } catch (e) {
      lastError = e;
      // Fall through to try DATABASE_URL
    }
  }

  // Try DATABASE_URL method
  if (DATABASE_URL) {
    try {
      const config: PoolConfig = {
        connectionString: DATABASE_URL,
        ssl: { rejectUnauthorized: false },
        max: 10,
        min: 0,
        idleTimeoutMillis: 10000,
        connectionTimeoutMillis: 5000,
        statement_timeout: 30000,
        query_timeout: 30000,
        application_name: 'camarin-analytics-dashboard'
      };
      pool = await tryPool(config);
      setupPoolEventHandlers(pool);
      return pool;
    } catch (e) {
      lastError = e;
    }
  }

  // If both methods fail
  throw new Error(
    `Failed to connect to TimescaleDB using both credentials and DATABASE_URL. Last error: ${
      lastError instanceof Error ? lastError.message : String(lastError)
    }`
  );
}

function setupPoolEventHandlers(currentPool: Pool) {
  currentPool.on('error', (err) => {
    console.error('Database pool error:', err);
  });
  currentPool.on('connect', (client) => {
    client.on('error', (err) => {
      console.error('Database client error:', err);
    });
  });
}

export async function query(text: string, params?: any[]): Promise<QueryResult<any>> {
  const startTime = Date.now();
  const currentPool = await getPool();
  try {
    const result = await currentPool.query(text, params);
    const duration = Date.now() - startTime;
    console.log('Query completed in', duration, 'ms. Rows returned:', result.rows.length);
    return result;
  } catch (error) {
    const duration = Date.now() - startTime;
    console.error('Database query error after', duration, 'ms:', error);
    throw new Error(`Database query failed: ${error instanceof Error ? error.message : String(error)}`);
  }
}

export async function testConnection(): Promise<boolean> {
  try {
    const result = await query('SELECT NOW() as current_time, version() as db_version');
    console.log('Database connection test successful:', result.rows[0]);
    return true;
  } catch (error) {
    console.error('Database connection test failed:', error);
    return false;
  }
}

export async function endPool() {
  if (pool) {
    await pool.end();
    pool = null;
    console.log('Database pool closed');
  }
}

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: public/camarinlogo.svg
================
<svg width="206" height="46" viewBox="0 0 206 46" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_6_761)">
<path d="M9.03429 35.9228C7.01143 33.2631 6 28.9739 6 23.0552C6 17.1364 7.01143 12.8472 9.03429 10.1875C11.0572 7.52784 14.4099 6.198 19.0924 6.198C23.775 6.198 27.1464 7.49038 29.2067 10.0752L27.9705 11.199C26.3223 8.9888 23.3629 7.88372 19.0924 7.88372C17.2194 7.88372 15.6461 8.08975 14.3724 8.50181C13.0987 8.87642 11.9187 9.60689 10.8324 10.6932C9.7835 11.7421 8.99683 13.2967 8.47239 15.3571C7.94794 17.3799 7.68572 19.946 7.68572 23.0552C7.68572 26.1644 7.94794 28.7492 8.47239 30.8095C8.99683 32.8323 9.7835 34.387 10.8324 35.4733C11.9187 36.5222 13.0987 37.2527 14.3724 37.6647C15.6461 38.0393 17.2194 38.2266 19.0924 38.2266C23.3629 38.2266 26.3223 37.1216 27.9705 34.9114L29.2067 36.0352C27.1464 38.62 23.775 39.9124 19.0924 39.9124C14.4099 39.9124 11.0572 38.5825 9.03429 35.9228Z" fill="white"/>
<path d="M151.111 22.999L158.753 39.3505H156.899L149.032 22.4933C149.107 22.4558 149.425 22.306 149.987 22.0437C150.586 21.7441 150.999 21.538 151.223 21.4257C151.448 21.2758 151.823 21.0323 152.347 20.6952C152.872 20.358 153.265 20.0396 153.527 19.7399C153.789 19.4028 154.07 19.0282 154.37 18.6161C154.707 18.1666 154.951 17.6796 155.1 17.1552C155.25 16.5933 155.325 15.9939 155.325 15.3571C155.325 12.9971 154.201 11.2552 151.954 10.1313C149.706 9.00753 146.915 8.44562 143.581 8.44562H139.086V39.3505H137.4V6.7599H143.581C148.002 6.7599 151.336 7.52784 153.583 9.06372C155.868 10.5996 157.011 12.6974 157.011 15.3571C157.011 17.0802 156.43 18.6161 155.269 19.9647C154.108 21.2758 152.722 22.2872 151.111 22.999Z" fill="white"/>
<path d="M166.374 6.7599H168.059V39.3505H166.374V6.7599Z" fill="white"/>
<path d="M178.72 39.3505V6.7599H180.406L198.724 36.26V6.7599H200.41V39.3505H198.724L180.406 9.7942V39.3505H178.72Z" fill="white"/>
</g>
<g filter="url(#filter1_d_6_761)">
<path d="M47.3953 10.3267L58.9144 37.4667L59.633 39.1525H61.443L47.3953 6L33.3477 39.1525H35.1458L47.3953 10.3267Z" fill="white"/>
<path d="M94.825 8.92191V37.4667V39.1525H96.5107V6.56191H94.825L82.1821 19.2048L69.5392 6.56191H67.8535V39.0963L69.5392 39.1525V8.92191L82.1821 21.5648L94.825 8.92191Z" fill="white"/>
<path d="M116.975 10.3267L128.494 37.4667L129.176 39.1525H131.023L116.975 6L102.927 39.1525H104.726L116.975 10.3267Z" fill="white"/>
</g>
<defs>
<filter id="filter0_d_6_761" x="0.599171" y="0.797169" width="205.212" height="44.516" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2.70041"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_6_761"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_6_761" result="shape"/>
</filter>
<filter id="filter1_d_6_761" x="27.9468" y="0.599171" width="108.476" height="43.9541" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2.70041"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_6_761"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_6_761" result="shape"/>
</filter>
</defs>
</svg>

================
File: public/placeholder-logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="215" height="48" fill="none"><path fill="#000" d="M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z"/><path fill="#171717" fill-rule="evenodd" d="m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z" clip-rule="evenodd"/></svg>

================
File: public/placeholder.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>

================
File: styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: .env.local
================
TIMESCALEDB_HOST=
TIMESCALEDB_PORT=
TIMESCALEDB_USER=
TIMESCALEDB_PASSWORD=
TIMESCALEDB_DATABASE=
TIMESCALEDB_SSLMODE=require

NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=
CLERK_SECRET_KEY=

================
File: .gitignore
================
node_modules
.next
.env
.env.development.local
.env.test.local
.env.production.local
.DS_Store

public/assetsDashboard
# clerk configuration (can include secrets)
/.clerk/

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: db.sql
================
CREATE TABLE regions (
    region_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    country_code VARCHAR(10),
    latitude DECIMAL(9,6),
    longitude DECIMAL(9,6),
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE,
    hashed_password VARCHAR(255), -- If authentication is implemented
    full_name VARCHAR(255),
    age_group VARCHAR(20), -- e.g., "<18", "19-24"
    gender VARCHAR(10),    -- e.g., "Male", "Female", "Other"
    region_id INTEGER REFERENCES regions(region_id),
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    last_login_at TIMESTAMPTZ
);

CREATE INDEX idx_users_region_id ON users(region_id);
CREATE INDEX idx_users_age_group ON users(age_group);
CREATE INDEX idx_users_gender ON users(gender);

CREATE TABLE categories (
    category_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    parent_category_id INTEGER REFERENCES categories(category_id) NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE skus (
    sku_id SERIAL PRIMARY KEY,
    sku_code VARCHAR(50) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    category_id INTEGER REFERENCES categories(category_id),
    stock_status VARCHAR(20) DEFAULT 'Available',
    is_listed BOOLEAN DEFAULT TRUE,
    is_digitized BOOLEAN DEFAULT FALSE,
    image_url VARCHAR(512),
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_skus_category_id ON skus(category_id);
CREATE INDEX idx_skus_name ON skus(name); -- For searching



CREATE TABLE website_visits (
    visit_timestamp TIMESTAMPTZ NOT NULL,
    visit_id BIGSERIAL,
    user_id INTEGER REFERENCES users(user_id) NULL,
    session_id TEXT,
    duration_seconds INTEGER,
    device_type TEXT,
    browser_type TEXT,
    traffic_source TEXT,

    referring_url TEXT,
    landing_page_url TEXT,
    exit_page_url TEXT,

    region_id INTEGER REFERENCES regions(region_id) NULL,
    ip_address TEXT,
    is_bounce BOOLEAN DEFAULT FALSE,
    conversion_event_occurred BOOLEAN DEFAULT FALSE,
    utm_params JSONB NULL,
    metadata JSONB NULL,

    CONSTRAINT visit_pk PRIMARY KEY (visit_timestamp, visit_id)
);

SELECT create_hypertable('website_visits', 'visit_timestamp', if_not_exists => TRUE);


CREATE INDEX idx_visits_user_id ON website_visits(user_id, visit_timestamp DESC);
CREATE INDEX idx_visits_session_id ON website_visits(session_id, visit_timestamp DESC);
CREATE INDEX idx_visits_region_id ON website_visits(region_id, visit_timestamp DESC);
CREATE INDEX idx_visits_traffic_source ON website_visits(traffic_source, visit_timestamp DESC);
CREATE INDEX idx_visits_device_type ON website_visits(device_type, visit_timestamp DESC);
CREATE INDEX idx_visits_browser_type ON website_visits(browser_type, visit_timestamp DESC);


CREATE TABLE sku_interactions (
    interaction_timestamp TIMESTAMPTZ NOT NULL,
    interaction_id BIGSERIAL,
    visit_id BIGINT,
    session_id TEXT,
    user_id INTEGER REFERENCES users(user_id) NULL,
    sku_id INTEGER NOT NULL REFERENCES skus(sku_id),
    interaction_type TEXT NOT NULL,
    duration_seconds INTEGER NULL,
    embed_assisted BOOLEAN DEFAULT FALSE,
    metadata JSONB NULL,

    PRIMARY KEY (interaction_timestamp, sku_id, interaction_id)
);

SELECT create_hypertable('sku_interactions', 'interaction_timestamp', 'sku_id', 4, if_not_exists => TRUE);


CREATE INDEX idx_interactions_sku_id ON sku_interactions(sku_id, interaction_timestamp DESC);
CREATE INDEX idx_interactions_user_id ON sku_interactions(user_id, interaction_timestamp DESC);
CREATE INDEX idx_interactions_session_id ON sku_interactions(session_id, interaction_timestamp DESC);
CREATE INDEX idx_interactions_type ON sku_interactions(interaction_type, interaction_timestamp DESC);
CREATE INDEX idx_interactions_embed ON sku_interactions(embed_assisted, interaction_timestamp DESC);

CREATE TABLE sales_funnel_events (
    event_timestamp TIMESTAMPTZ NOT NULL,
    funnel_event_id BIGSERIAL,
    visit_id BIGINT,
    session_id TEXT,
    sku_id INTEGER REFERENCES skus(sku_id) NULL,
    user_id INTEGER REFERENCES users(user_id) NULL,
    funnel_stage TEXT NOT NULL,
    metadata JSONB NULL,

    PRIMARY KEY (event_timestamp, funnel_stage, funnel_event_id)
);

SELECT create_hypertable('sales_funnel_events', 'event_timestamp', 'funnel_stage', 4, if_not_exists => TRUE);


CREATE INDEX idx_funnel_visit_id ON sales_funnel_events(visit_id, event_timestamp DESC);
CREATE INDEX idx_funnel_session_id ON sales_funnel_events(session_id, event_timestamp DESC);
CREATE INDEX idx_funnel_user_id ON sales_funnel_events(user_id, event_timestamp DESC);
CREATE INDEX idx_funnel_sku_id ON sales_funnel_events(sku_id, event_timestamp DESC);
CREATE INDEX idx_funnel_stage ON sales_funnel_events(funnel_stage, event_timestamp DESC);

CREATE TABLE orders (
    order_date TIMESTAMPTZ NOT NULL,
    order_id BIGSERIAL,
    user_id INTEGER REFERENCES users(user_id) NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    status TEXT NOT NULL,  -- Changed from VARCHAR(20) to TEXT
    region_id INTEGER REFERENCES regions(region_id),
    shipping_address TEXT,
    billing_address TEXT,
    metadata JSONB NULL,

    PRIMARY KEY (order_date, order_id)
);

SELECT create_hypertable('orders', 'order_date', if_not_exists => TRUE);


CREATE INDEX idx_orders_user_id ON orders(user_id, order_date DESC);
CREATE INDEX idx_orders_status ON orders(status, order_date DESC);
CREATE INDEX idx_orders_region_id ON orders(region_id, order_date DESC);

CREATE TABLE order_items (
    order_item_id SERIAL PRIMARY KEY,
    order_date TIMESTAMPTZ NOT NULL,
    order_id BIGINT NOT NULL,
    sku_id INTEGER NOT NULL REFERENCES skus(sku_id),
    quantity INTEGER NOT NULL,
    price_at_purchase DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_order FOREIGN KEY (order_date, order_id)
      REFERENCES orders (order_date, order_id) ON DELETE CASCADE
);
CREATE TABLE
tsdb=> CREATE INDEX idx_orderitems_order_id ON order_items(order_id);
CREATE INDEX idx_orderitems_sku_id ON order_items(sku_id);



ALTER TABLE website_visits SET (
    timescaledb.compress,
    timescaledb.compress_segmentby = 'region_id, traffic_source, device_type, browser_type',
    timescaledb.compress_orderby = 'visit_timestamp DESC'
);
SELECT add_compression_policy('website_visits', INTERVAL '7 days');

ALTER TABLE sku_interactions SET (
    timescaledb.compress,
    timescaledb.compress_segmentby = 'sku_id, interaction_type, user_id',
    timescaledb.compress_orderby = 'interaction_timestamp DESC'
);
SELECT add_compression_policy('sku_interactions', INTERVAL '7 days');

ALTER TABLE sales_funnel_events SET (
    timescaledb.compress,
    timescaledb.compress_segmentby = 'funnel_stage, sku_id, user_id',
    timescaledb.compress_orderby = 'event_timestamp DESC'
);
SELECT add_compression_policy('sales_funnel_events', INTERVAL '7 days');

ALTER TABLE website_visits SET (
    timescaledb.compress,
    timescaledb.compress_segmentby = 'region_id, traffic_source, device_type, browser_type, visit_id',
    timescaledb.compress_orderby = 'visit_timestamp DESC'
);


ALTER TABLE sku_interactions SET (
    timescaledb.compress,
    timescaledb.compress_segmentby = 'sku_id, interaction_type, user_id, interaction_id',
    timescaledb.compress_orderby = 'interaction_timestamp DESC'
);

ALTER TABLE sales_funnel_events SET (
    timescaledb.compress,
    timescaledb.compress_segmentby = 'funnel_stage, sku_id, user_id, funnel_event_id',
    timescaledb.compress_orderby = 'event_timestamp DESC'
);
CREATE MATERIALIZED VIEW daily_visits_summary
WITH (timescaledb.continuous) AS
SELECT
    time_bucket('1 day', visit_timestamp) AS bucket,
    region_id,
    traffic_source,
    device_type,
    COUNT(*) AS total_visits,
    COUNT(DISTINCT session_id) AS unique_sessions, -- Approximation for unique visitors daily
    SUM(CASE WHEN is_bounce THEN 1 ELSE 0 END) AS total_bounces,
    AVG(duration_seconds) AS avg_duration
FROM website_visits
GROUP BY bucket, region_id, traffic_source, device_type;


SELECT add_continuous_aggregate_policy('daily_visits_summary',
    start_offset => INTERVAL '3 days', -- Start aggregating data older than 3 days
    end_offset   => INTERVAL '1 hour',  -- Aggregate up to 1 hour ago
    schedule_interval => INTERVAL '1 hour');


CREATE MATERIALIZED VIEW daily_sku_interaction_summary
WITH (timescaledb.continuous) AS
SELECT
    time_bucket('1 day', interaction_timestamp) AS bucket,
    sku_id,
    interaction_type,
    embed_assisted,
    COUNT(*) AS interaction_count,
    AVG(duration_seconds) FILTER (WHERE interaction_type = '3DView') AS avg_3d_view_duration -- Example specific metric
FROM sku_interactions
GROUP BY bucket, sku_id, interaction_type, embed_assisted;

SELECT add_continuous_aggregate_policy('daily_sku_interaction_summary',
    start_offset => INTERVAL '3 days',
    end_offset   => INTERVAL '1 hour',
    schedule_interval => INTERVAL '1 hour');

CREATE MATERIALIZED VIEW daily_sales_summary
WITH (timescaledb.continuous) AS
SELECT
    time_bucket('1 day', o.order_date) as bucket,
    oi.sku_id,
    o.region_id,
    SUM(oi.quantity) as total_units_sold,
    SUM(oi.quantity * oi.price_at_purchase) as total_revenue,
    COUNT(DISTINCT o.order_id) as total_orders
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
WHERE o.status = 'Completed' -- Only count completed orders for revenue
GROUP BY bucket, oi.sku_id, o.region_id;

SELECT add_continuous_aggregate_policy('daily_sales_summary',
    start_offset => INTERVAL '7 days',
    end_offset   => INTERVAL '1 day', -- Less frequent refresh might be okay for sales
    schedule_interval => INTERVAL '1 day');

-- Ingestion Errors Table
CREATE TABLE IF NOT EXISTS ingestion_errors (
    error_id SERIAL PRIMARY KEY,
    target_queue VARCHAR(255) NOT NULL,
    event_payload JSONB,
    error_message TEXT NOT NULL,
    error_timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    retry_count INTEGER DEFAULT 0,
    processed_at TIMESTAMPTZ NULL -- Timestamp when/if reprocessed successfully
);
CREATE INDEX IF NOT EXISTS idx_ingestion_errors_queue_timestamp ON ingestion_errors(target_queue, error_timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_ingestion_errors_processed_at ON ingestion_errors(processed_at NULLS FIRST);


--ALTER Updates on Order table

ALTER TABLE orders
    ADD COLUMN IF NOT EXISTS ecommerce_order_id TEXT;

ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    ADD COLUMN IF NOT EXISTS updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP;

CREATE UNIQUE INDEX IF NOT EXISTS idx_orders_ecommerce_order_id_unique ON orders (ecommerce_order_id);
CREATE INDEX IF NOT EXISTS idx_orders_ecommerce_id_search ON orders(ecommerce_order_id, order_date DESC);
CREATE INDEX IF NOT EXISTS idx_orderitems_order_date_id ON order_items(order_date, order_id);
CREATE INDEX IF NOT EXISTS idx_orderitems_sku_id ON order_items(sku_id);

--ALTER Updates of adding CURRENT_TIMESTAMP to different relations 
ALTER TABLE users ADD COLUMN IF NOT EXISTS updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE regions ADD COLUMN IF NOT EXISTS updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE categories ADD COLUMN IF NOT EXISTS updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP;

ALTER TABLE categories DROP CONSTRAINT IF EXISTS categories_name_key;
CREATE UNIQUE INDEX IF NOT EXISTS unique_category_name_parent
ON categories (name, (COALESCE(parent_category_id, -1)));

================
File: middleware.ts
================
import { clerkMiddleware } from '@clerk/nextjs/server';

export default clerkMiddleware();

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico|auth(?:/.*)?|sign-in|sign-up).*)',
  ],
};

================
File: next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
}

export default nextConfig

================
File: package.json
================
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/clerk-react": "^5.31.9",
    "@clerk/nextjs": "^6.21.0",
    "@emotion/is-prop-valid": "latest",
    "@heroicons/react": "^1.0.6",
    "@hookform/resolvers": "^3.9.1",
    "@next/font": "^14.2.15",
    "@nivo/core": "^0.89.1",
    "@nivo/stream": "^0.89.1",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "apexcharts": "^4.7.0",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "cobe": "^0.6.3",
    "d3-scale": "^4.0.2",
    "date-fns": "latest",
    "echarts": "^5.6.0",
    "echarts-for-react": "^3.0.2",
    "embla-carousel-react": "8.5.1",
    "framer-motion": "latest",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "magic-ui": "^0.1.0",
    "motion": "^12.9.4",
    "next": "15.2.4",
    "next-themes": "^0.4.4",
    "react": "^19",
    "react-apexcharts": "^1.7.0",
    "react-day-picker": "8.10.1",
    "react-dom": "^19",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "recharts": "latest",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.6",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/pg": "^8.15.4",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "pg": "^8.16.0",
    "postcss": "^8",
    "swr": "^2.3.3",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
# 3d-analytics-dashboard
Analytics Dashboard for the 3D Digitization Feature

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        sans: ["Inter", "sans-serif"],
      },
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
